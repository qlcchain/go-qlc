// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message.proto

package pb

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FrontierReq struct {
	Address              []byte   `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Age                  uint32   `protobuf:"varint,2,opt,name=Age,proto3" json:"Age,omitempty"`
	Count                uint32   `protobuf:"varint,3,opt,name=Count,proto3" json:"Count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FrontierReq) Reset()      { *m = FrontierReq{} }
func (*FrontierReq) ProtoMessage() {}
func (*FrontierReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}
func (m *FrontierReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrontierReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrontierReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FrontierReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrontierReq.Merge(m, src)
}
func (m *FrontierReq) XXX_Size() int {
	return m.Size()
}
func (m *FrontierReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FrontierReq.DiscardUnknown(m)
}

var xxx_messageInfo_FrontierReq proto.InternalMessageInfo

func (m *FrontierReq) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *FrontierReq) GetAge() uint32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *FrontierReq) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type FrontierRsp struct {
	Frontiers            [][]byte `protobuf:"bytes,1,rep,name=Frontiers,proto3" json:"Frontiers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FrontierRsp) Reset()      { *m = FrontierRsp{} }
func (*FrontierRsp) ProtoMessage() {}
func (*FrontierRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{1}
}
func (m *FrontierRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FrontierRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FrontierRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FrontierRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FrontierRsp.Merge(m, src)
}
func (m *FrontierRsp) XXX_Size() int {
	return m.Size()
}
func (m *FrontierRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_FrontierRsp.DiscardUnknown(m)
}

var xxx_messageInfo_FrontierRsp proto.InternalMessageInfo

func (m *FrontierRsp) GetFrontiers() [][]byte {
	if m != nil {
		return m.Frontiers
	}
	return nil
}

type BulkPullReq struct {
	StartHash            []byte   `protobuf:"bytes,1,opt,name=StartHash,proto3" json:"StartHash,omitempty"`
	EndHash              []byte   `protobuf:"bytes,2,opt,name=EndHash,proto3" json:"EndHash,omitempty"`
	PullType             uint32   `protobuf:"varint,3,opt,name=PullType,proto3" json:"PullType,omitempty"`
	Count                uint32   `protobuf:"varint,4,opt,name=Count,proto3" json:"Count,omitempty"`
	Hashes               []byte   `protobuf:"bytes,5,opt,name=Hashes,proto3" json:"Hashes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BulkPullReq) Reset()      { *m = BulkPullReq{} }
func (*BulkPullReq) ProtoMessage() {}
func (*BulkPullReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{2}
}
func (m *BulkPullReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BulkPullReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BulkPullReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BulkPullReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BulkPullReq.Merge(m, src)
}
func (m *BulkPullReq) XXX_Size() int {
	return m.Size()
}
func (m *BulkPullReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BulkPullReq.DiscardUnknown(m)
}

var xxx_messageInfo_BulkPullReq proto.InternalMessageInfo

func (m *BulkPullReq) GetStartHash() []byte {
	if m != nil {
		return m.StartHash
	}
	return nil
}

func (m *BulkPullReq) GetEndHash() []byte {
	if m != nil {
		return m.EndHash
	}
	return nil
}

func (m *BulkPullReq) GetPullType() uint32 {
	if m != nil {
		return m.PullType
	}
	return 0
}

func (m *BulkPullReq) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *BulkPullReq) GetHashes() []byte {
	if m != nil {
		return m.Hashes
	}
	return nil
}

type BulkPullRsp struct {
	PullType             uint32   `protobuf:"varint,1,opt,name=PullType,proto3" json:"PullType,omitempty"`
	Blocks               []byte   `protobuf:"bytes,2,opt,name=blocks,proto3" json:"blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BulkPullRsp) Reset()      { *m = BulkPullRsp{} }
func (*BulkPullRsp) ProtoMessage() {}
func (*BulkPullRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{3}
}
func (m *BulkPullRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BulkPullRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BulkPullRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BulkPullRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BulkPullRsp.Merge(m, src)
}
func (m *BulkPullRsp) XXX_Size() int {
	return m.Size()
}
func (m *BulkPullRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_BulkPullRsp.DiscardUnknown(m)
}

var xxx_messageInfo_BulkPullRsp proto.InternalMessageInfo

func (m *BulkPullRsp) GetPullType() uint32 {
	if m != nil {
		return m.PullType
	}
	return 0
}

func (m *BulkPullRsp) GetBlocks() []byte {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type BulkPushBlock struct {
	Blocks               []byte   `protobuf:"bytes,1,opt,name=blocks,proto3" json:"blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BulkPushBlock) Reset()      { *m = BulkPushBlock{} }
func (*BulkPushBlock) ProtoMessage() {}
func (*BulkPushBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{4}
}
func (m *BulkPushBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BulkPushBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BulkPushBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BulkPushBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BulkPushBlock.Merge(m, src)
}
func (m *BulkPushBlock) XXX_Size() int {
	return m.Size()
}
func (m *BulkPushBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_BulkPushBlock.DiscardUnknown(m)
}

var xxx_messageInfo_BulkPushBlock proto.InternalMessageInfo

func (m *BulkPushBlock) GetBlocks() []byte {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type PublishBlock struct {
	Block                []byte   `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishBlock) Reset()      { *m = PublishBlock{} }
func (*PublishBlock) ProtoMessage() {}
func (*PublishBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{5}
}
func (m *PublishBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishBlock.Merge(m, src)
}
func (m *PublishBlock) XXX_Size() int {
	return m.Size()
}
func (m *PublishBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishBlock.DiscardUnknown(m)
}

var xxx_messageInfo_PublishBlock proto.InternalMessageInfo

func (m *PublishBlock) GetBlock() []byte {
	if m != nil {
		return m.Block
	}
	return nil
}

type ConfirmReq struct {
	Block                [][]byte `protobuf:"bytes,1,rep,name=block,proto3" json:"block,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfirmReq) Reset()      { *m = ConfirmReq{} }
func (*ConfirmReq) ProtoMessage() {}
func (*ConfirmReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{6}
}
func (m *ConfirmReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmReq.Merge(m, src)
}
func (m *ConfirmReq) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmReq.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmReq proto.InternalMessageInfo

func (m *ConfirmReq) GetBlock() [][]byte {
	if m != nil {
		return m.Block
	}
	return nil
}

type ConfirmAck struct {
	Account              []byte   `protobuf:"bytes,1,opt,name=Account,proto3" json:"Account,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
	Sequence             uint32   `protobuf:"varint,3,opt,name=Sequence,proto3" json:"Sequence,omitempty"`
	Hash                 [][]byte `protobuf:"bytes,4,rep,name=Hash,proto3" json:"Hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfirmAck) Reset()      { *m = ConfirmAck{} }
func (*ConfirmAck) ProtoMessage() {}
func (*ConfirmAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{7}
}
func (m *ConfirmAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmAck.Merge(m, src)
}
func (m *ConfirmAck) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmAck) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmAck.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmAck proto.InternalMessageInfo

func (m *ConfirmAck) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *ConfirmAck) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ConfirmAck) GetSequence() uint32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *ConfirmAck) GetHash() [][]byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type PovStatus struct {
	CurrentHeight        uint64   `protobuf:"varint,1,opt,name=CurrentHeight,proto3" json:"CurrentHeight,omitempty"`
	CurrentHash          []byte   `protobuf:"bytes,2,opt,name=CurrentHash,proto3" json:"CurrentHash,omitempty"`
	GenesisHash          []byte   `protobuf:"bytes,3,opt,name=GenesisHash,proto3" json:"GenesisHash,omitempty"`
	CurrentTD            []byte   `protobuf:"bytes,4,opt,name=CurrentTD,proto3" json:"CurrentTD,omitempty"`
	Timestamp            int64    `protobuf:"varint,5,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PovStatus) Reset()      { *m = PovStatus{} }
func (*PovStatus) ProtoMessage() {}
func (*PovStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{8}
}
func (m *PovStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PovStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PovStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PovStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PovStatus.Merge(m, src)
}
func (m *PovStatus) XXX_Size() int {
	return m.Size()
}
func (m *PovStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PovStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PovStatus proto.InternalMessageInfo

func (m *PovStatus) GetCurrentHeight() uint64 {
	if m != nil {
		return m.CurrentHeight
	}
	return 0
}

func (m *PovStatus) GetCurrentHash() []byte {
	if m != nil {
		return m.CurrentHash
	}
	return nil
}

func (m *PovStatus) GetGenesisHash() []byte {
	if m != nil {
		return m.GenesisHash
	}
	return nil
}

func (m *PovStatus) GetCurrentTD() []byte {
	if m != nil {
		return m.CurrentTD
	}
	return nil
}

func (m *PovStatus) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type PovPublishBlock struct {
	Block                []byte   `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PovPublishBlock) Reset()      { *m = PovPublishBlock{} }
func (*PovPublishBlock) ProtoMessage() {}
func (*PovPublishBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{9}
}
func (m *PovPublishBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PovPublishBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PovPublishBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PovPublishBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PovPublishBlock.Merge(m, src)
}
func (m *PovPublishBlock) XXX_Size() int {
	return m.Size()
}
func (m *PovPublishBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_PovPublishBlock.DiscardUnknown(m)
}

var xxx_messageInfo_PovPublishBlock proto.InternalMessageInfo

func (m *PovPublishBlock) GetBlock() []byte {
	if m != nil {
		return m.Block
	}
	return nil
}

type PovPullBlockReq struct {
	StartHash            []byte   `protobuf:"bytes,1,opt,name=StartHash,proto3" json:"StartHash,omitempty"`
	StartHeight          uint64   `protobuf:"varint,2,opt,name=StartHeight,proto3" json:"StartHeight,omitempty"`
	Count                uint32   `protobuf:"varint,3,opt,name=Count,proto3" json:"Count,omitempty"`
	PullType             uint32   `protobuf:"varint,4,opt,name=PullType,proto3" json:"PullType,omitempty"`
	Reason               uint32   `protobuf:"varint,5,opt,name=Reason,proto3" json:"Reason,omitempty"`
	Locators             []byte   `protobuf:"bytes,6,opt,name=Locators,proto3" json:"Locators,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PovPullBlockReq) Reset()      { *m = PovPullBlockReq{} }
func (*PovPullBlockReq) ProtoMessage() {}
func (*PovPullBlockReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{10}
}
func (m *PovPullBlockReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PovPullBlockReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PovPullBlockReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PovPullBlockReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PovPullBlockReq.Merge(m, src)
}
func (m *PovPullBlockReq) XXX_Size() int {
	return m.Size()
}
func (m *PovPullBlockReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PovPullBlockReq.DiscardUnknown(m)
}

var xxx_messageInfo_PovPullBlockReq proto.InternalMessageInfo

func (m *PovPullBlockReq) GetStartHash() []byte {
	if m != nil {
		return m.StartHash
	}
	return nil
}

func (m *PovPullBlockReq) GetStartHeight() uint64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *PovPullBlockReq) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PovPullBlockReq) GetPullType() uint32 {
	if m != nil {
		return m.PullType
	}
	return 0
}

func (m *PovPullBlockReq) GetReason() uint32 {
	if m != nil {
		return m.Reason
	}
	return 0
}

func (m *PovPullBlockReq) GetLocators() []byte {
	if m != nil {
		return m.Locators
	}
	return nil
}

type PovPullBlockRsp struct {
	Count                uint32   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Block                []byte   `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
	Reason               uint32   `protobuf:"varint,3,opt,name=Reason,proto3" json:"Reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PovPullBlockRsp) Reset()      { *m = PovPullBlockRsp{} }
func (*PovPullBlockRsp) ProtoMessage() {}
func (*PovPullBlockRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{11}
}
func (m *PovPullBlockRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PovPullBlockRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PovPullBlockRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PovPullBlockRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PovPullBlockRsp.Merge(m, src)
}
func (m *PovPullBlockRsp) XXX_Size() int {
	return m.Size()
}
func (m *PovPullBlockRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_PovPullBlockRsp.DiscardUnknown(m)
}

var xxx_messageInfo_PovPullBlockRsp proto.InternalMessageInfo

func (m *PovPullBlockRsp) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PovPullBlockRsp) GetBlock() []byte {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *PovPullBlockRsp) GetReason() uint32 {
	if m != nil {
		return m.Reason
	}
	return 0
}

type MessageAck struct {
	MessageHash          []byte   `protobuf:"bytes,1,opt,name=messageHash,proto3" json:"messageHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageAck) Reset()      { *m = MessageAck{} }
func (*MessageAck) ProtoMessage() {}
func (*MessageAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{12}
}
func (m *MessageAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageAck.Merge(m, src)
}
func (m *MessageAck) XXX_Size() int {
	return m.Size()
}
func (m *MessageAck) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageAck.DiscardUnknown(m)
}

var xxx_messageInfo_MessageAck proto.InternalMessageInfo

func (m *MessageAck) GetMessageHash() []byte {
	if m != nil {
		return m.MessageHash
	}
	return nil
}

func init() {
	proto.RegisterType((*FrontierReq)(nil), "pb.FrontierReq")
	proto.RegisterType((*FrontierRsp)(nil), "pb.FrontierRsp")
	proto.RegisterType((*BulkPullReq)(nil), "pb.BulkPullReq")
	proto.RegisterType((*BulkPullRsp)(nil), "pb.BulkPullRsp")
	proto.RegisterType((*BulkPushBlock)(nil), "pb.BulkPushBlock")
	proto.RegisterType((*PublishBlock)(nil), "pb.PublishBlock")
	proto.RegisterType((*ConfirmReq)(nil), "pb.ConfirmReq")
	proto.RegisterType((*ConfirmAck)(nil), "pb.ConfirmAck")
	proto.RegisterType((*PovStatus)(nil), "pb.PovStatus")
	proto.RegisterType((*PovPublishBlock)(nil), "pb.PovPublishBlock")
	proto.RegisterType((*PovPullBlockReq)(nil), "pb.PovPullBlockReq")
	proto.RegisterType((*PovPullBlockRsp)(nil), "pb.PovPullBlockRsp")
	proto.RegisterType((*MessageAck)(nil), "pb.MessageAck")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd) }

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 585 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xbd, 0x8e, 0xd3, 0x4c,
	0x14, 0xfd, 0x26, 0x4e, 0xf2, 0x91, 0x9b, 0x58, 0x20, 0x6b, 0xb5, 0xb2, 0x56, 0x2b, 0x2b, 0x1a,
	0xad, 0xb4, 0x91, 0x80, 0x6c, 0xc1, 0x13, 0x24, 0xe1, 0x67, 0x0b, 0x10, 0x91, 0x13, 0x1e, 0xc0,
	0x76, 0x66, 0x1d, 0x2b, 0x8e, 0xc7, 0xeb, 0x19, 0xaf, 0x44, 0xc7, 0x1b, 0xf0, 0x1a, 0xb4, 0x54,
	0x50, 0x52, 0x52, 0x52, 0x52, 0x6e, 0xfc, 0x04, 0x94, 0x94, 0x68, 0x7e, 0x1c, 0x4f, 0x16, 0x24,
	0xe8, 0x7c, 0xce, 0x9c, 0xb9, 0xf7, 0xdc, 0x1f, 0x0f, 0xd8, 0x5b, 0xc2, 0x58, 0x10, 0x93, 0x71,
	0x5e, 0x50, 0x4e, 0x9d, 0x56, 0x1e, 0x9e, 0x3c, 0x8e, 0x13, 0xbe, 0x2e, 0xc3, 0x71, 0x44, 0xb7,
	0x17, 0x31, 0x8d, 0xe9, 0x85, 0x3c, 0x0a, 0xcb, 0x2b, 0x89, 0x24, 0x90, 0x5f, 0xea, 0x0a, 0x7e,
	0x0d, 0xfd, 0xe7, 0x05, 0xcd, 0x78, 0x42, 0x0a, 0x9f, 0x5c, 0x3b, 0x2e, 0xfc, 0x3f, 0x59, 0xad,
	0x0a, 0xc2, 0x98, 0x8b, 0x86, 0x68, 0x34, 0xf0, 0x6b, 0xe8, 0x3c, 0x00, 0x6b, 0x12, 0x13, 0xb7,
	0x35, 0x44, 0x23, 0xdb, 0x17, 0x9f, 0xce, 0x11, 0x74, 0x66, 0xb4, 0xcc, 0xb8, 0x6b, 0x49, 0x4e,
	0x01, 0xfc, 0xd0, 0x08, 0xc8, 0x72, 0xe7, 0x14, 0x7a, 0x35, 0x14, 0x21, 0xad, 0xd1, 0xc0, 0x6f,
	0x08, 0xfc, 0x1e, 0x41, 0x7f, 0x5a, 0xa6, 0x9b, 0x79, 0x99, 0xa6, 0x22, 0xfd, 0x29, 0xf4, 0x16,
	0x3c, 0x28, 0xf8, 0x65, 0xc0, 0xd6, 0xda, 0x40, 0x43, 0x08, 0x73, 0xcf, 0xb2, 0x95, 0x3c, 0x6b,
	0x29, 0x73, 0x1a, 0x3a, 0x27, 0x70, 0x4f, 0x84, 0x58, 0xbe, 0xcd, 0x89, 0x76, 0xb3, 0xc7, 0x8d,
	0xcd, 0xb6, 0x61, 0xd3, 0x39, 0x86, 0xae, 0xb8, 0x49, 0x98, 0xdb, 0x91, 0xa1, 0x34, 0xc2, 0x13,
	0xc3, 0x10, 0xcb, 0x0f, 0x02, 0xa3, 0x3b, 0x81, 0x8f, 0xa1, 0x1b, 0xa6, 0x34, 0xda, 0x30, 0xed,
	0x46, 0x23, 0x7c, 0x0e, 0xb6, 0x0a, 0xc1, 0xd6, 0x53, 0xc1, 0x18, 0x42, 0x74, 0x20, 0x3c, 0x83,
	0xc1, 0xbc, 0x0c, 0xd3, 0xa4, 0xd6, 0x1d, 0x41, 0x47, 0x9e, 0x68, 0x99, 0x02, 0x18, 0x03, 0xcc,
	0x68, 0x76, 0x95, 0x14, 0x5b, 0xd1, 0x21, 0x43, 0x63, 0x35, 0x1a, 0xbe, 0xd7, 0x4c, 0xa2, 0x8d,
	0x1c, 0x62, 0x14, 0xc9, 0x9a, 0xeb, 0x21, 0x2a, 0x28, 0xfb, 0x9b, 0xc4, 0x59, 0xc0, 0xcb, 0x82,
	0x68, 0xd7, 0x0d, 0x21, 0x8a, 0x5d, 0x90, 0xeb, 0x92, 0x64, 0xd1, 0xbe, 0x8b, 0x35, 0x76, 0x1c,
	0x68, 0xcb, 0xc6, 0xb7, 0x65, 0x5a, 0xf9, 0x8d, 0x3f, 0x22, 0xe8, 0xcd, 0xe9, 0xcd, 0x82, 0x07,
	0xbc, 0x64, 0xce, 0x19, 0xd8, 0xb3, 0xb2, 0x28, 0x48, 0xc6, 0x2f, 0x49, 0x12, 0xaf, 0x55, 0xee,
	0xb6, 0x7f, 0x48, 0x3a, 0x43, 0xe8, 0xd7, 0x44, 0x33, 0x47, 0x93, 0x12, 0x8a, 0x17, 0x24, 0x23,
	0x2c, 0x61, 0x52, 0x61, 0x29, 0x85, 0x41, 0x89, 0x2a, 0xf4, 0x85, 0xe5, 0x53, 0x39, 0xd5, 0x81,
	0xdf, 0x10, 0xe2, 0x74, 0x99, 0x6c, 0x09, 0xe3, 0xc1, 0x36, 0x97, 0xc3, 0xb5, 0xfc, 0x86, 0xc0,
	0xe7, 0x70, 0x7f, 0x4e, 0x6f, 0xfe, 0xa1, 0xed, 0x9f, 0x90, 0x56, 0xa6, 0xa9, 0x94, 0xfd, 0x7d,
	0x3d, 0x87, 0xd0, 0x57, 0x40, 0x95, 0xdf, 0x92, 0xe5, 0x9b, 0xd4, 0x9f, 0xff, 0x98, 0x83, 0x1d,
	0x6b, 0xff, 0xbe, 0x63, 0x3e, 0x09, 0x18, 0xcd, 0x64, 0x25, 0xb6, 0xaf, 0x91, 0xb8, 0xf3, 0x92,
	0x46, 0x01, 0xa7, 0x05, 0x73, 0xbb, 0xd2, 0xc8, 0x1e, 0xe3, 0x37, 0x77, 0x8c, 0xb3, 0x5c, 0x24,
	0x6e, 0xf6, 0xc1, 0xf6, 0x15, 0x68, 0x0a, 0x6f, 0x19, 0x85, 0x1b, 0x29, 0x2d, 0x33, 0x25, 0x1e,
	0x03, 0xbc, 0x52, 0xaf, 0x8d, 0xd8, 0xb1, 0x21, 0xf4, 0xf5, 0xdb, 0x63, 0x34, 0xc3, 0xa4, 0xa6,
	0x8f, 0xbe, 0xef, 0xbc, 0xff, 0x6e, 0x77, 0x1e, 0xfa, 0xb1, 0xf3, 0xd0, 0xcf, 0x9d, 0x87, 0xde,
	0x55, 0x1e, 0xfa, 0x50, 0x79, 0xe8, 0x73, 0xe5, 0xa1, 0x2f, 0x95, 0x87, 0xbe, 0x56, 0x1e, 0xfa,
	0x56, 0x79, 0xe8, 0xb6, 0xf2, 0x50, 0xd8, 0x95, 0xcf, 0xd1, 0x93, 0x5f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x61, 0xae, 0x70, 0xf8, 0xd2, 0x04, 0x00, 0x00,
}

func (this *FrontierReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FrontierReq)
	if !ok {
		that2, ok := that.(FrontierReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FrontierReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FrontierReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FrontierReq but is not nil && this == nil")
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return fmt.Errorf("Address this(%v) Not Equal that(%v)", this.Address, that1.Address)
	}
	if this.Age != that1.Age {
		return fmt.Errorf("Age this(%v) Not Equal that(%v)", this.Age, that1.Age)
	}
	if this.Count != that1.Count {
		return fmt.Errorf("Count this(%v) Not Equal that(%v)", this.Count, that1.Count)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *FrontierReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FrontierReq)
	if !ok {
		that2, ok := that.(FrontierReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if this.Age != that1.Age {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FrontierRsp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*FrontierRsp)
	if !ok {
		that2, ok := that.(FrontierRsp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *FrontierRsp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *FrontierRsp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *FrontierRsp but is not nil && this == nil")
	}
	if len(this.Frontiers) != len(that1.Frontiers) {
		return fmt.Errorf("Frontiers this(%v) Not Equal that(%v)", len(this.Frontiers), len(that1.Frontiers))
	}
	for i := range this.Frontiers {
		if !bytes.Equal(this.Frontiers[i], that1.Frontiers[i]) {
			return fmt.Errorf("Frontiers this[%v](%v) Not Equal that[%v](%v)", i, this.Frontiers[i], i, that1.Frontiers[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *FrontierRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FrontierRsp)
	if !ok {
		that2, ok := that.(FrontierRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Frontiers) != len(that1.Frontiers) {
		return false
	}
	for i := range this.Frontiers {
		if !bytes.Equal(this.Frontiers[i], that1.Frontiers[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BulkPullReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BulkPullReq)
	if !ok {
		that2, ok := that.(BulkPullReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BulkPullReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BulkPullReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BulkPullReq but is not nil && this == nil")
	}
	if !bytes.Equal(this.StartHash, that1.StartHash) {
		return fmt.Errorf("StartHash this(%v) Not Equal that(%v)", this.StartHash, that1.StartHash)
	}
	if !bytes.Equal(this.EndHash, that1.EndHash) {
		return fmt.Errorf("EndHash this(%v) Not Equal that(%v)", this.EndHash, that1.EndHash)
	}
	if this.PullType != that1.PullType {
		return fmt.Errorf("PullType this(%v) Not Equal that(%v)", this.PullType, that1.PullType)
	}
	if this.Count != that1.Count {
		return fmt.Errorf("Count this(%v) Not Equal that(%v)", this.Count, that1.Count)
	}
	if !bytes.Equal(this.Hashes, that1.Hashes) {
		return fmt.Errorf("Hashes this(%v) Not Equal that(%v)", this.Hashes, that1.Hashes)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *BulkPullReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BulkPullReq)
	if !ok {
		that2, ok := that.(BulkPullReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.StartHash, that1.StartHash) {
		return false
	}
	if !bytes.Equal(this.EndHash, that1.EndHash) {
		return false
	}
	if this.PullType != that1.PullType {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if !bytes.Equal(this.Hashes, that1.Hashes) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BulkPullRsp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BulkPullRsp)
	if !ok {
		that2, ok := that.(BulkPullRsp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BulkPullRsp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BulkPullRsp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BulkPullRsp but is not nil && this == nil")
	}
	if this.PullType != that1.PullType {
		return fmt.Errorf("PullType this(%v) Not Equal that(%v)", this.PullType, that1.PullType)
	}
	if !bytes.Equal(this.Blocks, that1.Blocks) {
		return fmt.Errorf("Blocks this(%v) Not Equal that(%v)", this.Blocks, that1.Blocks)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *BulkPullRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BulkPullRsp)
	if !ok {
		that2, ok := that.(BulkPullRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PullType != that1.PullType {
		return false
	}
	if !bytes.Equal(this.Blocks, that1.Blocks) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BulkPushBlock) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BulkPushBlock)
	if !ok {
		that2, ok := that.(BulkPushBlock)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BulkPushBlock")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BulkPushBlock but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BulkPushBlock but is not nil && this == nil")
	}
	if !bytes.Equal(this.Blocks, that1.Blocks) {
		return fmt.Errorf("Blocks this(%v) Not Equal that(%v)", this.Blocks, that1.Blocks)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *BulkPushBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BulkPushBlock)
	if !ok {
		that2, ok := that.(BulkPushBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Blocks, that1.Blocks) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PublishBlock) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PublishBlock)
	if !ok {
		that2, ok := that.(PublishBlock)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PublishBlock")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PublishBlock but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PublishBlock but is not nil && this == nil")
	}
	if !bytes.Equal(this.Block, that1.Block) {
		return fmt.Errorf("Block this(%v) Not Equal that(%v)", this.Block, that1.Block)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *PublishBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PublishBlock)
	if !ok {
		that2, ok := that.(PublishBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Block, that1.Block) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConfirmReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ConfirmReq)
	if !ok {
		that2, ok := that.(ConfirmReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ConfirmReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ConfirmReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ConfirmReq but is not nil && this == nil")
	}
	if len(this.Block) != len(that1.Block) {
		return fmt.Errorf("Block this(%v) Not Equal that(%v)", len(this.Block), len(that1.Block))
	}
	for i := range this.Block {
		if !bytes.Equal(this.Block[i], that1.Block[i]) {
			return fmt.Errorf("Block this[%v](%v) Not Equal that[%v](%v)", i, this.Block[i], i, that1.Block[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ConfirmReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConfirmReq)
	if !ok {
		that2, ok := that.(ConfirmReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Block) != len(that1.Block) {
		return false
	}
	for i := range this.Block {
		if !bytes.Equal(this.Block[i], that1.Block[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ConfirmAck) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ConfirmAck)
	if !ok {
		that2, ok := that.(ConfirmAck)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ConfirmAck")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ConfirmAck but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ConfirmAck but is not nil && this == nil")
	}
	if !bytes.Equal(this.Account, that1.Account) {
		return fmt.Errorf("Account this(%v) Not Equal that(%v)", this.Account, that1.Account)
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return fmt.Errorf("Signature this(%v) Not Equal that(%v)", this.Signature, that1.Signature)
	}
	if this.Sequence != that1.Sequence {
		return fmt.Errorf("Sequence this(%v) Not Equal that(%v)", this.Sequence, that1.Sequence)
	}
	if len(this.Hash) != len(that1.Hash) {
		return fmt.Errorf("Hash this(%v) Not Equal that(%v)", len(this.Hash), len(that1.Hash))
	}
	for i := range this.Hash {
		if !bytes.Equal(this.Hash[i], that1.Hash[i]) {
			return fmt.Errorf("Hash this[%v](%v) Not Equal that[%v](%v)", i, this.Hash[i], i, that1.Hash[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ConfirmAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConfirmAck)
	if !ok {
		that2, ok := that.(ConfirmAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Account, that1.Account) {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	if this.Sequence != that1.Sequence {
		return false
	}
	if len(this.Hash) != len(that1.Hash) {
		return false
	}
	for i := range this.Hash {
		if !bytes.Equal(this.Hash[i], that1.Hash[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PovStatus) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PovStatus)
	if !ok {
		that2, ok := that.(PovStatus)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PovStatus")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PovStatus but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PovStatus but is not nil && this == nil")
	}
	if this.CurrentHeight != that1.CurrentHeight {
		return fmt.Errorf("CurrentHeight this(%v) Not Equal that(%v)", this.CurrentHeight, that1.CurrentHeight)
	}
	if !bytes.Equal(this.CurrentHash, that1.CurrentHash) {
		return fmt.Errorf("CurrentHash this(%v) Not Equal that(%v)", this.CurrentHash, that1.CurrentHash)
	}
	if !bytes.Equal(this.GenesisHash, that1.GenesisHash) {
		return fmt.Errorf("GenesisHash this(%v) Not Equal that(%v)", this.GenesisHash, that1.GenesisHash)
	}
	if !bytes.Equal(this.CurrentTD, that1.CurrentTD) {
		return fmt.Errorf("CurrentTD this(%v) Not Equal that(%v)", this.CurrentTD, that1.CurrentTD)
	}
	if this.Timestamp != that1.Timestamp {
		return fmt.Errorf("Timestamp this(%v) Not Equal that(%v)", this.Timestamp, that1.Timestamp)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *PovStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PovStatus)
	if !ok {
		that2, ok := that.(PovStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CurrentHeight != that1.CurrentHeight {
		return false
	}
	if !bytes.Equal(this.CurrentHash, that1.CurrentHash) {
		return false
	}
	if !bytes.Equal(this.GenesisHash, that1.GenesisHash) {
		return false
	}
	if !bytes.Equal(this.CurrentTD, that1.CurrentTD) {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PovPublishBlock) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PovPublishBlock)
	if !ok {
		that2, ok := that.(PovPublishBlock)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PovPublishBlock")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PovPublishBlock but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PovPublishBlock but is not nil && this == nil")
	}
	if !bytes.Equal(this.Block, that1.Block) {
		return fmt.Errorf("Block this(%v) Not Equal that(%v)", this.Block, that1.Block)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *PovPublishBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PovPublishBlock)
	if !ok {
		that2, ok := that.(PovPublishBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Block, that1.Block) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PovPullBlockReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PovPullBlockReq)
	if !ok {
		that2, ok := that.(PovPullBlockReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PovPullBlockReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PovPullBlockReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PovPullBlockReq but is not nil && this == nil")
	}
	if !bytes.Equal(this.StartHash, that1.StartHash) {
		return fmt.Errorf("StartHash this(%v) Not Equal that(%v)", this.StartHash, that1.StartHash)
	}
	if this.StartHeight != that1.StartHeight {
		return fmt.Errorf("StartHeight this(%v) Not Equal that(%v)", this.StartHeight, that1.StartHeight)
	}
	if this.Count != that1.Count {
		return fmt.Errorf("Count this(%v) Not Equal that(%v)", this.Count, that1.Count)
	}
	if this.PullType != that1.PullType {
		return fmt.Errorf("PullType this(%v) Not Equal that(%v)", this.PullType, that1.PullType)
	}
	if this.Reason != that1.Reason {
		return fmt.Errorf("Reason this(%v) Not Equal that(%v)", this.Reason, that1.Reason)
	}
	if !bytes.Equal(this.Locators, that1.Locators) {
		return fmt.Errorf("Locators this(%v) Not Equal that(%v)", this.Locators, that1.Locators)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *PovPullBlockReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PovPullBlockReq)
	if !ok {
		that2, ok := that.(PovPullBlockReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.StartHash, that1.StartHash) {
		return false
	}
	if this.StartHeight != that1.StartHeight {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if this.PullType != that1.PullType {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if !bytes.Equal(this.Locators, that1.Locators) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PovPullBlockRsp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PovPullBlockRsp)
	if !ok {
		that2, ok := that.(PovPullBlockRsp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PovPullBlockRsp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PovPullBlockRsp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PovPullBlockRsp but is not nil && this == nil")
	}
	if this.Count != that1.Count {
		return fmt.Errorf("Count this(%v) Not Equal that(%v)", this.Count, that1.Count)
	}
	if !bytes.Equal(this.Block, that1.Block) {
		return fmt.Errorf("Block this(%v) Not Equal that(%v)", this.Block, that1.Block)
	}
	if this.Reason != that1.Reason {
		return fmt.Errorf("Reason this(%v) Not Equal that(%v)", this.Reason, that1.Reason)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *PovPullBlockRsp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PovPullBlockRsp)
	if !ok {
		that2, ok := that.(PovPullBlockRsp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	if !bytes.Equal(this.Block, that1.Block) {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *MessageAck) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*MessageAck)
	if !ok {
		that2, ok := that.(MessageAck)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *MessageAck")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *MessageAck but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *MessageAck but is not nil && this == nil")
	}
	if !bytes.Equal(this.MessageHash, that1.MessageHash) {
		return fmt.Errorf("MessageHash this(%v) Not Equal that(%v)", this.MessageHash, that1.MessageHash)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *MessageAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageAck)
	if !ok {
		that2, ok := that.(MessageAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.MessageHash, that1.MessageHash) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FrontierReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.FrontierReq{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Age: "+fmt.Sprintf("%#v", this.Age)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FrontierRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.FrontierRsp{")
	s = append(s, "Frontiers: "+fmt.Sprintf("%#v", this.Frontiers)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BulkPullReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.BulkPullReq{")
	s = append(s, "StartHash: "+fmt.Sprintf("%#v", this.StartHash)+",\n")
	s = append(s, "EndHash: "+fmt.Sprintf("%#v", this.EndHash)+",\n")
	s = append(s, "PullType: "+fmt.Sprintf("%#v", this.PullType)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "Hashes: "+fmt.Sprintf("%#v", this.Hashes)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BulkPullRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.BulkPullRsp{")
	s = append(s, "PullType: "+fmt.Sprintf("%#v", this.PullType)+",\n")
	s = append(s, "Blocks: "+fmt.Sprintf("%#v", this.Blocks)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BulkPushBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.BulkPushBlock{")
	s = append(s, "Blocks: "+fmt.Sprintf("%#v", this.Blocks)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PublishBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.PublishBlock{")
	s = append(s, "Block: "+fmt.Sprintf("%#v", this.Block)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConfirmReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ConfirmReq{")
	s = append(s, "Block: "+fmt.Sprintf("%#v", this.Block)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConfirmAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.ConfirmAck{")
	s = append(s, "Account: "+fmt.Sprintf("%#v", this.Account)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "Sequence: "+fmt.Sprintf("%#v", this.Sequence)+",\n")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PovStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.PovStatus{")
	s = append(s, "CurrentHeight: "+fmt.Sprintf("%#v", this.CurrentHeight)+",\n")
	s = append(s, "CurrentHash: "+fmt.Sprintf("%#v", this.CurrentHash)+",\n")
	s = append(s, "GenesisHash: "+fmt.Sprintf("%#v", this.GenesisHash)+",\n")
	s = append(s, "CurrentTD: "+fmt.Sprintf("%#v", this.CurrentTD)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PovPublishBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.PovPublishBlock{")
	s = append(s, "Block: "+fmt.Sprintf("%#v", this.Block)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PovPullBlockReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.PovPullBlockReq{")
	s = append(s, "StartHash: "+fmt.Sprintf("%#v", this.StartHash)+",\n")
	s = append(s, "StartHeight: "+fmt.Sprintf("%#v", this.StartHeight)+",\n")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "PullType: "+fmt.Sprintf("%#v", this.PullType)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "Locators: "+fmt.Sprintf("%#v", this.Locators)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PovPullBlockRsp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.PovPullBlockRsp{")
	s = append(s, "Count: "+fmt.Sprintf("%#v", this.Count)+",\n")
	s = append(s, "Block: "+fmt.Sprintf("%#v", this.Block)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MessageAck) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.MessageAck{")
	s = append(s, "MessageHash: "+fmt.Sprintf("%#v", this.MessageHash)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FrontierReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrontierReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FrontierReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if m.Age != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Age))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FrontierRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FrontierRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FrontierRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Frontiers) > 0 {
		for iNdEx := len(m.Frontiers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Frontiers[iNdEx])
			copy(dAtA[i:], m.Frontiers[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.Frontiers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BulkPullReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BulkPullReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BulkPullReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Hashes) > 0 {
		i -= len(m.Hashes)
		copy(dAtA[i:], m.Hashes)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Hashes)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Count != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x20
	}
	if m.PullType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.PullType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.EndHash) > 0 {
		i -= len(m.EndHash)
		copy(dAtA[i:], m.EndHash)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.EndHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StartHash) > 0 {
		i -= len(m.StartHash)
		copy(dAtA[i:], m.StartHash)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.StartHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BulkPullRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BulkPullRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BulkPullRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Blocks) > 0 {
		i -= len(m.Blocks)
		copy(dAtA[i:], m.Blocks)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Blocks)))
		i--
		dAtA[i] = 0x12
	}
	if m.PullType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.PullType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BulkPushBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BulkPushBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BulkPushBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Blocks) > 0 {
		i -= len(m.Blocks)
		copy(dAtA[i:], m.Blocks)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Blocks)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PublishBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Block) > 0 {
		i -= len(m.Block)
		copy(dAtA[i:], m.Block)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Block)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfirmReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Block) > 0 {
		for iNdEx := len(m.Block) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Block[iNdEx])
			copy(dAtA[i:], m.Block[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.Block[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConfirmAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Hash) > 0 {
		for iNdEx := len(m.Hash) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Hash[iNdEx])
			copy(dAtA[i:], m.Hash[iNdEx])
			i = encodeVarintMessage(dAtA, i, uint64(len(m.Hash[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Sequence != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PovStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PovStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PovStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Timestamp != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x28
	}
	if len(m.CurrentTD) > 0 {
		i -= len(m.CurrentTD)
		copy(dAtA[i:], m.CurrentTD)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CurrentTD)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GenesisHash) > 0 {
		i -= len(m.GenesisHash)
		copy(dAtA[i:], m.GenesisHash)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.GenesisHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CurrentHash) > 0 {
		i -= len(m.CurrentHash)
		copy(dAtA[i:], m.CurrentHash)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.CurrentHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.CurrentHeight != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.CurrentHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PovPublishBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PovPublishBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PovPublishBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Block) > 0 {
		i -= len(m.Block)
		copy(dAtA[i:], m.Block)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Block)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PovPullBlockReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PovPullBlockReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PovPullBlockReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Locators) > 0 {
		i -= len(m.Locators)
		copy(dAtA[i:], m.Locators)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Locators)))
		i--
		dAtA[i] = 0x32
	}
	if m.Reason != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Reason))
		i--
		dAtA[i] = 0x28
	}
	if m.PullType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.PullType))
		i--
		dAtA[i] = 0x20
	}
	if m.Count != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if m.StartHeight != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.StartHash) > 0 {
		i -= len(m.StartHash)
		copy(dAtA[i:], m.StartHash)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.StartHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PovPullBlockRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PovPullBlockRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PovPullBlockRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Reason != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Reason))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Block) > 0 {
		i -= len(m.Block)
		copy(dAtA[i:], m.Block)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Block)))
		i--
		dAtA[i] = 0x12
	}
	if m.Count != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MessageAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MessageHash) > 0 {
		i -= len(m.MessageHash)
		copy(dAtA[i:], m.MessageHash)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.MessageHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedFrontierReq(r randyMessage, easy bool) *FrontierReq {
	this := &FrontierReq{}
	v1 := r.Intn(100)
	this.Address = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Address[i] = byte(r.Intn(256))
	}
	this.Age = uint32(r.Uint32())
	this.Count = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 4)
	}
	return this
}

func NewPopulatedFrontierRsp(r randyMessage, easy bool) *FrontierRsp {
	this := &FrontierRsp{}
	v2 := r.Intn(10)
	this.Frontiers = make([][]byte, v2)
	for i := 0; i < v2; i++ {
		v3 := r.Intn(100)
		this.Frontiers[i] = make([]byte, v3)
		for j := 0; j < v3; j++ {
			this.Frontiers[i][j] = byte(r.Intn(256))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 2)
	}
	return this
}

func NewPopulatedBulkPullReq(r randyMessage, easy bool) *BulkPullReq {
	this := &BulkPullReq{}
	v4 := r.Intn(100)
	this.StartHash = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.StartHash[i] = byte(r.Intn(256))
	}
	v5 := r.Intn(100)
	this.EndHash = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.EndHash[i] = byte(r.Intn(256))
	}
	this.PullType = uint32(r.Uint32())
	this.Count = uint32(r.Uint32())
	v6 := r.Intn(100)
	this.Hashes = make([]byte, v6)
	for i := 0; i < v6; i++ {
		this.Hashes[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 6)
	}
	return this
}

func NewPopulatedBulkPullRsp(r randyMessage, easy bool) *BulkPullRsp {
	this := &BulkPullRsp{}
	this.PullType = uint32(r.Uint32())
	v7 := r.Intn(100)
	this.Blocks = make([]byte, v7)
	for i := 0; i < v7; i++ {
		this.Blocks[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 3)
	}
	return this
}

func NewPopulatedBulkPushBlock(r randyMessage, easy bool) *BulkPushBlock {
	this := &BulkPushBlock{}
	v8 := r.Intn(100)
	this.Blocks = make([]byte, v8)
	for i := 0; i < v8; i++ {
		this.Blocks[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 2)
	}
	return this
}

func NewPopulatedPublishBlock(r randyMessage, easy bool) *PublishBlock {
	this := &PublishBlock{}
	v9 := r.Intn(100)
	this.Block = make([]byte, v9)
	for i := 0; i < v9; i++ {
		this.Block[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 2)
	}
	return this
}

func NewPopulatedConfirmReq(r randyMessage, easy bool) *ConfirmReq {
	this := &ConfirmReq{}
	v10 := r.Intn(10)
	this.Block = make([][]byte, v10)
	for i := 0; i < v10; i++ {
		v11 := r.Intn(100)
		this.Block[i] = make([]byte, v11)
		for j := 0; j < v11; j++ {
			this.Block[i][j] = byte(r.Intn(256))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 2)
	}
	return this
}

func NewPopulatedConfirmAck(r randyMessage, easy bool) *ConfirmAck {
	this := &ConfirmAck{}
	v12 := r.Intn(100)
	this.Account = make([]byte, v12)
	for i := 0; i < v12; i++ {
		this.Account[i] = byte(r.Intn(256))
	}
	v13 := r.Intn(100)
	this.Signature = make([]byte, v13)
	for i := 0; i < v13; i++ {
		this.Signature[i] = byte(r.Intn(256))
	}
	this.Sequence = uint32(r.Uint32())
	v14 := r.Intn(10)
	this.Hash = make([][]byte, v14)
	for i := 0; i < v14; i++ {
		v15 := r.Intn(100)
		this.Hash[i] = make([]byte, v15)
		for j := 0; j < v15; j++ {
			this.Hash[i][j] = byte(r.Intn(256))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 5)
	}
	return this
}

func NewPopulatedPovStatus(r randyMessage, easy bool) *PovStatus {
	this := &PovStatus{}
	this.CurrentHeight = uint64(uint64(r.Uint32()))
	v16 := r.Intn(100)
	this.CurrentHash = make([]byte, v16)
	for i := 0; i < v16; i++ {
		this.CurrentHash[i] = byte(r.Intn(256))
	}
	v17 := r.Intn(100)
	this.GenesisHash = make([]byte, v17)
	for i := 0; i < v17; i++ {
		this.GenesisHash[i] = byte(r.Intn(256))
	}
	v18 := r.Intn(100)
	this.CurrentTD = make([]byte, v18)
	for i := 0; i < v18; i++ {
		this.CurrentTD[i] = byte(r.Intn(256))
	}
	this.Timestamp = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Timestamp *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 6)
	}
	return this
}

func NewPopulatedPovPublishBlock(r randyMessage, easy bool) *PovPublishBlock {
	this := &PovPublishBlock{}
	v19 := r.Intn(100)
	this.Block = make([]byte, v19)
	for i := 0; i < v19; i++ {
		this.Block[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 2)
	}
	return this
}

func NewPopulatedPovPullBlockReq(r randyMessage, easy bool) *PovPullBlockReq {
	this := &PovPullBlockReq{}
	v20 := r.Intn(100)
	this.StartHash = make([]byte, v20)
	for i := 0; i < v20; i++ {
		this.StartHash[i] = byte(r.Intn(256))
	}
	this.StartHeight = uint64(uint64(r.Uint32()))
	this.Count = uint32(r.Uint32())
	this.PullType = uint32(r.Uint32())
	this.Reason = uint32(r.Uint32())
	v21 := r.Intn(100)
	this.Locators = make([]byte, v21)
	for i := 0; i < v21; i++ {
		this.Locators[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 7)
	}
	return this
}

func NewPopulatedPovPullBlockRsp(r randyMessage, easy bool) *PovPullBlockRsp {
	this := &PovPullBlockRsp{}
	this.Count = uint32(r.Uint32())
	v22 := r.Intn(100)
	this.Block = make([]byte, v22)
	for i := 0; i < v22; i++ {
		this.Block[i] = byte(r.Intn(256))
	}
	this.Reason = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 4)
	}
	return this
}

func NewPopulatedMessageAck(r randyMessage, easy bool) *MessageAck {
	this := &MessageAck{}
	v23 := r.Intn(100)
	this.MessageHash = make([]byte, v23)
	for i := 0; i < v23; i++ {
		this.MessageHash[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMessage(r, 2)
	}
	return this
}

type randyMessage interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMessage(r randyMessage) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMessage(r randyMessage) string {
	v24 := r.Intn(100)
	tmps := make([]rune, v24)
	for i := 0; i < v24; i++ {
		tmps[i] = randUTF8RuneMessage(r)
	}
	return string(tmps)
}
func randUnrecognizedMessage(r randyMessage, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMessage(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMessage(dAtA []byte, r randyMessage, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMessage(dAtA, uint64(key))
		v25 := r.Int63()
		if r.Intn(2) == 0 {
			v25 *= -1
		}
		dAtA = encodeVarintPopulateMessage(dAtA, uint64(v25))
	case 1:
		dAtA = encodeVarintPopulateMessage(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMessage(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMessage(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMessage(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMessage(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *FrontierReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Age != 0 {
		n += 1 + sovMessage(uint64(m.Age))
	}
	if m.Count != 0 {
		n += 1 + sovMessage(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FrontierRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Frontiers) > 0 {
		for _, b := range m.Frontiers {
			l = len(b)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BulkPullReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StartHash)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.EndHash)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.PullType != 0 {
		n += 1 + sovMessage(uint64(m.PullType))
	}
	if m.Count != 0 {
		n += 1 + sovMessage(uint64(m.Count))
	}
	l = len(m.Hashes)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BulkPullRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PullType != 0 {
		n += 1 + sovMessage(uint64(m.PullType))
	}
	l = len(m.Blocks)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BulkPushBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Blocks)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublishBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Block)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfirmReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Block) > 0 {
		for _, b := range m.Block {
			l = len(b)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfirmAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovMessage(uint64(m.Sequence))
	}
	if len(m.Hash) > 0 {
		for _, b := range m.Hash {
			l = len(b)
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PovStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentHeight != 0 {
		n += 1 + sovMessage(uint64(m.CurrentHeight))
	}
	l = len(m.CurrentHash)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.GenesisHash)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.CurrentTD)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovMessage(uint64(m.Timestamp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PovPublishBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Block)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PovPullBlockReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StartHash)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.StartHeight != 0 {
		n += 1 + sovMessage(uint64(m.StartHeight))
	}
	if m.Count != 0 {
		n += 1 + sovMessage(uint64(m.Count))
	}
	if m.PullType != 0 {
		n += 1 + sovMessage(uint64(m.PullType))
	}
	if m.Reason != 0 {
		n += 1 + sovMessage(uint64(m.Reason))
	}
	l = len(m.Locators)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PovPullBlockRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovMessage(uint64(m.Count))
	}
	l = len(m.Block)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Reason != 0 {
		n += 1 + sovMessage(uint64(m.Reason))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MessageHash)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FrontierReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FrontierReq{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Age:` + fmt.Sprintf("%v", this.Age) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FrontierRsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FrontierRsp{`,
		`Frontiers:` + fmt.Sprintf("%v", this.Frontiers) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BulkPullReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BulkPullReq{`,
		`StartHash:` + fmt.Sprintf("%v", this.StartHash) + `,`,
		`EndHash:` + fmt.Sprintf("%v", this.EndHash) + `,`,
		`PullType:` + fmt.Sprintf("%v", this.PullType) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Hashes:` + fmt.Sprintf("%v", this.Hashes) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BulkPullRsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BulkPullRsp{`,
		`PullType:` + fmt.Sprintf("%v", this.PullType) + `,`,
		`Blocks:` + fmt.Sprintf("%v", this.Blocks) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BulkPushBlock) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BulkPushBlock{`,
		`Blocks:` + fmt.Sprintf("%v", this.Blocks) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PublishBlock) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PublishBlock{`,
		`Block:` + fmt.Sprintf("%v", this.Block) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfirmReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfirmReq{`,
		`Block:` + fmt.Sprintf("%v", this.Block) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConfirmAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConfirmAck{`,
		`Account:` + fmt.Sprintf("%v", this.Account) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`Sequence:` + fmt.Sprintf("%v", this.Sequence) + `,`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PovStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PovStatus{`,
		`CurrentHeight:` + fmt.Sprintf("%v", this.CurrentHeight) + `,`,
		`CurrentHash:` + fmt.Sprintf("%v", this.CurrentHash) + `,`,
		`GenesisHash:` + fmt.Sprintf("%v", this.GenesisHash) + `,`,
		`CurrentTD:` + fmt.Sprintf("%v", this.CurrentTD) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PovPublishBlock) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PovPublishBlock{`,
		`Block:` + fmt.Sprintf("%v", this.Block) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PovPullBlockReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PovPullBlockReq{`,
		`StartHash:` + fmt.Sprintf("%v", this.StartHash) + `,`,
		`StartHeight:` + fmt.Sprintf("%v", this.StartHeight) + `,`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`PullType:` + fmt.Sprintf("%v", this.PullType) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Locators:` + fmt.Sprintf("%v", this.Locators) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PovPullBlockRsp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PovPullBlockRsp{`,
		`Count:` + fmt.Sprintf("%v", this.Count) + `,`,
		`Block:` + fmt.Sprintf("%v", this.Block) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageAck) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageAck{`,
		`MessageHash:` + fmt.Sprintf("%v", this.MessageHash) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FrontierReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrontierReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrontierReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FrontierRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FrontierRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FrontierRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frontiers", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Frontiers = append(m.Frontiers, make([]byte, postIndex-iNdEx))
			copy(m.Frontiers[len(m.Frontiers)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BulkPullReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BulkPullReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BulkPullReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartHash = append(m.StartHash[:0], dAtA[iNdEx:postIndex]...)
			if m.StartHash == nil {
				m.StartHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndHash = append(m.EndHash[:0], dAtA[iNdEx:postIndex]...)
			if m.EndHash == nil {
				m.EndHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullType", wireType)
			}
			m.PullType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PullType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hashes = append(m.Hashes[:0], dAtA[iNdEx:postIndex]...)
			if m.Hashes == nil {
				m.Hashes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BulkPullRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BulkPullRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BulkPullRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullType", wireType)
			}
			m.PullType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PullType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks[:0], dAtA[iNdEx:postIndex]...)
			if m.Blocks == nil {
				m.Blocks = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BulkPushBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BulkPushBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BulkPushBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks[:0], dAtA[iNdEx:postIndex]...)
			if m.Blocks == nil {
				m.Blocks = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Block = append(m.Block[:0], dAtA[iNdEx:postIndex]...)
			if m.Block == nil {
				m.Block = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Block = append(m.Block, make([]byte, postIndex-iNdEx))
			copy(m.Block[len(m.Block)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash, make([]byte, postIndex-iNdEx))
			copy(m.Hash[len(m.Hash)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PovStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PovStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PovStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentHeight", wireType)
			}
			m.CurrentHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentHash = append(m.CurrentHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CurrentHash == nil {
				m.CurrentHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisHash = append(m.GenesisHash[:0], dAtA[iNdEx:postIndex]...)
			if m.GenesisHash == nil {
				m.GenesisHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTD", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentTD = append(m.CurrentTD[:0], dAtA[iNdEx:postIndex]...)
			if m.CurrentTD == nil {
				m.CurrentTD = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PovPublishBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PovPublishBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PovPublishBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Block = append(m.Block[:0], dAtA[iNdEx:postIndex]...)
			if m.Block == nil {
				m.Block = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PovPullBlockReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PovPullBlockReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PovPullBlockReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartHash = append(m.StartHash[:0], dAtA[iNdEx:postIndex]...)
			if m.StartHash == nil {
				m.StartHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullType", wireType)
			}
			m.PullType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PullType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locators", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locators = append(m.Locators[:0], dAtA[iNdEx:postIndex]...)
			if m.Locators == nil {
				m.Locators = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PovPullBlockRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PovPullBlockRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PovPullBlockRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Block = append(m.Block[:0], dAtA[iNdEx:postIndex]...)
			if m.Block == nil {
				m.Block = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageHash = append(m.MessageHash[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageHash == nil {
				m.MessageHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
