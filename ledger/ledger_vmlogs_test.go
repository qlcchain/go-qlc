// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package ledger

import (
	"testing"

	"github.com/qlcchain/go-qlc/common/types"
	"github.com/qlcchain/go-qlc/mock"
)

func generateVmlog() *types.VmLog {
	return &types.VmLog{
		Topics: []types.Hash{mock.Hash(), mock.Hash()},
	}
}

func addVmLogs(t *testing.T, l *Ledger) *types.VmLogs {
	vmlogs := &types.VmLogs{
		Logs: []*types.VmLog{generateVmlog(), generateVmlog()},
	}
	if err := l.AddOrUpdateVmLogs(vmlogs, l.cache.GetCache()); err != nil {
		t.Fatal(err)
	}
	return vmlogs
}

func TestLedger_AddVmLogs(t *testing.T) {
	teardownTestCase, l := setupTestCase(t)
	defer teardownTestCase(t)
	addVmLogs(t, l)
}

func TestLedger_GetVmLogs(t *testing.T) {
	teardownTestCase, l := setupTestCase(t)
	defer teardownTestCase(t)

	v := addVmLogs(t, l)
	value, err := l.GetVmLogs(*v.Hash())
	if err != nil {
		t.Fatal(err)
	}
	if *v.Hash() != *value.Hash() {
		t.Fatal(v, value)
	}
	t.Log(value)
	if err := l.Flush(); err != nil {
		t.Fatal(err)
	}
	_, err = l.GetVmLogs(*v.Hash())
	if err != nil {
		t.Fatal(err)
	}
}

func TestLedger_DeleteVmLogs(t *testing.T) {
	teardownTestCase, l := setupTestCase(t)
	defer teardownTestCase(t)

	v := addVmLogs(t, l)
	err := l.DeleteVmLogs(*v.Hash(), l.cache.GetCache())
	if err != nil {
		t.Fatal(err)
	}
	_, err = l.GetVmLogs(*v.Hash())
	if err == nil {
		t.Fatal(err)
	}
}

func TestLedger_SearchVmLogs(t *testing.T) {
	teardownTestCase, l := setupTestCase(t)
	defer teardownTestCase(t)

	addVmLogs(t, l)
	addVmLogs(t, l)
	if err := l.Flush(); err != nil {
		t.Fatal(err)
	}
	err := l.SearchVmLogs(func(key types.Hash, value *types.VmLogs) error {
		t.Log(key)
		t.Log(value)
		return nil
	})
	if err != nil {
		t.Fatal(err)
	}
}

func TestLedger_CountVmLogs(t *testing.T) {
	teardownTestCase, l := setupTestCase(t)
	defer teardownTestCase(t)

	addVmLogs(t, l)
	addVmLogs(t, l)
	if err := l.Flush(); err != nil {
		t.Fatal(err)
	}
	num, err := l.CountVmLogs()
	if err != nil {
		t.Fatal(err)
	}
	if num != 2 {
		t.Fatal("error count", num)
	}
	t.Log("account,", num)
}

func TestLedger_HasVmLogs(t *testing.T) {
	teardownTestCase, l := setupTestCase(t)
	defer teardownTestCase(t)

	k := addVmLogs(t, l)
	b, err := l.HasVmLogs(*k.Hash())
	if err != nil || !b {
		t.Fatal(err)
	}
	_, err = l.HasVmLogs(mock.Hash())
	if err == nil {
		t.Fatal(err)
	}
}
