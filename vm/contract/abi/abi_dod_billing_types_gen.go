package abi

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *DoDAccount) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ai":
			z.AccountInfo, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "AccountInfo")
				return
			}
		case "at":
			z.AccountType, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "AccountType")
				return
			}
		case "uu":
			z.UUID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "UUID")
				return
			}
		case "cs":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Connections")
				return
			}
			if cap(z.Connections) >= int(zb0002) {
				z.Connections = (z.Connections)[:zb0002]
			} else {
				z.Connections = make([]string, zb0002)
			}
			for za0001 := range z.Connections {
				z.Connections[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Connections", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *DoDAccount) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "ai"
	err = en.Append(0x84, 0xa2, 0x61, 0x69)
	if err != nil {
		return
	}
	err = en.WriteString(z.AccountInfo)
	if err != nil {
		err = msgp.WrapError(err, "AccountInfo")
		return
	}
	// write "at"
	err = en.Append(0xa2, 0x61, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.AccountType)
	if err != nil {
		err = msgp.WrapError(err, "AccountType")
		return
	}
	// write "uu"
	err = en.Append(0xa2, 0x75, 0x75)
	if err != nil {
		return
	}
	err = en.WriteString(z.UUID)
	if err != nil {
		err = msgp.WrapError(err, "UUID")
		return
	}
	// write "cs"
	err = en.Append(0xa2, 0x63, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Connections)))
	if err != nil {
		err = msgp.WrapError(err, "Connections")
		return
	}
	for za0001 := range z.Connections {
		err = en.WriteString(z.Connections[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Connections", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *DoDAccount) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "ai"
	o = append(o, 0x84, 0xa2, 0x61, 0x69)
	o = msgp.AppendString(o, z.AccountInfo)
	// string "at"
	o = append(o, 0xa2, 0x61, 0x74)
	o = msgp.AppendString(o, z.AccountType)
	// string "uu"
	o = append(o, 0xa2, 0x75, 0x75)
	o = msgp.AppendString(o, z.UUID)
	// string "cs"
	o = append(o, 0xa2, 0x63, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Connections)))
	for za0001 := range z.Connections {
		o = msgp.AppendString(o, z.Connections[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DoDAccount) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ai":
			z.AccountInfo, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AccountInfo")
				return
			}
		case "at":
			z.AccountType, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AccountType")
				return
			}
		case "uu":
			z.UUID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UUID")
				return
			}
		case "cs":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Connections")
				return
			}
			if cap(z.Connections) >= int(zb0002) {
				z.Connections = (z.Connections)[:zb0002]
			} else {
				z.Connections = make([]string, zb0002)
			}
			for za0001 := range z.Connections {
				z.Connections[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Connections", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *DoDAccount) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.AccountInfo) + 3 + msgp.StringPrefixSize + len(z.AccountType) + 3 + msgp.StringPrefixSize + len(z.UUID) + 3 + msgp.ArrayHeaderSize
	for za0001 := range z.Connections {
		s += msgp.StringPrefixSize + len(z.Connections[za0001])
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DoDConnection) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "st":
			z.ServiceType, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ServiceType")
				return
			}
		case "ct":
			z.ChargeType, err = dc.ReadUint8()
			if err != nil {
				err = msgp.WrapError(err, "ChargeType")
				return
			}
		case "pr":
			z.PaidRule, err = dc.ReadUint8()
			if err != nil {
				err = msgp.WrapError(err, "PaidRule")
				return
			}
		case "bm":
			z.BuyMode, err = dc.ReadUint8()
			if err != nil {
				err = msgp.WrapError(err, "BuyMode")
				return
			}
		case "lo":
			z.Location, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Location")
				return
			}
		case "sti":
			z.StartTime, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "StartTime")
				return
			}
		case "et":
			z.EndTime, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "EndTime")
				return
			}
		case "p":
			z.Price, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Price")
				return
			}
		case "u":
			z.Unit, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Unit")
				return
			}
		case "c":
			z.Currency, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Currency")
				return
			}
		case "b":
			z.Balance, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Balance")
				return
			}
		case "tst":
			z.TempStartTime, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "TempStartTime")
				return
			}
		case "tet":
			z.TempEndTime, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "TempEndTime")
				return
			}
		case "tp":
			z.TempPrice, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "TempPrice")
				return
			}
		case "tb":
			z.TempBandwidth, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TempBandwidth")
				return
			}
		case "bw":
			z.Bandwidth, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Bandwidth")
				return
			}
		case "q":
			z.Quota, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Quota")
				return
			}
		case "ul":
			z.UsageLimitation, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "UsageLimitation")
				return
			}
		case "mbw":
			z.MinBandwidth, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "MinBandwidth")
				return
			}
		case "eti":
			z.ExpireTime, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "ExpireTime")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *DoDConnection) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 20
	// write "st"
	err = en.Append(0xde, 0x0, 0x14, 0xa2, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.ServiceType)
	if err != nil {
		err = msgp.WrapError(err, "ServiceType")
		return
	}
	// write "ct"
	err = en.Append(0xa2, 0x63, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint8(z.ChargeType)
	if err != nil {
		err = msgp.WrapError(err, "ChargeType")
		return
	}
	// write "pr"
	err = en.Append(0xa2, 0x70, 0x72)
	if err != nil {
		return
	}
	err = en.WriteUint8(z.PaidRule)
	if err != nil {
		err = msgp.WrapError(err, "PaidRule")
		return
	}
	// write "bm"
	err = en.Append(0xa2, 0x62, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteUint8(z.BuyMode)
	if err != nil {
		err = msgp.WrapError(err, "BuyMode")
		return
	}
	// write "lo"
	err = en.Append(0xa2, 0x6c, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteString(z.Location)
	if err != nil {
		err = msgp.WrapError(err, "Location")
		return
	}
	// write "sti"
	err = en.Append(0xa3, 0x73, 0x74, 0x69)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.StartTime)
	if err != nil {
		err = msgp.WrapError(err, "StartTime")
		return
	}
	// write "et"
	err = en.Append(0xa2, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.EndTime)
	if err != nil {
		err = msgp.WrapError(err, "EndTime")
		return
	}
	// write "p"
	err = en.Append(0xa1, 0x70)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Price)
	if err != nil {
		err = msgp.WrapError(err, "Price")
		return
	}
	// write "u"
	err = en.Append(0xa1, 0x75)
	if err != nil {
		return
	}
	err = en.WriteString(z.Unit)
	if err != nil {
		err = msgp.WrapError(err, "Unit")
		return
	}
	// write "c"
	err = en.Append(0xa1, 0x63)
	if err != nil {
		return
	}
	err = en.WriteString(z.Currency)
	if err != nil {
		err = msgp.WrapError(err, "Currency")
		return
	}
	// write "b"
	err = en.Append(0xa1, 0x62)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Balance)
	if err != nil {
		err = msgp.WrapError(err, "Balance")
		return
	}
	// write "tst"
	err = en.Append(0xa3, 0x74, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.TempStartTime)
	if err != nil {
		err = msgp.WrapError(err, "TempStartTime")
		return
	}
	// write "tet"
	err = en.Append(0xa3, 0x74, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.TempEndTime)
	if err != nil {
		err = msgp.WrapError(err, "TempEndTime")
		return
	}
	// write "tp"
	err = en.Append(0xa2, 0x74, 0x70)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.TempPrice)
	if err != nil {
		err = msgp.WrapError(err, "TempPrice")
		return
	}
	// write "tb"
	err = en.Append(0xa2, 0x74, 0x62)
	if err != nil {
		return
	}
	err = en.WriteString(z.TempBandwidth)
	if err != nil {
		err = msgp.WrapError(err, "TempBandwidth")
		return
	}
	// write "bw"
	err = en.Append(0xa2, 0x62, 0x77)
	if err != nil {
		return
	}
	err = en.WriteString(z.Bandwidth)
	if err != nil {
		err = msgp.WrapError(err, "Bandwidth")
		return
	}
	// write "q"
	err = en.Append(0xa1, 0x71)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Quota)
	if err != nil {
		err = msgp.WrapError(err, "Quota")
		return
	}
	// write "ul"
	err = en.Append(0xa2, 0x75, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.UsageLimitation)
	if err != nil {
		err = msgp.WrapError(err, "UsageLimitation")
		return
	}
	// write "mbw"
	err = en.Append(0xa3, 0x6d, 0x62, 0x77)
	if err != nil {
		return
	}
	err = en.WriteString(z.MinBandwidth)
	if err != nil {
		err = msgp.WrapError(err, "MinBandwidth")
		return
	}
	// write "eti"
	err = en.Append(0xa3, 0x65, 0x74, 0x69)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.ExpireTime)
	if err != nil {
		err = msgp.WrapError(err, "ExpireTime")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *DoDConnection) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 20
	// string "st"
	o = append(o, 0xde, 0x0, 0x14, 0xa2, 0x73, 0x74)
	o = msgp.AppendString(o, z.ServiceType)
	// string "ct"
	o = append(o, 0xa2, 0x63, 0x74)
	o = msgp.AppendUint8(o, z.ChargeType)
	// string "pr"
	o = append(o, 0xa2, 0x70, 0x72)
	o = msgp.AppendUint8(o, z.PaidRule)
	// string "bm"
	o = append(o, 0xa2, 0x62, 0x6d)
	o = msgp.AppendUint8(o, z.BuyMode)
	// string "lo"
	o = append(o, 0xa2, 0x6c, 0x6f)
	o = msgp.AppendString(o, z.Location)
	// string "sti"
	o = append(o, 0xa3, 0x73, 0x74, 0x69)
	o = msgp.AppendUint64(o, z.StartTime)
	// string "et"
	o = append(o, 0xa2, 0x65, 0x74)
	o = msgp.AppendUint64(o, z.EndTime)
	// string "p"
	o = append(o, 0xa1, 0x70)
	o = msgp.AppendFloat64(o, z.Price)
	// string "u"
	o = append(o, 0xa1, 0x75)
	o = msgp.AppendString(o, z.Unit)
	// string "c"
	o = append(o, 0xa1, 0x63)
	o = msgp.AppendString(o, z.Currency)
	// string "b"
	o = append(o, 0xa1, 0x62)
	o = msgp.AppendFloat64(o, z.Balance)
	// string "tst"
	o = append(o, 0xa3, 0x74, 0x73, 0x74)
	o = msgp.AppendUint64(o, z.TempStartTime)
	// string "tet"
	o = append(o, 0xa3, 0x74, 0x65, 0x74)
	o = msgp.AppendUint64(o, z.TempEndTime)
	// string "tp"
	o = append(o, 0xa2, 0x74, 0x70)
	o = msgp.AppendFloat64(o, z.TempPrice)
	// string "tb"
	o = append(o, 0xa2, 0x74, 0x62)
	o = msgp.AppendString(o, z.TempBandwidth)
	// string "bw"
	o = append(o, 0xa2, 0x62, 0x77)
	o = msgp.AppendString(o, z.Bandwidth)
	// string "q"
	o = append(o, 0xa1, 0x71)
	o = msgp.AppendFloat64(o, z.Quota)
	// string "ul"
	o = append(o, 0xa2, 0x75, 0x6c)
	o = msgp.AppendFloat64(o, z.UsageLimitation)
	// string "mbw"
	o = append(o, 0xa3, 0x6d, 0x62, 0x77)
	o = msgp.AppendString(o, z.MinBandwidth)
	// string "eti"
	o = append(o, 0xa3, 0x65, 0x74, 0x69)
	o = msgp.AppendUint64(o, z.ExpireTime)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DoDConnection) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "st":
			z.ServiceType, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServiceType")
				return
			}
		case "ct":
			z.ChargeType, bts, err = msgp.ReadUint8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ChargeType")
				return
			}
		case "pr":
			z.PaidRule, bts, err = msgp.ReadUint8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PaidRule")
				return
			}
		case "bm":
			z.BuyMode, bts, err = msgp.ReadUint8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BuyMode")
				return
			}
		case "lo":
			z.Location, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Location")
				return
			}
		case "sti":
			z.StartTime, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StartTime")
				return
			}
		case "et":
			z.EndTime, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "EndTime")
				return
			}
		case "p":
			z.Price, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Price")
				return
			}
		case "u":
			z.Unit, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Unit")
				return
			}
		case "c":
			z.Currency, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Currency")
				return
			}
		case "b":
			z.Balance, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Balance")
				return
			}
		case "tst":
			z.TempStartTime, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TempStartTime")
				return
			}
		case "tet":
			z.TempEndTime, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TempEndTime")
				return
			}
		case "tp":
			z.TempPrice, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TempPrice")
				return
			}
		case "tb":
			z.TempBandwidth, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TempBandwidth")
				return
			}
		case "bw":
			z.Bandwidth, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bandwidth")
				return
			}
		case "q":
			z.Quota, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Quota")
				return
			}
		case "ul":
			z.UsageLimitation, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UsageLimitation")
				return
			}
		case "mbw":
			z.MinBandwidth, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MinBandwidth")
				return
			}
		case "eti":
			z.ExpireTime, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ExpireTime")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *DoDConnection) Msgsize() (s int) {
	s = 3 + 3 + msgp.StringPrefixSize + len(z.ServiceType) + 3 + msgp.Uint8Size + 3 + msgp.Uint8Size + 3 + msgp.Uint8Size + 3 + msgp.StringPrefixSize + len(z.Location) + 4 + msgp.Uint64Size + 3 + msgp.Uint64Size + 2 + msgp.Float64Size + 2 + msgp.StringPrefixSize + len(z.Unit) + 2 + msgp.StringPrefixSize + len(z.Currency) + 2 + msgp.Float64Size + 4 + msgp.Uint64Size + 4 + msgp.Uint64Size + 3 + msgp.Float64Size + 3 + msgp.StringPrefixSize + len(z.TempBandwidth) + 3 + msgp.StringPrefixSize + len(z.Bandwidth) + 2 + msgp.Float64Size + 3 + msgp.Float64Size + 4 + msgp.StringPrefixSize + len(z.MinBandwidth) + 4 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DoDInvoice) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ConnectionID":
			z.ConnectionID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ConnectionID")
				return
			}
		case "StartTime":
			z.StartTime, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "StartTime")
				return
			}
		case "EndTime":
			z.EndTime, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "EndTime")
				return
			}
		case "Usage":
			z.Usage, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Usage")
				return
			}
		case "Price":
			z.Price, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Price")
				return
			}
		case "Currency":
			z.Currency, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Currency")
				return
			}
		case "TotalPrice":
			z.TotalPrice, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "TotalPrice")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *DoDInvoice) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "ConnectionID"
	err = en.Append(0x87, 0xac, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.ConnectionID)
	if err != nil {
		err = msgp.WrapError(err, "ConnectionID")
		return
	}
	// write "StartTime"
	err = en.Append(0xa9, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.StartTime)
	if err != nil {
		err = msgp.WrapError(err, "StartTime")
		return
	}
	// write "EndTime"
	err = en.Append(0xa7, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.EndTime)
	if err != nil {
		err = msgp.WrapError(err, "EndTime")
		return
	}
	// write "Usage"
	err = en.Append(0xa5, 0x55, 0x73, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Usage)
	if err != nil {
		err = msgp.WrapError(err, "Usage")
		return
	}
	// write "Price"
	err = en.Append(0xa5, 0x50, 0x72, 0x69, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Price)
	if err != nil {
		err = msgp.WrapError(err, "Price")
		return
	}
	// write "Currency"
	err = en.Append(0xa8, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Currency)
	if err != nil {
		err = msgp.WrapError(err, "Currency")
		return
	}
	// write "TotalPrice"
	err = en.Append(0xaa, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.TotalPrice)
	if err != nil {
		err = msgp.WrapError(err, "TotalPrice")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *DoDInvoice) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "ConnectionID"
	o = append(o, 0x87, 0xac, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44)
	o = msgp.AppendString(o, z.ConnectionID)
	// string "StartTime"
	o = append(o, 0xa9, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendUint64(o, z.StartTime)
	// string "EndTime"
	o = append(o, 0xa7, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendUint64(o, z.EndTime)
	// string "Usage"
	o = append(o, 0xa5, 0x55, 0x73, 0x61, 0x67, 0x65)
	o = msgp.AppendFloat64(o, z.Usage)
	// string "Price"
	o = append(o, 0xa5, 0x50, 0x72, 0x69, 0x63, 0x65)
	o = msgp.AppendFloat64(o, z.Price)
	// string "Currency"
	o = append(o, 0xa8, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79)
	o = msgp.AppendString(o, z.Currency)
	// string "TotalPrice"
	o = append(o, 0xaa, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65)
	o = msgp.AppendFloat64(o, z.TotalPrice)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DoDInvoice) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ConnectionID":
			z.ConnectionID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ConnectionID")
				return
			}
		case "StartTime":
			z.StartTime, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StartTime")
				return
			}
		case "EndTime":
			z.EndTime, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "EndTime")
				return
			}
		case "Usage":
			z.Usage, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Usage")
				return
			}
		case "Price":
			z.Price, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Price")
				return
			}
		case "Currency":
			z.Currency, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Currency")
				return
			}
		case "TotalPrice":
			z.TotalPrice, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TotalPrice")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *DoDInvoice) Msgsize() (s int) {
	s = 1 + 13 + msgp.StringPrefixSize + len(z.ConnectionID) + 10 + msgp.Uint64Size + 8 + msgp.Uint64Size + 6 + msgp.Float64Size + 6 + msgp.Float64Size + 9 + msgp.StringPrefixSize + len(z.Currency) + 11 + msgp.Float64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DoDUsage) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "c":
			z.ChargeType, err = dc.ReadUint8()
			if err != nil {
				err = msgp.WrapError(err, "ChargeType")
				return
			}
		case "st":
			z.SourceType, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "SourceType")
				return
			}
		case "sd":
			z.SourceDevice, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "SourceDevice")
				return
			}
		case "i":
			z.IP, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "IP")
				return
			}
		case "u":
			z.Usage, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Usage")
				return
			}
		case "t":
			z.Timestamp, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *DoDUsage) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "c"
	err = en.Append(0x86, 0xa1, 0x63)
	if err != nil {
		return
	}
	err = en.WriteUint8(z.ChargeType)
	if err != nil {
		err = msgp.WrapError(err, "ChargeType")
		return
	}
	// write "st"
	err = en.Append(0xa2, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.SourceType)
	if err != nil {
		err = msgp.WrapError(err, "SourceType")
		return
	}
	// write "sd"
	err = en.Append(0xa2, 0x73, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.SourceDevice)
	if err != nil {
		err = msgp.WrapError(err, "SourceDevice")
		return
	}
	// write "i"
	err = en.Append(0xa1, 0x69)
	if err != nil {
		return
	}
	err = en.WriteString(z.IP)
	if err != nil {
		err = msgp.WrapError(err, "IP")
		return
	}
	// write "u"
	err = en.Append(0xa1, 0x75)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Usage)
	if err != nil {
		err = msgp.WrapError(err, "Usage")
		return
	}
	// write "t"
	err = en.Append(0xa1, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *DoDUsage) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "c"
	o = append(o, 0x86, 0xa1, 0x63)
	o = msgp.AppendUint8(o, z.ChargeType)
	// string "st"
	o = append(o, 0xa2, 0x73, 0x74)
	o = msgp.AppendString(o, z.SourceType)
	// string "sd"
	o = append(o, 0xa2, 0x73, 0x64)
	o = msgp.AppendString(o, z.SourceDevice)
	// string "i"
	o = append(o, 0xa1, 0x69)
	o = msgp.AppendString(o, z.IP)
	// string "u"
	o = append(o, 0xa1, 0x75)
	o = msgp.AppendFloat64(o, z.Usage)
	// string "t"
	o = append(o, 0xa1, 0x74)
	o = msgp.AppendUint64(o, z.Timestamp)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DoDUsage) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "c":
			z.ChargeType, bts, err = msgp.ReadUint8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ChargeType")
				return
			}
		case "st":
			z.SourceType, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SourceType")
				return
			}
		case "sd":
			z.SourceDevice, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SourceDevice")
				return
			}
		case "i":
			z.IP, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IP")
				return
			}
		case "u":
			z.Usage, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Usage")
				return
			}
		case "t":
			z.Timestamp, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *DoDUsage) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint8Size + 3 + msgp.StringPrefixSize + len(z.SourceType) + 3 + msgp.StringPrefixSize + len(z.SourceDevice) + 2 + msgp.StringPrefixSize + len(z.IP) + 2 + msgp.Float64Size + 2 + msgp.Uint64Size
	return
}
