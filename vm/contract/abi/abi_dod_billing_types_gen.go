package abi

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *DoDAccount) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "i":
			err = dc.ReadExtension(&z.AccountInfo)
			if err != nil {
				err = msgp.WrapError(err, "AccountInfo")
				return
			}
		case "t":
			z.AccountType, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "AccountType")
				return
			}
		case "uu":
			z.UUID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "UUID")
				return
			}
		case "ps":
			z.PermServiceID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "PermServiceID")
				return
			}
		case "ts":
			z.TempServiceID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TempServiceID")
				return
			}
		case "st":
			z.StartTime, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "StartTime")
				return
			}
		case "et":
			z.EndTime, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "EndTime")
				return
			}
		case "l":
			z.Limitation, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Limitation")
				return
			}
		case "u":
			z.Usage, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Usage")
				return
			}
		case "ul":
			z.UsageLimitation, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "UsageLimitation")
				return
			}
		case "lc":
			z.LastCharge, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "LastCharge")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *DoDAccount) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 11
	// write "i"
	err = en.Append(0x8b, 0xa1, 0x69)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.AccountInfo)
	if err != nil {
		err = msgp.WrapError(err, "AccountInfo")
		return
	}
	// write "t"
	err = en.Append(0xa1, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.AccountType)
	if err != nil {
		err = msgp.WrapError(err, "AccountType")
		return
	}
	// write "uu"
	err = en.Append(0xa2, 0x75, 0x75)
	if err != nil {
		return
	}
	err = en.WriteString(z.UUID)
	if err != nil {
		err = msgp.WrapError(err, "UUID")
		return
	}
	// write "ps"
	err = en.Append(0xa2, 0x70, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.PermServiceID)
	if err != nil {
		err = msgp.WrapError(err, "PermServiceID")
		return
	}
	// write "ts"
	err = en.Append(0xa2, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.TempServiceID)
	if err != nil {
		err = msgp.WrapError(err, "TempServiceID")
		return
	}
	// write "st"
	err = en.Append(0xa2, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.StartTime)
	if err != nil {
		err = msgp.WrapError(err, "StartTime")
		return
	}
	// write "et"
	err = en.Append(0xa2, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.EndTime)
	if err != nil {
		err = msgp.WrapError(err, "EndTime")
		return
	}
	// write "l"
	err = en.Append(0xa1, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Limitation)
	if err != nil {
		err = msgp.WrapError(err, "Limitation")
		return
	}
	// write "u"
	err = en.Append(0xa1, 0x75)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Usage)
	if err != nil {
		err = msgp.WrapError(err, "Usage")
		return
	}
	// write "ul"
	err = en.Append(0xa2, 0x75, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.UsageLimitation)
	if err != nil {
		err = msgp.WrapError(err, "UsageLimitation")
		return
	}
	// write "lc"
	err = en.Append(0xa2, 0x6c, 0x63)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.LastCharge)
	if err != nil {
		err = msgp.WrapError(err, "LastCharge")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *DoDAccount) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 11
	// string "i"
	o = append(o, 0x8b, 0xa1, 0x69)
	o, err = msgp.AppendExtension(o, &z.AccountInfo)
	if err != nil {
		err = msgp.WrapError(err, "AccountInfo")
		return
	}
	// string "t"
	o = append(o, 0xa1, 0x74)
	o = msgp.AppendString(o, z.AccountType)
	// string "uu"
	o = append(o, 0xa2, 0x75, 0x75)
	o = msgp.AppendString(o, z.UUID)
	// string "ps"
	o = append(o, 0xa2, 0x70, 0x73)
	o = msgp.AppendString(o, z.PermServiceID)
	// string "ts"
	o = append(o, 0xa2, 0x74, 0x73)
	o = msgp.AppendString(o, z.TempServiceID)
	// string "st"
	o = append(o, 0xa2, 0x73, 0x74)
	o = msgp.AppendUint64(o, z.StartTime)
	// string "et"
	o = append(o, 0xa2, 0x65, 0x74)
	o = msgp.AppendUint64(o, z.EndTime)
	// string "l"
	o = append(o, 0xa1, 0x6c)
	o = msgp.AppendUint64(o, z.Limitation)
	// string "u"
	o = append(o, 0xa1, 0x75)
	o = msgp.AppendUint64(o, z.Usage)
	// string "ul"
	o = append(o, 0xa2, 0x75, 0x6c)
	o = msgp.AppendUint64(o, z.UsageLimitation)
	// string "lc"
	o = append(o, 0xa2, 0x6c, 0x63)
	o = msgp.AppendUint64(o, z.LastCharge)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DoDAccount) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "i":
			bts, err = msgp.ReadExtensionBytes(bts, &z.AccountInfo)
			if err != nil {
				err = msgp.WrapError(err, "AccountInfo")
				return
			}
		case "t":
			z.AccountType, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AccountType")
				return
			}
		case "uu":
			z.UUID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UUID")
				return
			}
		case "ps":
			z.PermServiceID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PermServiceID")
				return
			}
		case "ts":
			z.TempServiceID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TempServiceID")
				return
			}
		case "st":
			z.StartTime, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StartTime")
				return
			}
		case "et":
			z.EndTime, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "EndTime")
				return
			}
		case "l":
			z.Limitation, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Limitation")
				return
			}
		case "u":
			z.Usage, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Usage")
				return
			}
		case "ul":
			z.UsageLimitation, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UsageLimitation")
				return
			}
		case "lc":
			z.LastCharge, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastCharge")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *DoDAccount) Msgsize() (s int) {
	s = 1 + 2 + msgp.ExtensionPrefixSize + z.AccountInfo.Len() + 2 + msgp.StringPrefixSize + len(z.AccountType) + 3 + msgp.StringPrefixSize + len(z.UUID) + 3 + msgp.StringPrefixSize + len(z.PermServiceID) + 3 + msgp.StringPrefixSize + len(z.TempServiceID) + 3 + msgp.Uint64Size + 3 + msgp.Uint64Size + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size + 3 + msgp.Uint64Size + 3 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DoDService) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "c":
			z.ChargeType, err = dc.ReadUint8()
			if err != nil {
				err = msgp.WrapError(err, "ChargeType")
				return
			}
		case "t":
			z.PayType, err = dc.ReadUint8()
			if err != nil {
				err = msgp.WrapError(err, "PayType")
				return
			}
		case "p":
			z.Price, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Price")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z DoDService) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "c"
	err = en.Append(0x83, 0xa1, 0x63)
	if err != nil {
		return
	}
	err = en.WriteUint8(z.ChargeType)
	if err != nil {
		err = msgp.WrapError(err, "ChargeType")
		return
	}
	// write "t"
	err = en.Append(0xa1, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint8(z.PayType)
	if err != nil {
		err = msgp.WrapError(err, "PayType")
		return
	}
	// write "p"
	err = en.Append(0xa1, 0x70)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Price)
	if err != nil {
		err = msgp.WrapError(err, "Price")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z DoDService) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "c"
	o = append(o, 0x83, 0xa1, 0x63)
	o = msgp.AppendUint8(o, z.ChargeType)
	// string "t"
	o = append(o, 0xa1, 0x74)
	o = msgp.AppendUint8(o, z.PayType)
	// string "p"
	o = append(o, 0xa1, 0x70)
	o = msgp.AppendUint32(o, z.Price)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DoDService) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "c":
			z.ChargeType, bts, err = msgp.ReadUint8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ChargeType")
				return
			}
		case "t":
			z.PayType, bts, err = msgp.ReadUint8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PayType")
				return
			}
		case "p":
			z.Price, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Price")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z DoDService) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint8Size + 2 + msgp.Uint8Size + 2 + msgp.Uint32Size
	return
}
