// Code generated by go-enum
// DO NOT EDIT!

package abi

import (
	"fmt"
	"strings"
)

const (
	// AssetStatusDeactivated is a AssetStatus of type Deactivated
	AssetStatusDeactivated AssetStatus = iota
	// AssetStatusActivated is a AssetStatus of type Activated
	AssetStatusActivated
)

const _AssetStatusName = "DeactivatedActivated"

var _AssetStatusNames = []string{
	_AssetStatusName[0:11],
	_AssetStatusName[11:20],
}

// AssetStatusNames returns a list of possible string values of AssetStatus.
func AssetStatusNames() []string {
	tmp := make([]string, len(_AssetStatusNames))
	copy(tmp, _AssetStatusNames)
	return tmp
}

var _AssetStatusMap = map[AssetStatus]string{
	0: _AssetStatusName[0:11],
	1: _AssetStatusName[11:20],
}

// String implements the Stringer interface.
func (x AssetStatus) String() string {
	if str, ok := _AssetStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("AssetStatus(%d)", x)
}

var _AssetStatusValue = map[string]AssetStatus{
	_AssetStatusName[0:11]:  0,
	_AssetStatusName[11:20]: 1,
}

// ParseAssetStatus attempts to convert a string to a AssetStatus
func ParseAssetStatus(name string) (AssetStatus, error) {
	if x, ok := _AssetStatusValue[name]; ok {
		return x, nil
	}
	return AssetStatus(0), fmt.Errorf("%s is not a valid AssetStatus, try [%s]", name, strings.Join(_AssetStatusNames, ", "))
}

// MarshalText implements the text marshaller method
func (x AssetStatus) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *AssetStatus) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseAssetStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// ContractStatusActiveStage1 is a ContractStatus of type ActiveStage1
	ContractStatusActiveStage1 ContractStatus = iota
	// ContractStatusActivated is a ContractStatus of type Activated
	ContractStatusActivated
	// ContractStatusDestroyStage1 is a ContractStatus of type DestroyStage1
	ContractStatusDestroyStage1
	// ContractStatusDestroyed is a ContractStatus of type Destroyed
	ContractStatusDestroyed
	// ContractStatusRejected is a ContractStatus of type Rejected
	ContractStatusRejected
)

const _ContractStatusName = "ActiveStage1ActivatedDestroyStage1DestroyedRejected"

var _ContractStatusNames = []string{
	_ContractStatusName[0:12],
	_ContractStatusName[12:21],
	_ContractStatusName[21:34],
	_ContractStatusName[34:43],
	_ContractStatusName[43:51],
}

// ContractStatusNames returns a list of possible string values of ContractStatus.
func ContractStatusNames() []string {
	tmp := make([]string, len(_ContractStatusNames))
	copy(tmp, _ContractStatusNames)
	return tmp
}

var _ContractStatusMap = map[ContractStatus]string{
	0: _ContractStatusName[0:12],
	1: _ContractStatusName[12:21],
	2: _ContractStatusName[21:34],
	3: _ContractStatusName[34:43],
	4: _ContractStatusName[43:51],
}

// String implements the Stringer interface.
func (x ContractStatus) String() string {
	if str, ok := _ContractStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ContractStatus(%d)", x)
}

var _ContractStatusValue = map[string]ContractStatus{
	_ContractStatusName[0:12]:  0,
	_ContractStatusName[12:21]: 1,
	_ContractStatusName[21:34]: 2,
	_ContractStatusName[34:43]: 3,
	_ContractStatusName[43:51]: 4,
}

// ParseContractStatus attempts to convert a string to a ContractStatus
func ParseContractStatus(name string) (ContractStatus, error) {
	if x, ok := _ContractStatusValue[name]; ok {
		return x, nil
	}
	return ContractStatus(0), fmt.Errorf("%s is not a valid ContractStatus, try [%s]", name, strings.Join(_ContractStatusNames, ", "))
}

// MarshalText implements the text marshaller method
func (x ContractStatus) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *ContractStatus) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseContractStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// DLRStatusDelivered is a DLRStatus of type Delivered
	DLRStatusDelivered DLRStatus = iota
	// DLRStatusRejected is a DLRStatus of type Rejected
	DLRStatusRejected
	// DLRStatusUnknown is a DLRStatus of type Unknown
	DLRStatusUnknown
	// DLRStatusUndelivered is a DLRStatus of type Undelivered
	DLRStatusUndelivered
	// DLRStatusEmpty is a DLRStatus of type Empty
	DLRStatusEmpty
)

const _DLRStatusName = "DeliveredRejectedUnknownUndeliveredEmpty"

var _DLRStatusNames = []string{
	_DLRStatusName[0:9],
	_DLRStatusName[9:17],
	_DLRStatusName[17:24],
	_DLRStatusName[24:35],
	_DLRStatusName[35:40],
}

// DLRStatusNames returns a list of possible string values of DLRStatus.
func DLRStatusNames() []string {
	tmp := make([]string, len(_DLRStatusNames))
	copy(tmp, _DLRStatusNames)
	return tmp
}

var _DLRStatusMap = map[DLRStatus]string{
	0: _DLRStatusName[0:9],
	1: _DLRStatusName[9:17],
	2: _DLRStatusName[17:24],
	3: _DLRStatusName[24:35],
	4: _DLRStatusName[35:40],
}

// String implements the Stringer interface.
func (x DLRStatus) String() string {
	if str, ok := _DLRStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DLRStatus(%d)", x)
}

var _DLRStatusValue = map[string]DLRStatus{
	_DLRStatusName[0:9]:   0,
	_DLRStatusName[9:17]:  1,
	_DLRStatusName[17:24]: 2,
	_DLRStatusName[24:35]: 3,
	_DLRStatusName[35:40]: 4,
}

// ParseDLRStatus attempts to convert a string to a DLRStatus
func ParseDLRStatus(name string) (DLRStatus, error) {
	if x, ok := _DLRStatusValue[name]; ok {
		return x, nil
	}
	return DLRStatus(0), fmt.Errorf("%s is not a valid DLRStatus, try [%s]", name, strings.Join(_DLRStatusNames, ", "))
}

// MarshalText implements the text marshaller method
func (x DLRStatus) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *DLRStatus) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDLRStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// SLATypeDeliveredRate is a SLAType of type DeliveredRate
	SLATypeDeliveredRate SLAType = iota
	// SLATypeLatency is a SLAType of type Latency
	SLATypeLatency
)

const _SLATypeName = "DeliveredRateLatency"

var _SLATypeNames = []string{
	_SLATypeName[0:13],
	_SLATypeName[13:20],
}

// SLATypeNames returns a list of possible string values of SLAType.
func SLATypeNames() []string {
	tmp := make([]string, len(_SLATypeNames))
	copy(tmp, _SLATypeNames)
	return tmp
}

var _SLATypeMap = map[SLAType]string{
	0: _SLATypeName[0:13],
	1: _SLATypeName[13:20],
}

// String implements the Stringer interface.
func (x SLAType) String() string {
	if str, ok := _SLATypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("SLAType(%d)", x)
}

var _SLATypeValue = map[string]SLAType{
	_SLATypeName[0:13]:  0,
	_SLATypeName[13:20]: 1,
}

// ParseSLAType attempts to convert a string to a SLAType
func ParseSLAType(name string) (SLAType, error) {
	if x, ok := _SLATypeValue[name]; ok {
		return x, nil
	}
	return SLAType(0), fmt.Errorf("%s is not a valid SLAType, try [%s]", name, strings.Join(_SLATypeNames, ", "))
}

// MarshalText implements the text marshaller method
func (x SLAType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *SLAType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseSLAType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// SendingStatusSent is a SendingStatus of type Sent
	SendingStatusSent SendingStatus = iota
	// SendingStatusError is a SendingStatus of type Error
	SendingStatusError
	// SendingStatusEmpty is a SendingStatus of type Empty
	SendingStatusEmpty
)

const _SendingStatusName = "SentErrorEmpty"

var _SendingStatusNames = []string{
	_SendingStatusName[0:4],
	_SendingStatusName[4:9],
	_SendingStatusName[9:14],
}

// SendingStatusNames returns a list of possible string values of SendingStatus.
func SendingStatusNames() []string {
	tmp := make([]string, len(_SendingStatusNames))
	copy(tmp, _SendingStatusNames)
	return tmp
}

var _SendingStatusMap = map[SendingStatus]string{
	0: _SendingStatusName[0:4],
	1: _SendingStatusName[4:9],
	2: _SendingStatusName[9:14],
}

// String implements the Stringer interface.
func (x SendingStatus) String() string {
	if str, ok := _SendingStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("SendingStatus(%d)", x)
}

var _SendingStatusValue = map[string]SendingStatus{
	_SendingStatusName[0:4]:  0,
	_SendingStatusName[4:9]:  1,
	_SendingStatusName[9:14]: 2,
}

// ParseSendingStatus attempts to convert a string to a SendingStatus
func ParseSendingStatus(name string) (SendingStatus, error) {
	if x, ok := _SendingStatusValue[name]; ok {
		return x, nil
	}
	return SendingStatus(0), fmt.Errorf("%s is not a valid SendingStatus, try [%s]", name, strings.Join(_SendingStatusNames, ", "))
}

// MarshalText implements the text marshaller method
func (x SendingStatus) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *SendingStatus) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseSendingStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// SettlementStatusUnknown is a SettlementStatus of type Unknown
	SettlementStatusUnknown SettlementStatus = iota
	// SettlementStatusStage1 is a SettlementStatus of type Stage1
	SettlementStatusStage1
	// SettlementStatusSuccess is a SettlementStatus of type Success
	SettlementStatusSuccess
	// SettlementStatusFailure is a SettlementStatus of type Failure
	SettlementStatusFailure
	// SettlementStatusMissing is a SettlementStatus of type Missing
	SettlementStatusMissing
	// SettlementStatusDuplicate is a SettlementStatus of type Duplicate
	SettlementStatusDuplicate
)

const _SettlementStatusName = "unknownstage1successfailuremissingduplicate"

var _SettlementStatusNames = []string{
	_SettlementStatusName[0:7],
	_SettlementStatusName[7:13],
	_SettlementStatusName[13:20],
	_SettlementStatusName[20:27],
	_SettlementStatusName[27:34],
	_SettlementStatusName[34:43],
}

// SettlementStatusNames returns a list of possible string values of SettlementStatus.
func SettlementStatusNames() []string {
	tmp := make([]string, len(_SettlementStatusNames))
	copy(tmp, _SettlementStatusNames)
	return tmp
}

var _SettlementStatusMap = map[SettlementStatus]string{
	0: _SettlementStatusName[0:7],
	1: _SettlementStatusName[7:13],
	2: _SettlementStatusName[13:20],
	3: _SettlementStatusName[20:27],
	4: _SettlementStatusName[27:34],
	5: _SettlementStatusName[34:43],
}

// String implements the Stringer interface.
func (x SettlementStatus) String() string {
	if str, ok := _SettlementStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("SettlementStatus(%d)", x)
}

var _SettlementStatusValue = map[string]SettlementStatus{
	_SettlementStatusName[0:7]:   0,
	_SettlementStatusName[7:13]:  1,
	_SettlementStatusName[13:20]: 2,
	_SettlementStatusName[20:27]: 3,
	_SettlementStatusName[27:34]: 4,
	_SettlementStatusName[34:43]: 5,
}

// ParseSettlementStatus attempts to convert a string to a SettlementStatus
func ParseSettlementStatus(name string) (SettlementStatus, error) {
	if x, ok := _SettlementStatusValue[name]; ok {
		return x, nil
	}
	return SettlementStatus(0), fmt.Errorf("%s is not a valid SettlementStatus, try [%s]", name, strings.Join(_SettlementStatusNames, ", "))
}

// MarshalText implements the text marshaller method
func (x SettlementStatus) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *SettlementStatus) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseSettlementStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
