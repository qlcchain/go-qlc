package settlement

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *CDRStatus) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "p":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Params")
				return
			}
			if z.Params == nil {
				z.Params = make(map[string][]CDRParam, zb0002)
			} else if len(z.Params) > 0 {
				for key := range z.Params {
					delete(z.Params, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 []CDRParam
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Params")
					return
				}
				var zb0003 uint32
				zb0003, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "Params", za0001)
					return
				}
				if cap(za0002) >= int(zb0003) {
					za0002 = (za0002)[:zb0003]
				} else {
					za0002 = make([]CDRParam, zb0003)
				}
				for za0003 := range za0002 {
					err = za0002[za0003].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Params", za0001, za0003)
						return
					}
				}
				z.Params[za0001] = za0002
			}
		case "s":
			{
				var zb0004 int
				zb0004, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
				z.Status = SettlementStatus(zb0004)
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CDRStatus) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "p"
	err = en.Append(0x82, 0xa1, 0x70)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Params)))
	if err != nil {
		err = msgp.WrapError(err, "Params")
		return
	}
	for za0001, za0002 := range z.Params {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Params")
			return
		}
		err = en.WriteArrayHeader(uint32(len(za0002)))
		if err != nil {
			err = msgp.WrapError(err, "Params", za0001)
			return
		}
		for za0003 := range za0002 {
			err = za0002[za0003].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Params", za0001, za0003)
				return
			}
		}
	}
	// write "s"
	err = en.Append(0xa1, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.Status))
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CDRStatus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "p"
	o = append(o, 0x82, 0xa1, 0x70)
	o = msgp.AppendMapHeader(o, uint32(len(z.Params)))
	for za0001, za0002 := range z.Params {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendArrayHeader(o, uint32(len(za0002)))
		for za0003 := range za0002 {
			o, err = za0002[za0003].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Params", za0001, za0003)
				return
			}
		}
	}
	// string "s"
	o = append(o, 0xa1, 0x73)
	o = msgp.AppendInt(o, int(z.Status))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CDRStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "p":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Params")
				return
			}
			if z.Params == nil {
				z.Params = make(map[string][]CDRParam, zb0002)
			} else if len(z.Params) > 0 {
				for key := range z.Params {
					delete(z.Params, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 []CDRParam
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Params")
					return
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Params", za0001)
					return
				}
				if cap(za0002) >= int(zb0003) {
					za0002 = (za0002)[:zb0003]
				} else {
					za0002 = make([]CDRParam, zb0003)
				}
				for za0003 := range za0002 {
					bts, err = za0002[za0003].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Params", za0001, za0003)
						return
					}
				}
				z.Params[za0001] = za0002
			}
		case "s":
			{
				var zb0004 int
				zb0004, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
				z.Status = SettlementStatus(zb0004)
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CDRStatus) Msgsize() (s int) {
	s = 1 + 2 + msgp.MapHeaderSize
	if z.Params != nil {
		for za0001, za0002 := range z.Params {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.ArrayHeaderSize
			for za0003 := range za0002 {
				s += za0002[za0003].Msgsize()
			}
		}
	}
	s += 2 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SettlementCDR) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CDRParam":
			err = z.CDRParam.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "CDRParam")
				return
			}
		case "f":
			err = dc.ReadExtension(&z.From)
			if err != nil {
				err = msgp.WrapError(err, "From")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SettlementCDR) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "CDRParam"
	err = en.Append(0x82, 0xa8, 0x43, 0x44, 0x52, 0x50, 0x61, 0x72, 0x61, 0x6d)
	if err != nil {
		return
	}
	err = z.CDRParam.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "CDRParam")
		return
	}
	// write "f"
	err = en.Append(0xa1, 0x66)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.From)
	if err != nil {
		err = msgp.WrapError(err, "From")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SettlementCDR) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "CDRParam"
	o = append(o, 0x82, 0xa8, 0x43, 0x44, 0x52, 0x50, 0x61, 0x72, 0x61, 0x6d)
	o, err = z.CDRParam.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "CDRParam")
		return
	}
	// string "f"
	o = append(o, 0xa1, 0x66)
	o, err = msgp.AppendExtension(o, &z.From)
	if err != nil {
		err = msgp.WrapError(err, "From")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SettlementCDR) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CDRParam":
			bts, err = z.CDRParam.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "CDRParam")
				return
			}
		case "f":
			bts, err = msgp.ReadExtensionBytes(bts, &z.From)
			if err != nil {
				err = msgp.WrapError(err, "From")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SettlementCDR) Msgsize() (s int) {
	s = 1 + 9 + z.CDRParam.Msgsize() + 2 + msgp.ExtensionPrefixSize + z.From.Len()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SettlementStatus) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int
		zb0001, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = SettlementStatus(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z SettlementStatus) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt(int(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z SettlementStatus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SettlementStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int
		zb0001, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = SettlementStatus(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SettlementStatus) Msgsize() (s int) {
	s = msgp.IntSize
	return
}
