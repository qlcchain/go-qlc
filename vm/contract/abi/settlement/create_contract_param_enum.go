// Code generated by go-enum
// DO NOT EDIT!

package settlement

import (
	"fmt"
	"strings"
)

const (
	// ContractStatusActiveStage1 is a ContractStatus of type ActiveStage1
	ContractStatusActiveStage1 ContractStatus = iota
	// ContractStatusActivated is a ContractStatus of type Activated
	ContractStatusActivated
	// ContractStatusDestroyStage1 is a ContractStatus of type DestroyStage1
	ContractStatusDestroyStage1
	// ContractStatusDestroyed is a ContractStatus of type Destroyed
	ContractStatusDestroyed
	// ContractStatusRejected is a ContractStatus of type Rejected
	ContractStatusRejected
)

const _ContractStatusName = "ActiveStage1ActivatedDestroyStage1DestroyedRejected"

var _ContractStatusNames = []string{
	_ContractStatusName[0:12],
	_ContractStatusName[12:21],
	_ContractStatusName[21:34],
	_ContractStatusName[34:43],
	_ContractStatusName[43:51],
}

// ContractStatusNames returns a list of possible string values of ContractStatus.
func ContractStatusNames() []string {
	tmp := make([]string, len(_ContractStatusNames))
	copy(tmp, _ContractStatusNames)
	return tmp
}

var _ContractStatusMap = map[ContractStatus]string{
	0: _ContractStatusName[0:12],
	1: _ContractStatusName[12:21],
	2: _ContractStatusName[21:34],
	3: _ContractStatusName[34:43],
	4: _ContractStatusName[43:51],
}

// String implements the Stringer interface.
func (x ContractStatus) String() string {
	if str, ok := _ContractStatusMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ContractStatus(%d)", x)
}

var _ContractStatusValue = map[string]ContractStatus{
	_ContractStatusName[0:12]:  0,
	_ContractStatusName[12:21]: 1,
	_ContractStatusName[21:34]: 2,
	_ContractStatusName[34:43]: 3,
	_ContractStatusName[43:51]: 4,
}

// ParseContractStatus attempts to convert a string to a ContractStatus
func ParseContractStatus(name string) (ContractStatus, error) {
	if x, ok := _ContractStatusValue[name]; ok {
		return x, nil
	}
	return ContractStatus(0), fmt.Errorf("%s is not a valid ContractStatus, try [%s]", name, strings.Join(_ContractStatusNames, ", "))
}

// MarshalText implements the text marshaller method
func (x ContractStatus) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *ContractStatus) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseContractStatus(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
