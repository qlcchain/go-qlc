package settlement

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *ContractParam) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CreateContractParam":
			err = z.CreateContractParam.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "CreateContractParam")
				return
			}
		case "pre":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "PreStops")
				return
			}
			if cap(z.PreStops) >= int(zb0002) {
				z.PreStops = (z.PreStops)[:zb0002]
			} else {
				z.PreStops = make([]string, zb0002)
			}
			for za0001 := range z.PreStops {
				z.PreStops[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "PreStops", za0001)
					return
				}
			}
		case "nex":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "NextStops")
				return
			}
			if cap(z.NextStops) >= int(zb0003) {
				z.NextStops = (z.NextStops)[:zb0003]
			} else {
				z.NextStops = make([]string, zb0003)
			}
			for za0002 := range z.NextStops {
				z.NextStops[za0002], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "NextStops", za0002)
					return
				}
			}
		case "t2":
			z.ConfirmDate, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ConfirmDate")
				return
			}
		case "s":
			err = z.Status.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		case "t":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Terminator")
					return
				}
				z.Terminator = nil
			} else {
				if z.Terminator == nil {
					z.Terminator = new(Terminator)
				}
				var zb0004 uint32
				zb0004, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Terminator")
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Terminator")
						return
					}
					switch msgp.UnsafeString(field) {
					case "a":
						err = dc.ReadExtension(&z.Terminator.Address)
						if err != nil {
							err = msgp.WrapError(err, "Terminator", "Address")
							return
						}
					case "r":
						z.Terminator.Request, err = dc.ReadBool()
						if err != nil {
							err = msgp.WrapError(err, "Terminator", "Request")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Terminator")
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ContractParam) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "CreateContractParam"
	err = en.Append(0x86, 0xb3, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d)
	if err != nil {
		return
	}
	err = z.CreateContractParam.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "CreateContractParam")
		return
	}
	// write "pre"
	err = en.Append(0xa3, 0x70, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.PreStops)))
	if err != nil {
		err = msgp.WrapError(err, "PreStops")
		return
	}
	for za0001 := range z.PreStops {
		err = en.WriteString(z.PreStops[za0001])
		if err != nil {
			err = msgp.WrapError(err, "PreStops", za0001)
			return
		}
	}
	// write "nex"
	err = en.Append(0xa3, 0x6e, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.NextStops)))
	if err != nil {
		err = msgp.WrapError(err, "NextStops")
		return
	}
	for za0002 := range z.NextStops {
		err = en.WriteString(z.NextStops[za0002])
		if err != nil {
			err = msgp.WrapError(err, "NextStops", za0002)
			return
		}
	}
	// write "t2"
	err = en.Append(0xa2, 0x74, 0x32)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ConfirmDate)
	if err != nil {
		err = msgp.WrapError(err, "ConfirmDate")
		return
	}
	// write "s"
	err = en.Append(0xa1, 0x73)
	if err != nil {
		return
	}
	err = z.Status.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	// write "t"
	err = en.Append(0xa1, 0x74)
	if err != nil {
		return
	}
	if z.Terminator == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "a"
		err = en.Append(0x82, 0xa1, 0x61)
		if err != nil {
			return
		}
		err = en.WriteExtension(&z.Terminator.Address)
		if err != nil {
			err = msgp.WrapError(err, "Terminator", "Address")
			return
		}
		// write "r"
		err = en.Append(0xa1, 0x72)
		if err != nil {
			return
		}
		err = en.WriteBool(z.Terminator.Request)
		if err != nil {
			err = msgp.WrapError(err, "Terminator", "Request")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ContractParam) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "CreateContractParam"
	o = append(o, 0x86, 0xb3, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d)
	o, err = z.CreateContractParam.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "CreateContractParam")
		return
	}
	// string "pre"
	o = append(o, 0xa3, 0x70, 0x72, 0x65)
	o = msgp.AppendArrayHeader(o, uint32(len(z.PreStops)))
	for za0001 := range z.PreStops {
		o = msgp.AppendString(o, z.PreStops[za0001])
	}
	// string "nex"
	o = append(o, 0xa3, 0x6e, 0x65, 0x78)
	o = msgp.AppendArrayHeader(o, uint32(len(z.NextStops)))
	for za0002 := range z.NextStops {
		o = msgp.AppendString(o, z.NextStops[za0002])
	}
	// string "t2"
	o = append(o, 0xa2, 0x74, 0x32)
	o = msgp.AppendInt64(o, z.ConfirmDate)
	// string "s"
	o = append(o, 0xa1, 0x73)
	o, err = z.Status.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	// string "t"
	o = append(o, 0xa1, 0x74)
	if z.Terminator == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 2
		// string "a"
		o = append(o, 0x82, 0xa1, 0x61)
		o, err = msgp.AppendExtension(o, &z.Terminator.Address)
		if err != nil {
			err = msgp.WrapError(err, "Terminator", "Address")
			return
		}
		// string "r"
		o = append(o, 0xa1, 0x72)
		o = msgp.AppendBool(o, z.Terminator.Request)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ContractParam) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CreateContractParam":
			bts, err = z.CreateContractParam.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreateContractParam")
				return
			}
		case "pre":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PreStops")
				return
			}
			if cap(z.PreStops) >= int(zb0002) {
				z.PreStops = (z.PreStops)[:zb0002]
			} else {
				z.PreStops = make([]string, zb0002)
			}
			for za0001 := range z.PreStops {
				z.PreStops[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PreStops", za0001)
					return
				}
			}
		case "nex":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NextStops")
				return
			}
			if cap(z.NextStops) >= int(zb0003) {
				z.NextStops = (z.NextStops)[:zb0003]
			} else {
				z.NextStops = make([]string, zb0003)
			}
			for za0002 := range z.NextStops {
				z.NextStops[za0002], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "NextStops", za0002)
					return
				}
			}
		case "t2":
			z.ConfirmDate, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ConfirmDate")
				return
			}
		case "s":
			bts, err = z.Status.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		case "t":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Terminator = nil
			} else {
				if z.Terminator == nil {
					z.Terminator = new(Terminator)
				}
				var zb0004 uint32
				zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Terminator")
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Terminator")
						return
					}
					switch msgp.UnsafeString(field) {
					case "a":
						bts, err = msgp.ReadExtensionBytes(bts, &z.Terminator.Address)
						if err != nil {
							err = msgp.WrapError(err, "Terminator", "Address")
							return
						}
					case "r":
						z.Terminator.Request, bts, err = msgp.ReadBoolBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Terminator", "Request")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Terminator")
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ContractParam) Msgsize() (s int) {
	s = 1 + 20 + z.CreateContractParam.Msgsize() + 4 + msgp.ArrayHeaderSize
	for za0001 := range z.PreStops {
		s += msgp.StringPrefixSize + len(z.PreStops[za0001])
	}
	s += 4 + msgp.ArrayHeaderSize
	for za0002 := range z.NextStops {
		s += msgp.StringPrefixSize + len(z.NextStops[za0002])
	}
	s += 3 + msgp.Int64Size + 2 + z.Status.Msgsize() + 2
	if z.Terminator == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 2 + msgp.ExtensionPrefixSize + z.Terminator.Address.Len() + 2 + msgp.BoolSize
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Terminator) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			err = dc.ReadExtension(&z.Address)
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "r":
			z.Request, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Request")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Terminator) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "a"
	err = en.Append(0x82, 0xa1, 0x61)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Address)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	// write "r"
	err = en.Append(0xa1, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Request)
	if err != nil {
		err = msgp.WrapError(err, "Request")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Terminator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "a"
	o = append(o, 0x82, 0xa1, 0x61)
	o, err = msgp.AppendExtension(o, &z.Address)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	// string "r"
	o = append(o, 0xa1, 0x72)
	o = msgp.AppendBool(o, z.Request)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Terminator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Address)
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "r":
			z.Request, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Request")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Terminator) Msgsize() (s int) {
	s = 1 + 2 + msgp.ExtensionPrefixSize + z.Address.Len() + 2 + msgp.BoolSize
	return
}
