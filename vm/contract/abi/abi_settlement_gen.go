package abi

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/qlcchain/go-qlc/common/types"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *CDRParam) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "i":
			z.Index, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Index")
				return
			}
		case "dt":
			z.SmsDt, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "SmsDt")
				return
			}
		case "tx":
			z.Sender, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Sender")
				return
			}
		case "d":
			z.Destination, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Destination")
				return
			}
		case "dc":
			z.DstCountry, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "DstCountry")
				return
			}
		case "do":
			z.DstOperator, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "DstOperator")
				return
			}
		case "mcc":
			z.DstMcc, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "DstMcc")
				return
			}
		case "mnc":
			z.DstMnc, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "DstMnc")
				return
			}
		case "p":
			z.SellPrice, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "SellPrice")
				return
			}
		case "c":
			z.SellCurrency, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "SellCurrency")
				return
			}
		case "cn":
			z.CustomerName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "CustomerName")
				return
			}
		case "cid":
			z.CustomerID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "CustomerID")
				return
			}
		case "s":
			z.SendingStatus, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "SendingStatus")
				return
			}
		case "ds":
			z.DlrStatus, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "DlrStatus")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CDRParam) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 14
	// write "i"
	err = en.Append(0x8e, 0xa1, 0x69)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Index)
	if err != nil {
		err = msgp.WrapError(err, "Index")
		return
	}
	// write "dt"
	err = en.Append(0xa2, 0x64, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.SmsDt)
	if err != nil {
		err = msgp.WrapError(err, "SmsDt")
		return
	}
	// write "tx"
	err = en.Append(0xa2, 0x74, 0x78)
	if err != nil {
		return
	}
	err = en.WriteString(z.Sender)
	if err != nil {
		err = msgp.WrapError(err, "Sender")
		return
	}
	// write "d"
	err = en.Append(0xa1, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Destination)
	if err != nil {
		err = msgp.WrapError(err, "Destination")
		return
	}
	// write "dc"
	err = en.Append(0xa2, 0x64, 0x63)
	if err != nil {
		return
	}
	err = en.WriteString(z.DstCountry)
	if err != nil {
		err = msgp.WrapError(err, "DstCountry")
		return
	}
	// write "do"
	err = en.Append(0xa2, 0x64, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteString(z.DstOperator)
	if err != nil {
		err = msgp.WrapError(err, "DstOperator")
		return
	}
	// write "mcc"
	err = en.Append(0xa3, 0x6d, 0x63, 0x63)
	if err != nil {
		return
	}
	err = en.WriteString(z.DstMcc)
	if err != nil {
		err = msgp.WrapError(err, "DstMcc")
		return
	}
	// write "mnc"
	err = en.Append(0xa3, 0x6d, 0x6e, 0x63)
	if err != nil {
		return
	}
	err = en.WriteString(z.DstMnc)
	if err != nil {
		err = msgp.WrapError(err, "DstMnc")
		return
	}
	// write "p"
	err = en.Append(0xa1, 0x70)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.SellPrice)
	if err != nil {
		err = msgp.WrapError(err, "SellPrice")
		return
	}
	// write "c"
	err = en.Append(0xa1, 0x63)
	if err != nil {
		return
	}
	err = en.WriteString(z.SellCurrency)
	if err != nil {
		err = msgp.WrapError(err, "SellCurrency")
		return
	}
	// write "cn"
	err = en.Append(0xa2, 0x63, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.CustomerName)
	if err != nil {
		err = msgp.WrapError(err, "CustomerName")
		return
	}
	// write "cid"
	err = en.Append(0xa3, 0x63, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.CustomerID)
	if err != nil {
		err = msgp.WrapError(err, "CustomerID")
		return
	}
	// write "s"
	err = en.Append(0xa1, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.SendingStatus)
	if err != nil {
		err = msgp.WrapError(err, "SendingStatus")
		return
	}
	// write "ds"
	err = en.Append(0xa2, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.DlrStatus)
	if err != nil {
		err = msgp.WrapError(err, "DlrStatus")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CDRParam) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 14
	// string "i"
	o = append(o, 0x8e, 0xa1, 0x69)
	o = msgp.AppendUint64(o, z.Index)
	// string "dt"
	o = append(o, 0xa2, 0x64, 0x74)
	o = msgp.AppendInt64(o, z.SmsDt)
	// string "tx"
	o = append(o, 0xa2, 0x74, 0x78)
	o = msgp.AppendString(o, z.Sender)
	// string "d"
	o = append(o, 0xa1, 0x64)
	o = msgp.AppendString(o, z.Destination)
	// string "dc"
	o = append(o, 0xa2, 0x64, 0x63)
	o = msgp.AppendString(o, z.DstCountry)
	// string "do"
	o = append(o, 0xa2, 0x64, 0x6f)
	o = msgp.AppendString(o, z.DstOperator)
	// string "mcc"
	o = append(o, 0xa3, 0x6d, 0x63, 0x63)
	o = msgp.AppendString(o, z.DstMcc)
	// string "mnc"
	o = append(o, 0xa3, 0x6d, 0x6e, 0x63)
	o = msgp.AppendString(o, z.DstMnc)
	// string "p"
	o = append(o, 0xa1, 0x70)
	o = msgp.AppendFloat64(o, z.SellPrice)
	// string "c"
	o = append(o, 0xa1, 0x63)
	o = msgp.AppendString(o, z.SellCurrency)
	// string "cn"
	o = append(o, 0xa2, 0x63, 0x6e)
	o = msgp.AppendString(o, z.CustomerName)
	// string "cid"
	o = append(o, 0xa3, 0x63, 0x69, 0x64)
	o = msgp.AppendString(o, z.CustomerID)
	// string "s"
	o = append(o, 0xa1, 0x73)
	o = msgp.AppendString(o, z.SendingStatus)
	// string "ds"
	o = append(o, 0xa2, 0x64, 0x73)
	o = msgp.AppendString(o, z.DlrStatus)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CDRParam) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "i":
			z.Index, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Index")
				return
			}
		case "dt":
			z.SmsDt, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SmsDt")
				return
			}
		case "tx":
			z.Sender, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sender")
				return
			}
		case "d":
			z.Destination, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Destination")
				return
			}
		case "dc":
			z.DstCountry, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DstCountry")
				return
			}
		case "do":
			z.DstOperator, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DstOperator")
				return
			}
		case "mcc":
			z.DstMcc, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DstMcc")
				return
			}
		case "mnc":
			z.DstMnc, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DstMnc")
				return
			}
		case "p":
			z.SellPrice, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SellPrice")
				return
			}
		case "c":
			z.SellCurrency, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SellCurrency")
				return
			}
		case "cn":
			z.CustomerName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CustomerName")
				return
			}
		case "cid":
			z.CustomerID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CustomerID")
				return
			}
		case "s":
			z.SendingStatus, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SendingStatus")
				return
			}
		case "ds":
			z.DlrStatus, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DlrStatus")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CDRParam) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint64Size + 3 + msgp.Int64Size + 3 + msgp.StringPrefixSize + len(z.Sender) + 2 + msgp.StringPrefixSize + len(z.Destination) + 3 + msgp.StringPrefixSize + len(z.DstCountry) + 3 + msgp.StringPrefixSize + len(z.DstOperator) + 4 + msgp.StringPrefixSize + len(z.DstMcc) + 4 + msgp.StringPrefixSize + len(z.DstMnc) + 2 + msgp.Float64Size + 2 + msgp.StringPrefixSize + len(z.SellCurrency) + 3 + msgp.StringPrefixSize + len(z.CustomerName) + 4 + msgp.StringPrefixSize + len(z.CustomerID) + 2 + msgp.StringPrefixSize + len(z.SendingStatus) + 3 + msgp.StringPrefixSize + len(z.DlrStatus)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *CDRStatus) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "p":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Params")
				return
			}
			if cap(z.Params) >= int(zb0002) {
				z.Params = (z.Params)[:zb0002]
			} else {
				z.Params = make([]SettlementCDR, zb0002)
			}
			for za0001 := range z.Params {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Params", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Params", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "CDRParam":
						err = z.Params[za0001].CDRParam.DecodeMsg(dc)
						if err != nil {
							err = msgp.WrapError(err, "Params", za0001, "CDRParam")
							return
						}
					case "f":
						err = dc.ReadExtension(&z.Params[za0001].From)
						if err != nil {
							err = msgp.WrapError(err, "Params", za0001, "From")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Params", za0001)
							return
						}
					}
				}
			}
		case "s":
			{
				var zb0004 int
				zb0004, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
				z.Status = SettlementStatus(zb0004)
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CDRStatus) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "p"
	err = en.Append(0x82, 0xa1, 0x70)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Params)))
	if err != nil {
		err = msgp.WrapError(err, "Params")
		return
	}
	for za0001 := range z.Params {
		// map header, size 2
		// write "CDRParam"
		err = en.Append(0x82, 0xa8, 0x43, 0x44, 0x52, 0x50, 0x61, 0x72, 0x61, 0x6d)
		if err != nil {
			return
		}
		err = z.Params[za0001].CDRParam.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Params", za0001, "CDRParam")
			return
		}
		// write "f"
		err = en.Append(0xa1, 0x66)
		if err != nil {
			return
		}
		err = en.WriteExtension(&z.Params[za0001].From)
		if err != nil {
			err = msgp.WrapError(err, "Params", za0001, "From")
			return
		}
	}
	// write "s"
	err = en.Append(0xa1, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.Status))
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CDRStatus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "p"
	o = append(o, 0x82, 0xa1, 0x70)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Params)))
	for za0001 := range z.Params {
		// map header, size 2
		// string "CDRParam"
		o = append(o, 0x82, 0xa8, 0x43, 0x44, 0x52, 0x50, 0x61, 0x72, 0x61, 0x6d)
		o, err = z.Params[za0001].CDRParam.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Params", za0001, "CDRParam")
			return
		}
		// string "f"
		o = append(o, 0xa1, 0x66)
		o, err = msgp.AppendExtension(o, &z.Params[za0001].From)
		if err != nil {
			err = msgp.WrapError(err, "Params", za0001, "From")
			return
		}
	}
	// string "s"
	o = append(o, 0xa1, 0x73)
	o = msgp.AppendInt(o, int(z.Status))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CDRStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "p":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Params")
				return
			}
			if cap(z.Params) >= int(zb0002) {
				z.Params = (z.Params)[:zb0002]
			} else {
				z.Params = make([]SettlementCDR, zb0002)
			}
			for za0001 := range z.Params {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Params", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Params", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "CDRParam":
						bts, err = z.Params[za0001].CDRParam.UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "Params", za0001, "CDRParam")
							return
						}
					case "f":
						bts, err = msgp.ReadExtensionBytes(bts, &z.Params[za0001].From)
						if err != nil {
							err = msgp.WrapError(err, "Params", za0001, "From")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Params", za0001)
							return
						}
					}
				}
			}
		case "s":
			{
				var zb0004 int
				zb0004, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
				z.Status = SettlementStatus(zb0004)
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CDRStatus) Msgsize() (s int) {
	s = 1 + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.Params {
		s += 1 + 9 + z.Params[za0001].CDRParam.Msgsize() + 2 + msgp.ExtensionPrefixSize + z.Params[za0001].From.Len()
	}
	s += 2 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ContractParam) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CreateContractParam":
			err = z.CreateContractParam.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "CreateContractParam")
				return
			}
		case "t2":
			z.ConfirmDate, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ConfirmDate")
				return
			}
		case "sb":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SignatureB")
					return
				}
				z.SignatureB = nil
			} else {
				if z.SignatureB == nil {
					z.SignatureB = new(types.Signature)
				}
				err = dc.ReadExtension(z.SignatureB)
				if err != nil {
					err = msgp.WrapError(err, "SignatureB")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ContractParam) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "CreateContractParam"
	err = en.Append(0x83, 0xb3, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d)
	if err != nil {
		return
	}
	err = z.CreateContractParam.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "CreateContractParam")
		return
	}
	// write "t2"
	err = en.Append(0xa2, 0x74, 0x32)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ConfirmDate)
	if err != nil {
		err = msgp.WrapError(err, "ConfirmDate")
		return
	}
	// write "sb"
	err = en.Append(0xa2, 0x73, 0x62)
	if err != nil {
		return
	}
	if z.SignatureB == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteExtension(z.SignatureB)
		if err != nil {
			err = msgp.WrapError(err, "SignatureB")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ContractParam) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "CreateContractParam"
	o = append(o, 0x83, 0xb3, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d)
	o, err = z.CreateContractParam.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "CreateContractParam")
		return
	}
	// string "t2"
	o = append(o, 0xa2, 0x74, 0x32)
	o = msgp.AppendInt64(o, z.ConfirmDate)
	// string "sb"
	o = append(o, 0xa2, 0x73, 0x62)
	if z.SignatureB == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = msgp.AppendExtension(o, z.SignatureB)
		if err != nil {
			err = msgp.WrapError(err, "SignatureB")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ContractParam) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CreateContractParam":
			bts, err = z.CreateContractParam.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreateContractParam")
				return
			}
		case "t2":
			z.ConfirmDate, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ConfirmDate")
				return
			}
		case "sb":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SignatureB = nil
			} else {
				if z.SignatureB == nil {
					z.SignatureB = new(types.Signature)
				}
				bts, err = msgp.ReadExtensionBytes(bts, z.SignatureB)
				if err != nil {
					err = msgp.WrapError(err, "SignatureB")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ContractParam) Msgsize() (s int) {
	s = 1 + 20 + z.CreateContractParam.Msgsize() + 3 + msgp.Int64Size + 3
	if z.SignatureB == nil {
		s += msgp.NilSize
	} else {
		s += msgp.ExtensionPrefixSize + z.SignatureB.Len()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *CreateContractParam) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "pa":
			err = dc.ReadExtension(&z.PartyA)
			if err != nil {
				err = msgp.WrapError(err, "PartyA")
				return
			}
		case "an":
			z.PartyAName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "PartyAName")
				return
			}
		case "pb":
			err = dc.ReadExtension(&z.PartyB)
			if err != nil {
				err = msgp.WrapError(err, "PartyB")
				return
			}
		case "bn":
			z.PartyBName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "PartyBName")
				return
			}
		case "pre":
			err = dc.ReadExtension(&z.Previous)
			if err != nil {
				err = msgp.WrapError(err, "Previous")
				return
			}
		case "id":
			z.ServiceId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ServiceId")
				return
			}
		case "mcc":
			z.Mcc, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Mcc")
				return
			}
		case "mnc":
			z.Mnc, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Mnc")
				return
			}
		case "t":
			z.TotalAmount, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "TotalAmount")
				return
			}
		case "u":
			z.UnitPrice, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "UnitPrice")
				return
			}
		case "c":
			z.Currency, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Currency")
				return
			}
		case "t1":
			z.SignDate, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "SignDate")
				return
			}
		case "sa":
			err = dc.ReadExtension(&z.SignatureA)
			if err != nil {
				err = msgp.WrapError(err, "SignatureA")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CreateContractParam) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 13
	// write "pa"
	err = en.Append(0x8d, 0xa2, 0x70, 0x61)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.PartyA)
	if err != nil {
		err = msgp.WrapError(err, "PartyA")
		return
	}
	// write "an"
	err = en.Append(0xa2, 0x61, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.PartyAName)
	if err != nil {
		err = msgp.WrapError(err, "PartyAName")
		return
	}
	// write "pb"
	err = en.Append(0xa2, 0x70, 0x62)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.PartyB)
	if err != nil {
		err = msgp.WrapError(err, "PartyB")
		return
	}
	// write "bn"
	err = en.Append(0xa2, 0x62, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.PartyBName)
	if err != nil {
		err = msgp.WrapError(err, "PartyBName")
		return
	}
	// write "pre"
	err = en.Append(0xa3, 0x70, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Previous)
	if err != nil {
		err = msgp.WrapError(err, "Previous")
		return
	}
	// write "id"
	err = en.Append(0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.ServiceId)
	if err != nil {
		err = msgp.WrapError(err, "ServiceId")
		return
	}
	// write "mcc"
	err = en.Append(0xa3, 0x6d, 0x63, 0x63)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Mcc)
	if err != nil {
		err = msgp.WrapError(err, "Mcc")
		return
	}
	// write "mnc"
	err = en.Append(0xa3, 0x6d, 0x6e, 0x63)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Mnc)
	if err != nil {
		err = msgp.WrapError(err, "Mnc")
		return
	}
	// write "t"
	err = en.Append(0xa1, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.TotalAmount)
	if err != nil {
		err = msgp.WrapError(err, "TotalAmount")
		return
	}
	// write "u"
	err = en.Append(0xa1, 0x75)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.UnitPrice)
	if err != nil {
		err = msgp.WrapError(err, "UnitPrice")
		return
	}
	// write "c"
	err = en.Append(0xa1, 0x63)
	if err != nil {
		return
	}
	err = en.WriteString(z.Currency)
	if err != nil {
		err = msgp.WrapError(err, "Currency")
		return
	}
	// write "t1"
	err = en.Append(0xa2, 0x74, 0x31)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.SignDate)
	if err != nil {
		err = msgp.WrapError(err, "SignDate")
		return
	}
	// write "sa"
	err = en.Append(0xa2, 0x73, 0x61)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.SignatureA)
	if err != nil {
		err = msgp.WrapError(err, "SignatureA")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CreateContractParam) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 13
	// string "pa"
	o = append(o, 0x8d, 0xa2, 0x70, 0x61)
	o, err = msgp.AppendExtension(o, &z.PartyA)
	if err != nil {
		err = msgp.WrapError(err, "PartyA")
		return
	}
	// string "an"
	o = append(o, 0xa2, 0x61, 0x6e)
	o = msgp.AppendString(o, z.PartyAName)
	// string "pb"
	o = append(o, 0xa2, 0x70, 0x62)
	o, err = msgp.AppendExtension(o, &z.PartyB)
	if err != nil {
		err = msgp.WrapError(err, "PartyB")
		return
	}
	// string "bn"
	o = append(o, 0xa2, 0x62, 0x6e)
	o = msgp.AppendString(o, z.PartyBName)
	// string "pre"
	o = append(o, 0xa3, 0x70, 0x72, 0x65)
	o, err = msgp.AppendExtension(o, &z.Previous)
	if err != nil {
		err = msgp.WrapError(err, "Previous")
		return
	}
	// string "id"
	o = append(o, 0xa2, 0x69, 0x64)
	o = msgp.AppendString(o, z.ServiceId)
	// string "mcc"
	o = append(o, 0xa3, 0x6d, 0x63, 0x63)
	o = msgp.AppendUint64(o, z.Mcc)
	// string "mnc"
	o = append(o, 0xa3, 0x6d, 0x6e, 0x63)
	o = msgp.AppendUint64(o, z.Mnc)
	// string "t"
	o = append(o, 0xa1, 0x74)
	o = msgp.AppendUint64(o, z.TotalAmount)
	// string "u"
	o = append(o, 0xa1, 0x75)
	o = msgp.AppendUint64(o, z.UnitPrice)
	// string "c"
	o = append(o, 0xa1, 0x63)
	o = msgp.AppendString(o, z.Currency)
	// string "t1"
	o = append(o, 0xa2, 0x74, 0x31)
	o = msgp.AppendInt64(o, z.SignDate)
	// string "sa"
	o = append(o, 0xa2, 0x73, 0x61)
	o, err = msgp.AppendExtension(o, &z.SignatureA)
	if err != nil {
		err = msgp.WrapError(err, "SignatureA")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CreateContractParam) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "pa":
			bts, err = msgp.ReadExtensionBytes(bts, &z.PartyA)
			if err != nil {
				err = msgp.WrapError(err, "PartyA")
				return
			}
		case "an":
			z.PartyAName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PartyAName")
				return
			}
		case "pb":
			bts, err = msgp.ReadExtensionBytes(bts, &z.PartyB)
			if err != nil {
				err = msgp.WrapError(err, "PartyB")
				return
			}
		case "bn":
			z.PartyBName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PartyBName")
				return
			}
		case "pre":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Previous)
			if err != nil {
				err = msgp.WrapError(err, "Previous")
				return
			}
		case "id":
			z.ServiceId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServiceId")
				return
			}
		case "mcc":
			z.Mcc, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Mcc")
				return
			}
		case "mnc":
			z.Mnc, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Mnc")
				return
			}
		case "t":
			z.TotalAmount, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TotalAmount")
				return
			}
		case "u":
			z.UnitPrice, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UnitPrice")
				return
			}
		case "c":
			z.Currency, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Currency")
				return
			}
		case "t1":
			z.SignDate, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SignDate")
				return
			}
		case "sa":
			bts, err = msgp.ReadExtensionBytes(bts, &z.SignatureA)
			if err != nil {
				err = msgp.WrapError(err, "SignatureA")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CreateContractParam) Msgsize() (s int) {
	s = 1 + 3 + msgp.ExtensionPrefixSize + z.PartyA.Len() + 3 + msgp.StringPrefixSize + len(z.PartyAName) + 3 + msgp.ExtensionPrefixSize + z.PartyB.Len() + 3 + msgp.StringPrefixSize + len(z.PartyBName) + 4 + msgp.ExtensionPrefixSize + z.Previous.Len() + 3 + msgp.StringPrefixSize + len(z.ServiceId) + 4 + msgp.Uint64Size + 4 + msgp.Uint64Size + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size + 2 + msgp.StringPrefixSize + len(z.Currency) + 3 + msgp.Int64Size + 3 + msgp.ExtensionPrefixSize + z.SignatureA.Len()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SettlementCDR) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CDRParam":
			err = z.CDRParam.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "CDRParam")
				return
			}
		case "f":
			err = dc.ReadExtension(&z.From)
			if err != nil {
				err = msgp.WrapError(err, "From")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SettlementCDR) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "CDRParam"
	err = en.Append(0x82, 0xa8, 0x43, 0x44, 0x52, 0x50, 0x61, 0x72, 0x61, 0x6d)
	if err != nil {
		return
	}
	err = z.CDRParam.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "CDRParam")
		return
	}
	// write "f"
	err = en.Append(0xa1, 0x66)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.From)
	if err != nil {
		err = msgp.WrapError(err, "From")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SettlementCDR) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "CDRParam"
	o = append(o, 0x82, 0xa8, 0x43, 0x44, 0x52, 0x50, 0x61, 0x72, 0x61, 0x6d)
	o, err = z.CDRParam.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "CDRParam")
		return
	}
	// string "f"
	o = append(o, 0xa1, 0x66)
	o, err = msgp.AppendExtension(o, &z.From)
	if err != nil {
		err = msgp.WrapError(err, "From")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SettlementCDR) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CDRParam":
			bts, err = z.CDRParam.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "CDRParam")
				return
			}
		case "f":
			bts, err = msgp.ReadExtensionBytes(bts, &z.From)
			if err != nil {
				err = msgp.WrapError(err, "From")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SettlementCDR) Msgsize() (s int) {
	s = 1 + 9 + z.CDRParam.Msgsize() + 2 + msgp.ExtensionPrefixSize + z.From.Len()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SettlementStatus) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int
		zb0001, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = SettlementStatus(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z SettlementStatus) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt(int(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z SettlementStatus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SettlementStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int
		zb0001, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = SettlementStatus(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SettlementStatus) Msgsize() (s int) {
	s = msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SignContractParam) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			err = dc.ReadExtension(&z.ContractAddress)
			if err != nil {
				err = msgp.WrapError(err, "ContractAddress")
				return
			}
		case "cd":
			z.ConfirmDate, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ConfirmDate")
				return
			}
		case "sb":
			err = dc.ReadExtension(&z.SignatureB)
			if err != nil {
				err = msgp.WrapError(err, "SignatureB")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z SignContractParam) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "a"
	err = en.Append(0x83, 0xa1, 0x61)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.ContractAddress)
	if err != nil {
		err = msgp.WrapError(err, "ContractAddress")
		return
	}
	// write "cd"
	err = en.Append(0xa2, 0x63, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ConfirmDate)
	if err != nil {
		err = msgp.WrapError(err, "ConfirmDate")
		return
	}
	// write "sb"
	err = en.Append(0xa2, 0x73, 0x62)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.SignatureB)
	if err != nil {
		err = msgp.WrapError(err, "SignatureB")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z SignContractParam) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "a"
	o = append(o, 0x83, 0xa1, 0x61)
	o, err = msgp.AppendExtension(o, &z.ContractAddress)
	if err != nil {
		err = msgp.WrapError(err, "ContractAddress")
		return
	}
	// string "cd"
	o = append(o, 0xa2, 0x63, 0x64)
	o = msgp.AppendInt64(o, z.ConfirmDate)
	// string "sb"
	o = append(o, 0xa2, 0x73, 0x62)
	o, err = msgp.AppendExtension(o, &z.SignatureB)
	if err != nil {
		err = msgp.WrapError(err, "SignatureB")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SignContractParam) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			bts, err = msgp.ReadExtensionBytes(bts, &z.ContractAddress)
			if err != nil {
				err = msgp.WrapError(err, "ContractAddress")
				return
			}
		case "cd":
			z.ConfirmDate, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ConfirmDate")
				return
			}
		case "sb":
			bts, err = msgp.ReadExtensionBytes(bts, &z.SignatureB)
			if err != nil {
				err = msgp.WrapError(err, "SignatureB")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SignContractParam) Msgsize() (s int) {
	s = 1 + 2 + msgp.ExtensionPrefixSize + z.ContractAddress.Len() + 3 + msgp.Int64Size + 3 + msgp.ExtensionPrefixSize + z.SignatureB.Len()
	return
}
