package abi

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/qlcchain/go-qlc/common/types"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *CDRParam) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			err = z.ContractAddress.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ContractAddress")
				return
			}
		case "i":
			z.Index, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Index")
				return
			}
		case "dt":
			z.SmsDt, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "SmsDt")
				return
			}
		case "tx":
			z.Sender, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Sender")
				return
			}
		case "d":
			z.Destination, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Destination")
				return
			}
		case "s":
			{
				var zb0002 int
				zb0002, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "SendingStatus")
					return
				}
				z.SendingStatus = SendingStatus(zb0002)
			}
		case "ds":
			{
				var zb0003 int
				zb0003, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "DlrStatus")
					return
				}
				z.DlrStatus = DLRStatus(zb0003)
			}
		case "ps":
			z.PreStop, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "PreStop")
				return
			}
		case "ns":
			z.NextStop, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "NextStop")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CDRParam) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 9
	// write "a"
	err = en.Append(0x89, 0xa1, 0x61)
	if err != nil {
		return
	}
	err = z.ContractAddress.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ContractAddress")
		return
	}
	// write "i"
	err = en.Append(0xa1, 0x69)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Index)
	if err != nil {
		err = msgp.WrapError(err, "Index")
		return
	}
	// write "dt"
	err = en.Append(0xa2, 0x64, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.SmsDt)
	if err != nil {
		err = msgp.WrapError(err, "SmsDt")
		return
	}
	// write "tx"
	err = en.Append(0xa2, 0x74, 0x78)
	if err != nil {
		return
	}
	err = en.WriteString(z.Sender)
	if err != nil {
		err = msgp.WrapError(err, "Sender")
		return
	}
	// write "d"
	err = en.Append(0xa1, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Destination)
	if err != nil {
		err = msgp.WrapError(err, "Destination")
		return
	}
	// write "s"
	err = en.Append(0xa1, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.SendingStatus))
	if err != nil {
		err = msgp.WrapError(err, "SendingStatus")
		return
	}
	// write "ds"
	err = en.Append(0xa2, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.DlrStatus))
	if err != nil {
		err = msgp.WrapError(err, "DlrStatus")
		return
	}
	// write "ps"
	err = en.Append(0xa2, 0x70, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.PreStop)
	if err != nil {
		err = msgp.WrapError(err, "PreStop")
		return
	}
	// write "ns"
	err = en.Append(0xa2, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.NextStop)
	if err != nil {
		err = msgp.WrapError(err, "NextStop")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CDRParam) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 9
	// string "a"
	o = append(o, 0x89, 0xa1, 0x61)
	o, err = z.ContractAddress.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ContractAddress")
		return
	}
	// string "i"
	o = append(o, 0xa1, 0x69)
	o = msgp.AppendUint64(o, z.Index)
	// string "dt"
	o = append(o, 0xa2, 0x64, 0x74)
	o = msgp.AppendInt64(o, z.SmsDt)
	// string "tx"
	o = append(o, 0xa2, 0x74, 0x78)
	o = msgp.AppendString(o, z.Sender)
	// string "d"
	o = append(o, 0xa1, 0x64)
	o = msgp.AppendString(o, z.Destination)
	// string "s"
	o = append(o, 0xa1, 0x73)
	o = msgp.AppendInt(o, int(z.SendingStatus))
	// string "ds"
	o = append(o, 0xa2, 0x64, 0x73)
	o = msgp.AppendInt(o, int(z.DlrStatus))
	// string "ps"
	o = append(o, 0xa2, 0x70, 0x73)
	o = msgp.AppendString(o, z.PreStop)
	// string "ns"
	o = append(o, 0xa2, 0x6e, 0x73)
	o = msgp.AppendString(o, z.NextStop)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CDRParam) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			bts, err = z.ContractAddress.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ContractAddress")
				return
			}
		case "i":
			z.Index, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Index")
				return
			}
		case "dt":
			z.SmsDt, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SmsDt")
				return
			}
		case "tx":
			z.Sender, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sender")
				return
			}
		case "d":
			z.Destination, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Destination")
				return
			}
		case "s":
			{
				var zb0002 int
				zb0002, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "SendingStatus")
					return
				}
				z.SendingStatus = SendingStatus(zb0002)
			}
		case "ds":
			{
				var zb0003 int
				zb0003, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DlrStatus")
					return
				}
				z.DlrStatus = DLRStatus(zb0003)
			}
		case "ps":
			z.PreStop, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PreStop")
				return
			}
		case "ns":
			z.NextStop, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NextStop")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CDRParam) Msgsize() (s int) {
	s = 1 + 2 + z.ContractAddress.Msgsize() + 2 + msgp.Uint64Size + 3 + msgp.Int64Size + 3 + msgp.StringPrefixSize + len(z.Sender) + 2 + msgp.StringPrefixSize + len(z.Destination) + 2 + msgp.IntSize + 3 + msgp.IntSize + 3 + msgp.StringPrefixSize + len(z.PreStop) + 3 + msgp.StringPrefixSize + len(z.NextStop)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *CDRStatus) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "p":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Params")
				return
			}
			if z.Params == nil {
				z.Params = make(map[string][]CDRParam, zb0002)
			} else if len(z.Params) > 0 {
				for key := range z.Params {
					delete(z.Params, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 []CDRParam
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Params")
					return
				}
				var zb0003 uint32
				zb0003, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "Params", za0001)
					return
				}
				if cap(za0002) >= int(zb0003) {
					za0002 = (za0002)[:zb0003]
				} else {
					za0002 = make([]CDRParam, zb0003)
				}
				for za0003 := range za0002 {
					err = za0002[za0003].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Params", za0001, za0003)
						return
					}
				}
				z.Params[za0001] = za0002
			}
		case "s":
			{
				var zb0004 int
				zb0004, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
				z.Status = SettlementStatus(zb0004)
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CDRStatus) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "p"
	err = en.Append(0x82, 0xa1, 0x70)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Params)))
	if err != nil {
		err = msgp.WrapError(err, "Params")
		return
	}
	for za0001, za0002 := range z.Params {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Params")
			return
		}
		err = en.WriteArrayHeader(uint32(len(za0002)))
		if err != nil {
			err = msgp.WrapError(err, "Params", za0001)
			return
		}
		for za0003 := range za0002 {
			err = za0002[za0003].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Params", za0001, za0003)
				return
			}
		}
	}
	// write "s"
	err = en.Append(0xa1, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.Status))
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CDRStatus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "p"
	o = append(o, 0x82, 0xa1, 0x70)
	o = msgp.AppendMapHeader(o, uint32(len(z.Params)))
	for za0001, za0002 := range z.Params {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendArrayHeader(o, uint32(len(za0002)))
		for za0003 := range za0002 {
			o, err = za0002[za0003].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Params", za0001, za0003)
				return
			}
		}
	}
	// string "s"
	o = append(o, 0xa1, 0x73)
	o = msgp.AppendInt(o, int(z.Status))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CDRStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "p":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Params")
				return
			}
			if z.Params == nil {
				z.Params = make(map[string][]CDRParam, zb0002)
			} else if len(z.Params) > 0 {
				for key := range z.Params {
					delete(z.Params, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 []CDRParam
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Params")
					return
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Params", za0001)
					return
				}
				if cap(za0002) >= int(zb0003) {
					za0002 = (za0002)[:zb0003]
				} else {
					za0002 = make([]CDRParam, zb0003)
				}
				for za0003 := range za0002 {
					bts, err = za0002[za0003].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Params", za0001, za0003)
						return
					}
				}
				z.Params[za0001] = za0002
			}
		case "s":
			{
				var zb0004 int
				zb0004, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
				z.Status = SettlementStatus(zb0004)
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CDRStatus) Msgsize() (s int) {
	s = 1 + 2 + msgp.MapHeaderSize
	if z.Params != nil {
		for za0001, za0002 := range z.Params {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.ArrayHeaderSize
			for za0003 := range za0002 {
				s += za0002[za0003].Msgsize()
			}
		}
	}
	s += 2 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ContractAddressList) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "AddressList")
				return
			}
			if cap(z.AddressList) >= int(zb0002) {
				z.AddressList = (z.AddressList)[:zb0002]
			} else {
				z.AddressList = make([]*types.Address, zb0002)
			}
			for za0001 := range z.AddressList {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "AddressList", za0001)
						return
					}
					z.AddressList[za0001] = nil
				} else {
					if z.AddressList[za0001] == nil {
						z.AddressList[za0001] = new(types.Address)
					}
					err = z.AddressList[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "AddressList", za0001)
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ContractAddressList) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "a"
	err = en.Append(0x81, 0xa1, 0x61)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.AddressList)))
	if err != nil {
		err = msgp.WrapError(err, "AddressList")
		return
	}
	for za0001 := range z.AddressList {
		if z.AddressList[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.AddressList[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "AddressList", za0001)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ContractAddressList) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "a"
	o = append(o, 0x81, 0xa1, 0x61)
	o = msgp.AppendArrayHeader(o, uint32(len(z.AddressList)))
	for za0001 := range z.AddressList {
		if z.AddressList[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.AddressList[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "AddressList", za0001)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ContractAddressList) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AddressList")
				return
			}
			if cap(z.AddressList) >= int(zb0002) {
				z.AddressList = (z.AddressList)[:zb0002]
			} else {
				z.AddressList = make([]*types.Address, zb0002)
			}
			for za0001 := range z.AddressList {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.AddressList[za0001] = nil
				} else {
					if z.AddressList[za0001] == nil {
						z.AddressList[za0001] = new(types.Address)
					}
					bts, err = z.AddressList[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "AddressList", za0001)
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ContractAddressList) Msgsize() (s int) {
	s = 1 + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.AddressList {
		if z.AddressList[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.AddressList[za0001].Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ContractParam) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CreateContractParam":
			err = z.CreateContractParam.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "CreateContractParam")
				return
			}
		case "pre":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "PreStops")
				return
			}
			if cap(z.PreStops) >= int(zb0002) {
				z.PreStops = (z.PreStops)[:zb0002]
			} else {
				z.PreStops = make([]string, zb0002)
			}
			for za0001 := range z.PreStops {
				z.PreStops[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "PreStops", za0001)
					return
				}
			}
		case "nex":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "NextStops")
				return
			}
			if cap(z.NextStops) >= int(zb0003) {
				z.NextStops = (z.NextStops)[:zb0003]
			} else {
				z.NextStops = make([]string, zb0003)
			}
			for za0002 := range z.NextStops {
				z.NextStops[za0002], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "NextStops", za0002)
					return
				}
			}
		case "t2":
			z.ConfirmDate, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ConfirmDate")
				return
			}
		case "s":
			{
				var zb0004 int
				zb0004, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
				z.Status = ContractStatus(zb0004)
			}
		case "t":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Terminator")
					return
				}
				z.Terminator = nil
			} else {
				if z.Terminator == nil {
					z.Terminator = new(Terminator)
				}
				var zb0005 uint32
				zb0005, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Terminator")
					return
				}
				for zb0005 > 0 {
					zb0005--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Terminator")
						return
					}
					switch msgp.UnsafeString(field) {
					case "a":
						err = dc.ReadExtension(&z.Terminator.Address)
						if err != nil {
							err = msgp.WrapError(err, "Terminator", "Address")
							return
						}
					case "r":
						z.Terminator.Request, err = dc.ReadBool()
						if err != nil {
							err = msgp.WrapError(err, "Terminator", "Request")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Terminator")
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ContractParam) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "CreateContractParam"
	err = en.Append(0x86, 0xb3, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d)
	if err != nil {
		return
	}
	err = z.CreateContractParam.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "CreateContractParam")
		return
	}
	// write "pre"
	err = en.Append(0xa3, 0x70, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.PreStops)))
	if err != nil {
		err = msgp.WrapError(err, "PreStops")
		return
	}
	for za0001 := range z.PreStops {
		err = en.WriteString(z.PreStops[za0001])
		if err != nil {
			err = msgp.WrapError(err, "PreStops", za0001)
			return
		}
	}
	// write "nex"
	err = en.Append(0xa3, 0x6e, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.NextStops)))
	if err != nil {
		err = msgp.WrapError(err, "NextStops")
		return
	}
	for za0002 := range z.NextStops {
		err = en.WriteString(z.NextStops[za0002])
		if err != nil {
			err = msgp.WrapError(err, "NextStops", za0002)
			return
		}
	}
	// write "t2"
	err = en.Append(0xa2, 0x74, 0x32)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ConfirmDate)
	if err != nil {
		err = msgp.WrapError(err, "ConfirmDate")
		return
	}
	// write "s"
	err = en.Append(0xa1, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.Status))
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	// write "t"
	err = en.Append(0xa1, 0x74)
	if err != nil {
		return
	}
	if z.Terminator == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "a"
		err = en.Append(0x82, 0xa1, 0x61)
		if err != nil {
			return
		}
		err = en.WriteExtension(&z.Terminator.Address)
		if err != nil {
			err = msgp.WrapError(err, "Terminator", "Address")
			return
		}
		// write "r"
		err = en.Append(0xa1, 0x72)
		if err != nil {
			return
		}
		err = en.WriteBool(z.Terminator.Request)
		if err != nil {
			err = msgp.WrapError(err, "Terminator", "Request")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ContractParam) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "CreateContractParam"
	o = append(o, 0x86, 0xb3, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d)
	o, err = z.CreateContractParam.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "CreateContractParam")
		return
	}
	// string "pre"
	o = append(o, 0xa3, 0x70, 0x72, 0x65)
	o = msgp.AppendArrayHeader(o, uint32(len(z.PreStops)))
	for za0001 := range z.PreStops {
		o = msgp.AppendString(o, z.PreStops[za0001])
	}
	// string "nex"
	o = append(o, 0xa3, 0x6e, 0x65, 0x78)
	o = msgp.AppendArrayHeader(o, uint32(len(z.NextStops)))
	for za0002 := range z.NextStops {
		o = msgp.AppendString(o, z.NextStops[za0002])
	}
	// string "t2"
	o = append(o, 0xa2, 0x74, 0x32)
	o = msgp.AppendInt64(o, z.ConfirmDate)
	// string "s"
	o = append(o, 0xa1, 0x73)
	o = msgp.AppendInt(o, int(z.Status))
	// string "t"
	o = append(o, 0xa1, 0x74)
	if z.Terminator == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 2
		// string "a"
		o = append(o, 0x82, 0xa1, 0x61)
		o, err = msgp.AppendExtension(o, &z.Terminator.Address)
		if err != nil {
			err = msgp.WrapError(err, "Terminator", "Address")
			return
		}
		// string "r"
		o = append(o, 0xa1, 0x72)
		o = msgp.AppendBool(o, z.Terminator.Request)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ContractParam) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CreateContractParam":
			bts, err = z.CreateContractParam.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreateContractParam")
				return
			}
		case "pre":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PreStops")
				return
			}
			if cap(z.PreStops) >= int(zb0002) {
				z.PreStops = (z.PreStops)[:zb0002]
			} else {
				z.PreStops = make([]string, zb0002)
			}
			for za0001 := range z.PreStops {
				z.PreStops[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "PreStops", za0001)
					return
				}
			}
		case "nex":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NextStops")
				return
			}
			if cap(z.NextStops) >= int(zb0003) {
				z.NextStops = (z.NextStops)[:zb0003]
			} else {
				z.NextStops = make([]string, zb0003)
			}
			for za0002 := range z.NextStops {
				z.NextStops[za0002], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "NextStops", za0002)
					return
				}
			}
		case "t2":
			z.ConfirmDate, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ConfirmDate")
				return
			}
		case "s":
			{
				var zb0004 int
				zb0004, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
				z.Status = ContractStatus(zb0004)
			}
		case "t":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Terminator = nil
			} else {
				if z.Terminator == nil {
					z.Terminator = new(Terminator)
				}
				var zb0005 uint32
				zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Terminator")
					return
				}
				for zb0005 > 0 {
					zb0005--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Terminator")
						return
					}
					switch msgp.UnsafeString(field) {
					case "a":
						bts, err = msgp.ReadExtensionBytes(bts, &z.Terminator.Address)
						if err != nil {
							err = msgp.WrapError(err, "Terminator", "Address")
							return
						}
					case "r":
						z.Terminator.Request, bts, err = msgp.ReadBoolBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Terminator", "Request")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Terminator")
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ContractParam) Msgsize() (s int) {
	s = 1 + 20 + z.CreateContractParam.Msgsize() + 4 + msgp.ArrayHeaderSize
	for za0001 := range z.PreStops {
		s += msgp.StringPrefixSize + len(z.PreStops[za0001])
	}
	s += 4 + msgp.ArrayHeaderSize
	for za0002 := range z.NextStops {
		s += msgp.StringPrefixSize + len(z.NextStops[za0002])
	}
	s += 3 + msgp.Int64Size + 2 + msgp.IntSize + 2
	if z.Terminator == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 2 + msgp.ExtensionPrefixSize + z.Terminator.Address.Len() + 2 + msgp.BoolSize
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ContractService) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ServiceId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ServiceId")
				return
			}
		case "mcc":
			z.Mcc, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Mcc")
				return
			}
		case "mnc":
			z.Mnc, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Mnc")
				return
			}
		case "t":
			z.TotalAmount, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "TotalAmount")
				return
			}
		case "u":
			z.UnitPrice, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "UnitPrice")
				return
			}
		case "c":
			z.Currency, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Currency")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ContractService) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "id"
	err = en.Append(0x86, 0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.ServiceId)
	if err != nil {
		err = msgp.WrapError(err, "ServiceId")
		return
	}
	// write "mcc"
	err = en.Append(0xa3, 0x6d, 0x63, 0x63)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Mcc)
	if err != nil {
		err = msgp.WrapError(err, "Mcc")
		return
	}
	// write "mnc"
	err = en.Append(0xa3, 0x6d, 0x6e, 0x63)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Mnc)
	if err != nil {
		err = msgp.WrapError(err, "Mnc")
		return
	}
	// write "t"
	err = en.Append(0xa1, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.TotalAmount)
	if err != nil {
		err = msgp.WrapError(err, "TotalAmount")
		return
	}
	// write "u"
	err = en.Append(0xa1, 0x75)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.UnitPrice)
	if err != nil {
		err = msgp.WrapError(err, "UnitPrice")
		return
	}
	// write "c"
	err = en.Append(0xa1, 0x63)
	if err != nil {
		return
	}
	err = en.WriteString(z.Currency)
	if err != nil {
		err = msgp.WrapError(err, "Currency")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ContractService) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "id"
	o = append(o, 0x86, 0xa2, 0x69, 0x64)
	o = msgp.AppendString(o, z.ServiceId)
	// string "mcc"
	o = append(o, 0xa3, 0x6d, 0x63, 0x63)
	o = msgp.AppendUint64(o, z.Mcc)
	// string "mnc"
	o = append(o, 0xa3, 0x6d, 0x6e, 0x63)
	o = msgp.AppendUint64(o, z.Mnc)
	// string "t"
	o = append(o, 0xa1, 0x74)
	o = msgp.AppendUint64(o, z.TotalAmount)
	// string "u"
	o = append(o, 0xa1, 0x75)
	o = msgp.AppendFloat64(o, z.UnitPrice)
	// string "c"
	o = append(o, 0xa1, 0x63)
	o = msgp.AppendString(o, z.Currency)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ContractService) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ServiceId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ServiceId")
				return
			}
		case "mcc":
			z.Mcc, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Mcc")
				return
			}
		case "mnc":
			z.Mnc, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Mnc")
				return
			}
		case "t":
			z.TotalAmount, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TotalAmount")
				return
			}
		case "u":
			z.UnitPrice, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UnitPrice")
				return
			}
		case "c":
			z.Currency, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Currency")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ContractService) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.ServiceId) + 4 + msgp.Uint64Size + 4 + msgp.Uint64Size + 2 + msgp.Uint64Size + 2 + msgp.Float64Size + 2 + msgp.StringPrefixSize + len(z.Currency)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ContractStatus) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int
		zb0001, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ContractStatus(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ContractStatus) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt(int(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ContractStatus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ContractStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int
		zb0001, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ContractStatus(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ContractStatus) Msgsize() (s int) {
	s = msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Contractor) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			err = dc.ReadExtension(&z.Address)
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "n":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Contractor) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "a"
	err = en.Append(0x82, 0xa1, 0x61)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Address)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	// write "n"
	err = en.Append(0xa1, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Contractor) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "a"
	o = append(o, 0x82, 0xa1, 0x61)
	o, err = msgp.AppendExtension(o, &z.Address)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	// string "n"
	o = append(o, 0xa1, 0x6e)
	o = msgp.AppendString(o, z.Name)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Contractor) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Address)
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "n":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Contractor) Msgsize() (s int) {
	s = 1 + 2 + msgp.ExtensionPrefixSize + z.Address.Len() + 2 + msgp.StringPrefixSize + len(z.Name)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *CreateContractParam) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "pa":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "PartyA")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "PartyA")
					return
				}
				switch msgp.UnsafeString(field) {
				case "a":
					err = dc.ReadExtension(&z.PartyA.Address)
					if err != nil {
						err = msgp.WrapError(err, "PartyA", "Address")
						return
					}
				case "n":
					z.PartyA.Name, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "PartyA", "Name")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "PartyA")
						return
					}
				}
			}
		case "pb":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "PartyB")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "PartyB")
					return
				}
				switch msgp.UnsafeString(field) {
				case "a":
					err = dc.ReadExtension(&z.PartyB.Address)
					if err != nil {
						err = msgp.WrapError(err, "PartyB", "Address")
						return
					}
				case "n":
					z.PartyB.Name, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "PartyB", "Name")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "PartyB")
						return
					}
				}
			}
		case "pre":
			err = dc.ReadExtension(&z.Previous)
			if err != nil {
				err = msgp.WrapError(err, "Previous")
				return
			}
		case "s":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Services")
				return
			}
			if cap(z.Services) >= int(zb0004) {
				z.Services = (z.Services)[:zb0004]
			} else {
				z.Services = make([]ContractService, zb0004)
			}
			for za0001 := range z.Services {
				err = z.Services[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Services", za0001)
					return
				}
			}
		case "t1":
			z.SignDate, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "SignDate")
				return
			}
		case "t3":
			z.StartDate, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "StartDate")
				return
			}
		case "t4":
			z.EndDate, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "EndDate")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CreateContractParam) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "pa"
	// map header, size 2
	// write "a"
	err = en.Append(0x87, 0xa2, 0x70, 0x61, 0x82, 0xa1, 0x61)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.PartyA.Address)
	if err != nil {
		err = msgp.WrapError(err, "PartyA", "Address")
		return
	}
	// write "n"
	err = en.Append(0xa1, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.PartyA.Name)
	if err != nil {
		err = msgp.WrapError(err, "PartyA", "Name")
		return
	}
	// write "pb"
	// map header, size 2
	// write "a"
	err = en.Append(0xa2, 0x70, 0x62, 0x82, 0xa1, 0x61)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.PartyB.Address)
	if err != nil {
		err = msgp.WrapError(err, "PartyB", "Address")
		return
	}
	// write "n"
	err = en.Append(0xa1, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.PartyB.Name)
	if err != nil {
		err = msgp.WrapError(err, "PartyB", "Name")
		return
	}
	// write "pre"
	err = en.Append(0xa3, 0x70, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Previous)
	if err != nil {
		err = msgp.WrapError(err, "Previous")
		return
	}
	// write "s"
	err = en.Append(0xa1, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Services)))
	if err != nil {
		err = msgp.WrapError(err, "Services")
		return
	}
	for za0001 := range z.Services {
		err = z.Services[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Services", za0001)
			return
		}
	}
	// write "t1"
	err = en.Append(0xa2, 0x74, 0x31)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.SignDate)
	if err != nil {
		err = msgp.WrapError(err, "SignDate")
		return
	}
	// write "t3"
	err = en.Append(0xa2, 0x74, 0x33)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.StartDate)
	if err != nil {
		err = msgp.WrapError(err, "StartDate")
		return
	}
	// write "t4"
	err = en.Append(0xa2, 0x74, 0x34)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.EndDate)
	if err != nil {
		err = msgp.WrapError(err, "EndDate")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CreateContractParam) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "pa"
	// map header, size 2
	// string "a"
	o = append(o, 0x87, 0xa2, 0x70, 0x61, 0x82, 0xa1, 0x61)
	o, err = msgp.AppendExtension(o, &z.PartyA.Address)
	if err != nil {
		err = msgp.WrapError(err, "PartyA", "Address")
		return
	}
	// string "n"
	o = append(o, 0xa1, 0x6e)
	o = msgp.AppendString(o, z.PartyA.Name)
	// string "pb"
	// map header, size 2
	// string "a"
	o = append(o, 0xa2, 0x70, 0x62, 0x82, 0xa1, 0x61)
	o, err = msgp.AppendExtension(o, &z.PartyB.Address)
	if err != nil {
		err = msgp.WrapError(err, "PartyB", "Address")
		return
	}
	// string "n"
	o = append(o, 0xa1, 0x6e)
	o = msgp.AppendString(o, z.PartyB.Name)
	// string "pre"
	o = append(o, 0xa3, 0x70, 0x72, 0x65)
	o, err = msgp.AppendExtension(o, &z.Previous)
	if err != nil {
		err = msgp.WrapError(err, "Previous")
		return
	}
	// string "s"
	o = append(o, 0xa1, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Services)))
	for za0001 := range z.Services {
		o, err = z.Services[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Services", za0001)
			return
		}
	}
	// string "t1"
	o = append(o, 0xa2, 0x74, 0x31)
	o = msgp.AppendInt64(o, z.SignDate)
	// string "t3"
	o = append(o, 0xa2, 0x74, 0x33)
	o = msgp.AppendInt64(o, z.StartDate)
	// string "t4"
	o = append(o, 0xa2, 0x74, 0x34)
	o = msgp.AppendInt64(o, z.EndDate)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CreateContractParam) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "pa":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PartyA")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "PartyA")
					return
				}
				switch msgp.UnsafeString(field) {
				case "a":
					bts, err = msgp.ReadExtensionBytes(bts, &z.PartyA.Address)
					if err != nil {
						err = msgp.WrapError(err, "PartyA", "Address")
						return
					}
				case "n":
					z.PartyA.Name, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "PartyA", "Name")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "PartyA")
						return
					}
				}
			}
		case "pb":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PartyB")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "PartyB")
					return
				}
				switch msgp.UnsafeString(field) {
				case "a":
					bts, err = msgp.ReadExtensionBytes(bts, &z.PartyB.Address)
					if err != nil {
						err = msgp.WrapError(err, "PartyB", "Address")
						return
					}
				case "n":
					z.PartyB.Name, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "PartyB", "Name")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "PartyB")
						return
					}
				}
			}
		case "pre":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Previous)
			if err != nil {
				err = msgp.WrapError(err, "Previous")
				return
			}
		case "s":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Services")
				return
			}
			if cap(z.Services) >= int(zb0004) {
				z.Services = (z.Services)[:zb0004]
			} else {
				z.Services = make([]ContractService, zb0004)
			}
			for za0001 := range z.Services {
				bts, err = z.Services[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Services", za0001)
					return
				}
			}
		case "t1":
			z.SignDate, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SignDate")
				return
			}
		case "t3":
			z.StartDate, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StartDate")
				return
			}
		case "t4":
			z.EndDate, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "EndDate")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CreateContractParam) Msgsize() (s int) {
	s = 1 + 3 + 1 + 2 + msgp.ExtensionPrefixSize + z.PartyA.Address.Len() + 2 + msgp.StringPrefixSize + len(z.PartyA.Name) + 3 + 1 + 2 + msgp.ExtensionPrefixSize + z.PartyB.Address.Len() + 2 + msgp.StringPrefixSize + len(z.PartyB.Name) + 4 + msgp.ExtensionPrefixSize + z.Previous.Len() + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.Services {
		s += z.Services[za0001].Msgsize()
	}
	s += 3 + msgp.Int64Size + 3 + msgp.Int64Size + 3 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DLRStatus) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int
		zb0001, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = DLRStatus(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z DLRStatus) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt(int(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z DLRStatus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DLRStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int
		zb0001, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = DLRStatus(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z DLRStatus) Msgsize() (s int) {
	s = msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SendingStatus) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int
		zb0001, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = SendingStatus(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z SendingStatus) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt(int(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z SendingStatus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SendingStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int
		zb0001, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = SendingStatus(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SendingStatus) Msgsize() (s int) {
	s = msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SettlementCDR) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CDRParam":
			err = z.CDRParam.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "CDRParam")
				return
			}
		case "f":
			err = dc.ReadExtension(&z.From)
			if err != nil {
				err = msgp.WrapError(err, "From")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SettlementCDR) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "CDRParam"
	err = en.Append(0x82, 0xa8, 0x43, 0x44, 0x52, 0x50, 0x61, 0x72, 0x61, 0x6d)
	if err != nil {
		return
	}
	err = z.CDRParam.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "CDRParam")
		return
	}
	// write "f"
	err = en.Append(0xa1, 0x66)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.From)
	if err != nil {
		err = msgp.WrapError(err, "From")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SettlementCDR) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "CDRParam"
	o = append(o, 0x82, 0xa8, 0x43, 0x44, 0x52, 0x50, 0x61, 0x72, 0x61, 0x6d)
	o, err = z.CDRParam.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "CDRParam")
		return
	}
	// string "f"
	o = append(o, 0xa1, 0x66)
	o, err = msgp.AppendExtension(o, &z.From)
	if err != nil {
		err = msgp.WrapError(err, "From")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SettlementCDR) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CDRParam":
			bts, err = z.CDRParam.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "CDRParam")
				return
			}
		case "f":
			bts, err = msgp.ReadExtensionBytes(bts, &z.From)
			if err != nil {
				err = msgp.WrapError(err, "From")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SettlementCDR) Msgsize() (s int) {
	s = 1 + 9 + z.CDRParam.Msgsize() + 2 + msgp.ExtensionPrefixSize + z.From.Len()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SettlementStatus) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int
		zb0001, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = SettlementStatus(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z SettlementStatus) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt(int(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z SettlementStatus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SettlementStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int
		zb0001, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = SettlementStatus(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SettlementStatus) Msgsize() (s int) {
	s = msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SignContractParam) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			err = dc.ReadExtension(&z.ContractAddress)
			if err != nil {
				err = msgp.WrapError(err, "ContractAddress")
				return
			}
		case "cd":
			z.ConfirmDate, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ConfirmDate")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z SignContractParam) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "a"
	err = en.Append(0x82, 0xa1, 0x61)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.ContractAddress)
	if err != nil {
		err = msgp.WrapError(err, "ContractAddress")
		return
	}
	// write "cd"
	err = en.Append(0xa2, 0x63, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ConfirmDate)
	if err != nil {
		err = msgp.WrapError(err, "ConfirmDate")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z SignContractParam) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "a"
	o = append(o, 0x82, 0xa1, 0x61)
	o, err = msgp.AppendExtension(o, &z.ContractAddress)
	if err != nil {
		err = msgp.WrapError(err, "ContractAddress")
		return
	}
	// string "cd"
	o = append(o, 0xa2, 0x63, 0x64)
	o = msgp.AppendInt64(o, z.ConfirmDate)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SignContractParam) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			bts, err = msgp.ReadExtensionBytes(bts, &z.ContractAddress)
			if err != nil {
				err = msgp.WrapError(err, "ContractAddress")
				return
			}
		case "cd":
			z.ConfirmDate, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ConfirmDate")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SignContractParam) Msgsize() (s int) {
	s = 1 + 2 + msgp.ExtensionPrefixSize + z.ContractAddress.Len() + 3 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *StopParam) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ca":
			err = z.ContractAddress.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ContractAddress")
				return
			}
		case "n":
			z.StopName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "StopName")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *StopParam) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "ca"
	err = en.Append(0x82, 0xa2, 0x63, 0x61)
	if err != nil {
		return
	}
	err = z.ContractAddress.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ContractAddress")
		return
	}
	// write "n"
	err = en.Append(0xa1, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.StopName)
	if err != nil {
		err = msgp.WrapError(err, "StopName")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *StopParam) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "ca"
	o = append(o, 0x82, 0xa2, 0x63, 0x61)
	o, err = z.ContractAddress.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ContractAddress")
		return
	}
	// string "n"
	o = append(o, 0xa1, 0x6e)
	o = msgp.AppendString(o, z.StopName)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StopParam) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ca":
			bts, err = z.ContractAddress.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ContractAddress")
				return
			}
		case "n":
			z.StopName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StopName")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *StopParam) Msgsize() (s int) {
	s = 1 + 3 + z.ContractAddress.Msgsize() + 2 + msgp.StringPrefixSize + len(z.StopName)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TerminateParam) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			err = dc.ReadExtension(&z.ContractAddress)
			if err != nil {
				err = msgp.WrapError(err, "ContractAddress")
				return
			}
		case "r":
			z.Request, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Request")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z TerminateParam) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "a"
	err = en.Append(0x82, 0xa1, 0x61)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.ContractAddress)
	if err != nil {
		err = msgp.WrapError(err, "ContractAddress")
		return
	}
	// write "r"
	err = en.Append(0xa1, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Request)
	if err != nil {
		err = msgp.WrapError(err, "Request")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z TerminateParam) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "a"
	o = append(o, 0x82, 0xa1, 0x61)
	o, err = msgp.AppendExtension(o, &z.ContractAddress)
	if err != nil {
		err = msgp.WrapError(err, "ContractAddress")
		return
	}
	// string "r"
	o = append(o, 0xa1, 0x72)
	o = msgp.AppendBool(o, z.Request)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TerminateParam) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			bts, err = msgp.ReadExtensionBytes(bts, &z.ContractAddress)
			if err != nil {
				err = msgp.WrapError(err, "ContractAddress")
				return
			}
		case "r":
			z.Request, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Request")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z TerminateParam) Msgsize() (s int) {
	s = 1 + 2 + msgp.ExtensionPrefixSize + z.ContractAddress.Len() + 2 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Terminator) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			err = dc.ReadExtension(&z.Address)
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "r":
			z.Request, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Request")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Terminator) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "a"
	err = en.Append(0x82, 0xa1, 0x61)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Address)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	// write "r"
	err = en.Append(0xa1, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Request)
	if err != nil {
		err = msgp.WrapError(err, "Request")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Terminator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "a"
	o = append(o, 0x82, 0xa1, 0x61)
	o, err = msgp.AppendExtension(o, &z.Address)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	// string "r"
	o = append(o, 0xa1, 0x72)
	o = msgp.AppendBool(o, z.Request)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Terminator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Address)
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "r":
			z.Request, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Request")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Terminator) Msgsize() (s int) {
	s = 1 + 2 + msgp.ExtensionPrefixSize + z.Address.Len() + 2 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *UpdateStopParam) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ca":
			err = z.ContractAddress.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ContractAddress")
				return
			}
		case "n":
			z.StopName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "StopName")
				return
			}
		case "n2":
			z.New, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "New")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *UpdateStopParam) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "ca"
	err = en.Append(0x83, 0xa2, 0x63, 0x61)
	if err != nil {
		return
	}
	err = z.ContractAddress.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ContractAddress")
		return
	}
	// write "n"
	err = en.Append(0xa1, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.StopName)
	if err != nil {
		err = msgp.WrapError(err, "StopName")
		return
	}
	// write "n2"
	err = en.Append(0xa2, 0x6e, 0x32)
	if err != nil {
		return
	}
	err = en.WriteString(z.New)
	if err != nil {
		err = msgp.WrapError(err, "New")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *UpdateStopParam) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "ca"
	o = append(o, 0x83, 0xa2, 0x63, 0x61)
	o, err = z.ContractAddress.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ContractAddress")
		return
	}
	// string "n"
	o = append(o, 0xa1, 0x6e)
	o = msgp.AppendString(o, z.StopName)
	// string "n2"
	o = append(o, 0xa2, 0x6e, 0x32)
	o = msgp.AppendString(o, z.New)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *UpdateStopParam) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ca":
			bts, err = z.ContractAddress.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ContractAddress")
				return
			}
		case "n":
			z.StopName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StopName")
				return
			}
		case "n2":
			z.New, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "New")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *UpdateStopParam) Msgsize() (s int) {
	s = 1 + 3 + z.ContractAddress.Msgsize() + 2 + msgp.StringPrefixSize + len(z.StopName) + 3 + msgp.StringPrefixSize + len(z.New)
	return
}
