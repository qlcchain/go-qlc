package abi

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *AdminAccount) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "c":
			z.Comment, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Comment")
				return
			}
		case "v":
			z.Valid, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Valid")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z AdminAccount) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "c"
	err = en.Append(0x82, 0xa1, 0x63)
	if err != nil {
		return
	}
	err = en.WriteString(z.Comment)
	if err != nil {
		err = msgp.WrapError(err, "Comment")
		return
	}
	// write "v"
	err = en.Append(0xa1, 0x76)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Valid)
	if err != nil {
		err = msgp.WrapError(err, "Valid")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z AdminAccount) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "c"
	o = append(o, 0x82, 0xa1, 0x63)
	o = msgp.AppendString(o, z.Comment)
	// string "v"
	o = append(o, 0xa1, 0x76)
	o = msgp.AppendBool(o, z.Valid)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AdminAccount) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "c":
			z.Comment, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Comment")
				return
			}
		case "v":
			z.Valid, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Valid")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z AdminAccount) Msgsize() (s int) {
	s = 1 + 2 + msgp.StringPrefixSize + len(z.Comment) + 2 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PermNode) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "nu":
			z.NodeUrl, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "NodeUrl")
				return
			}
		case "c":
			z.Comment, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Comment")
				return
			}
		case "s":
			z.Valid, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Valid")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z PermNode) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "nu"
	err = en.Append(0x83, 0xa2, 0x6e, 0x75)
	if err != nil {
		return
	}
	err = en.WriteString(z.NodeUrl)
	if err != nil {
		err = msgp.WrapError(err, "NodeUrl")
		return
	}
	// write "c"
	err = en.Append(0xa1, 0x63)
	if err != nil {
		return
	}
	err = en.WriteString(z.Comment)
	if err != nil {
		err = msgp.WrapError(err, "Comment")
		return
	}
	// write "s"
	err = en.Append(0xa1, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Valid)
	if err != nil {
		err = msgp.WrapError(err, "Valid")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z PermNode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "nu"
	o = append(o, 0x83, 0xa2, 0x6e, 0x75)
	o = msgp.AppendString(o, z.NodeUrl)
	// string "c"
	o = append(o, 0xa1, 0x63)
	o = msgp.AppendString(o, z.Comment)
	// string "s"
	o = append(o, 0xa1, 0x73)
	o = msgp.AppendBool(o, z.Valid)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PermNode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "nu":
			z.NodeUrl, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NodeUrl")
				return
			}
		case "c":
			z.Comment, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Comment")
				return
			}
		case "s":
			z.Valid, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Valid")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z PermNode) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.NodeUrl) + 2 + msgp.StringPrefixSize + len(z.Comment) + 2 + msgp.BoolSize
	return
}
