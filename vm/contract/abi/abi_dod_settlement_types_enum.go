// Code generated by go-enum
// DO NOT EDIT!

package abi

import (
	"fmt"
	"strings"
)

const (
	// DoDSettleBillingTypeNull is a DoDSettleBillingType of type Null
	DoDSettleBillingTypeNull DoDSettleBillingType = iota
	// DoDSettleBillingTypePAYG is a DoDSettleBillingType of type PAYG
	DoDSettleBillingTypePAYG
	// DoDSettleBillingTypeDOD is a DoDSettleBillingType of type DOD
	DoDSettleBillingTypeDOD
)

const _DoDSettleBillingTypeName = "nullPAYGDOD"

var _DoDSettleBillingTypeNames = []string{
	_DoDSettleBillingTypeName[0:4],
	_DoDSettleBillingTypeName[4:8],
	_DoDSettleBillingTypeName[8:11],
}

// DoDSettleBillingTypeNames returns a list of possible string values of DoDSettleBillingType.
func DoDSettleBillingTypeNames() []string {
	tmp := make([]string, len(_DoDSettleBillingTypeNames))
	copy(tmp, _DoDSettleBillingTypeNames)
	return tmp
}

var _DoDSettleBillingTypeMap = map[DoDSettleBillingType]string{
	0: _DoDSettleBillingTypeName[0:4],
	1: _DoDSettleBillingTypeName[4:8],
	2: _DoDSettleBillingTypeName[8:11],
}

// String implements the Stringer interface.
func (x DoDSettleBillingType) String() string {
	if str, ok := _DoDSettleBillingTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DoDSettleBillingType(%d)", x)
}

var _DoDSettleBillingTypeValue = map[string]DoDSettleBillingType{
	_DoDSettleBillingTypeName[0:4]:  0,
	_DoDSettleBillingTypeName[4:8]:  1,
	_DoDSettleBillingTypeName[8:11]: 2,
}

// ParseDoDSettleBillingType attempts to convert a string to a DoDSettleBillingType
func ParseDoDSettleBillingType(name string) (DoDSettleBillingType, error) {
	if x, ok := _DoDSettleBillingTypeValue[name]; ok {
		return x, nil
	}
	return DoDSettleBillingType(0), fmt.Errorf("%s is not a valid DoDSettleBillingType, try [%s]", name, strings.Join(_DoDSettleBillingTypeNames, ", "))
}

// MarshalText implements the text marshaller method
func (x DoDSettleBillingType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *DoDSettleBillingType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDoDSettleBillingType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// DoDSettleBillingUnitNull is a DoDSettleBillingUnit of type Null
	DoDSettleBillingUnitNull DoDSettleBillingUnit = iota
	// DoDSettleBillingUnitYear is a DoDSettleBillingUnit of type Year
	DoDSettleBillingUnitYear
	// DoDSettleBillingUnitMonth is a DoDSettleBillingUnit of type Month
	DoDSettleBillingUnitMonth
	// DoDSettleBillingUnitWeek is a DoDSettleBillingUnit of type Week
	DoDSettleBillingUnitWeek
	// DoDSettleBillingUnitDay is a DoDSettleBillingUnit of type Day
	DoDSettleBillingUnitDay
	// DoDSettleBillingUnitHour is a DoDSettleBillingUnit of type Hour
	DoDSettleBillingUnitHour
	// DoDSettleBillingUnitMinute is a DoDSettleBillingUnit of type Minute
	DoDSettleBillingUnitMinute
	// DoDSettleBillingUnitSecond is a DoDSettleBillingUnit of type Second
	DoDSettleBillingUnitSecond
)

const _DoDSettleBillingUnitName = "nullyearmonthweekdayhourminutesecond"

var _DoDSettleBillingUnitNames = []string{
	_DoDSettleBillingUnitName[0:4],
	_DoDSettleBillingUnitName[4:8],
	_DoDSettleBillingUnitName[8:13],
	_DoDSettleBillingUnitName[13:17],
	_DoDSettleBillingUnitName[17:20],
	_DoDSettleBillingUnitName[20:24],
	_DoDSettleBillingUnitName[24:30],
	_DoDSettleBillingUnitName[30:36],
}

// DoDSettleBillingUnitNames returns a list of possible string values of DoDSettleBillingUnit.
func DoDSettleBillingUnitNames() []string {
	tmp := make([]string, len(_DoDSettleBillingUnitNames))
	copy(tmp, _DoDSettleBillingUnitNames)
	return tmp
}

var _DoDSettleBillingUnitMap = map[DoDSettleBillingUnit]string{
	0: _DoDSettleBillingUnitName[0:4],
	1: _DoDSettleBillingUnitName[4:8],
	2: _DoDSettleBillingUnitName[8:13],
	3: _DoDSettleBillingUnitName[13:17],
	4: _DoDSettleBillingUnitName[17:20],
	5: _DoDSettleBillingUnitName[20:24],
	6: _DoDSettleBillingUnitName[24:30],
	7: _DoDSettleBillingUnitName[30:36],
}

// String implements the Stringer interface.
func (x DoDSettleBillingUnit) String() string {
	if str, ok := _DoDSettleBillingUnitMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DoDSettleBillingUnit(%d)", x)
}

var _DoDSettleBillingUnitValue = map[string]DoDSettleBillingUnit{
	_DoDSettleBillingUnitName[0:4]:   0,
	_DoDSettleBillingUnitName[4:8]:   1,
	_DoDSettleBillingUnitName[8:13]:  2,
	_DoDSettleBillingUnitName[13:17]: 3,
	_DoDSettleBillingUnitName[17:20]: 4,
	_DoDSettleBillingUnitName[20:24]: 5,
	_DoDSettleBillingUnitName[24:30]: 6,
	_DoDSettleBillingUnitName[30:36]: 7,
}

// ParseDoDSettleBillingUnit attempts to convert a string to a DoDSettleBillingUnit
func ParseDoDSettleBillingUnit(name string) (DoDSettleBillingUnit, error) {
	if x, ok := _DoDSettleBillingUnitValue[name]; ok {
		return x, nil
	}
	return DoDSettleBillingUnit(0), fmt.Errorf("%s is not a valid DoDSettleBillingUnit, try [%s]", name, strings.Join(_DoDSettleBillingUnitNames, ", "))
}

// MarshalText implements the text marshaller method
func (x DoDSettleBillingUnit) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *DoDSettleBillingUnit) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDoDSettleBillingUnit(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// DoDSettleContractStateNull is a DoDSettleContractState of type Null
	DoDSettleContractStateNull DoDSettleContractState = iota
	// DoDSettleContractStateRequest is a DoDSettleContractState of type Request
	DoDSettleContractStateRequest
	// DoDSettleContractStateConfirmed is a DoDSettleContractState of type Confirmed
	DoDSettleContractStateConfirmed
	// DoDSettleContractStateRejected is a DoDSettleContractState of type Rejected
	DoDSettleContractStateRejected
)

const _DoDSettleContractStateName = "nullrequestconfirmedrejected"

var _DoDSettleContractStateNames = []string{
	_DoDSettleContractStateName[0:4],
	_DoDSettleContractStateName[4:11],
	_DoDSettleContractStateName[11:20],
	_DoDSettleContractStateName[20:28],
}

// DoDSettleContractStateNames returns a list of possible string values of DoDSettleContractState.
func DoDSettleContractStateNames() []string {
	tmp := make([]string, len(_DoDSettleContractStateNames))
	copy(tmp, _DoDSettleContractStateNames)
	return tmp
}

var _DoDSettleContractStateMap = map[DoDSettleContractState]string{
	0: _DoDSettleContractStateName[0:4],
	1: _DoDSettleContractStateName[4:11],
	2: _DoDSettleContractStateName[11:20],
	3: _DoDSettleContractStateName[20:28],
}

// String implements the Stringer interface.
func (x DoDSettleContractState) String() string {
	if str, ok := _DoDSettleContractStateMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DoDSettleContractState(%d)", x)
}

var _DoDSettleContractStateValue = map[string]DoDSettleContractState{
	_DoDSettleContractStateName[0:4]:   0,
	_DoDSettleContractStateName[4:11]:  1,
	_DoDSettleContractStateName[11:20]: 2,
	_DoDSettleContractStateName[20:28]: 3,
}

// ParseDoDSettleContractState attempts to convert a string to a DoDSettleContractState
func ParseDoDSettleContractState(name string) (DoDSettleContractState, error) {
	if x, ok := _DoDSettleContractStateValue[name]; ok {
		return x, nil
	}
	return DoDSettleContractState(0), fmt.Errorf("%s is not a valid DoDSettleContractState, try [%s]", name, strings.Join(_DoDSettleContractStateNames, ", "))
}

// MarshalText implements the text marshaller method
func (x DoDSettleContractState) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *DoDSettleContractState) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDoDSettleContractState(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// DoDSettleOrderStateNull is a DoDSettleOrderState of type Null
	DoDSettleOrderStateNull DoDSettleOrderState = iota
	// DoDSettleOrderStateSuccess is a DoDSettleOrderState of type Success
	DoDSettleOrderStateSuccess
	// DoDSettleOrderStateComplete is a DoDSettleOrderState of type Complete
	DoDSettleOrderStateComplete
	// DoDSettleOrderStateFail is a DoDSettleOrderState of type Fail
	DoDSettleOrderStateFail
)

const _DoDSettleOrderStateName = "nullsuccesscompletefail"

var _DoDSettleOrderStateNames = []string{
	_DoDSettleOrderStateName[0:4],
	_DoDSettleOrderStateName[4:11],
	_DoDSettleOrderStateName[11:19],
	_DoDSettleOrderStateName[19:23],
}

// DoDSettleOrderStateNames returns a list of possible string values of DoDSettleOrderState.
func DoDSettleOrderStateNames() []string {
	tmp := make([]string, len(_DoDSettleOrderStateNames))
	copy(tmp, _DoDSettleOrderStateNames)
	return tmp
}

var _DoDSettleOrderStateMap = map[DoDSettleOrderState]string{
	0: _DoDSettleOrderStateName[0:4],
	1: _DoDSettleOrderStateName[4:11],
	2: _DoDSettleOrderStateName[11:19],
	3: _DoDSettleOrderStateName[19:23],
}

// String implements the Stringer interface.
func (x DoDSettleOrderState) String() string {
	if str, ok := _DoDSettleOrderStateMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DoDSettleOrderState(%d)", x)
}

var _DoDSettleOrderStateValue = map[string]DoDSettleOrderState{
	_DoDSettleOrderStateName[0:4]:   0,
	_DoDSettleOrderStateName[4:11]:  1,
	_DoDSettleOrderStateName[11:19]: 2,
	_DoDSettleOrderStateName[19:23]: 3,
}

// ParseDoDSettleOrderState attempts to convert a string to a DoDSettleOrderState
func ParseDoDSettleOrderState(name string) (DoDSettleOrderState, error) {
	if x, ok := _DoDSettleOrderStateValue[name]; ok {
		return x, nil
	}
	return DoDSettleOrderState(0), fmt.Errorf("%s is not a valid DoDSettleOrderState, try [%s]", name, strings.Join(_DoDSettleOrderStateNames, ", "))
}

// MarshalText implements the text marshaller method
func (x DoDSettleOrderState) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *DoDSettleOrderState) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDoDSettleOrderState(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// DoDSettleOrderTypeNull is a DoDSettleOrderType of type Null
	DoDSettleOrderTypeNull DoDSettleOrderType = iota
	// DoDSettleOrderTypeCreate is a DoDSettleOrderType of type Create
	DoDSettleOrderTypeCreate
	// DoDSettleOrderTypeChange is a DoDSettleOrderType of type Change
	DoDSettleOrderTypeChange
	// DoDSettleOrderTypeTerminate is a DoDSettleOrderType of type Terminate
	DoDSettleOrderTypeTerminate
)

const _DoDSettleOrderTypeName = "nullcreatechangeterminate"

var _DoDSettleOrderTypeNames = []string{
	_DoDSettleOrderTypeName[0:4],
	_DoDSettleOrderTypeName[4:10],
	_DoDSettleOrderTypeName[10:16],
	_DoDSettleOrderTypeName[16:25],
}

// DoDSettleOrderTypeNames returns a list of possible string values of DoDSettleOrderType.
func DoDSettleOrderTypeNames() []string {
	tmp := make([]string, len(_DoDSettleOrderTypeNames))
	copy(tmp, _DoDSettleOrderTypeNames)
	return tmp
}

var _DoDSettleOrderTypeMap = map[DoDSettleOrderType]string{
	0: _DoDSettleOrderTypeName[0:4],
	1: _DoDSettleOrderTypeName[4:10],
	2: _DoDSettleOrderTypeName[10:16],
	3: _DoDSettleOrderTypeName[16:25],
}

// String implements the Stringer interface.
func (x DoDSettleOrderType) String() string {
	if str, ok := _DoDSettleOrderTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DoDSettleOrderType(%d)", x)
}

var _DoDSettleOrderTypeValue = map[string]DoDSettleOrderType{
	_DoDSettleOrderTypeName[0:4]:   0,
	_DoDSettleOrderTypeName[4:10]:  1,
	_DoDSettleOrderTypeName[10:16]: 2,
	_DoDSettleOrderTypeName[16:25]: 3,
}

// ParseDoDSettleOrderType attempts to convert a string to a DoDSettleOrderType
func ParseDoDSettleOrderType(name string) (DoDSettleOrderType, error) {
	if x, ok := _DoDSettleOrderTypeValue[name]; ok {
		return x, nil
	}
	return DoDSettleOrderType(0), fmt.Errorf("%s is not a valid DoDSettleOrderType, try [%s]", name, strings.Join(_DoDSettleOrderTypeNames, ", "))
}

// MarshalText implements the text marshaller method
func (x DoDSettleOrderType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *DoDSettleOrderType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDoDSettleOrderType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// DoDSettlePaymentTypeNull is a DoDSettlePaymentType of type Null
	DoDSettlePaymentTypeNull DoDSettlePaymentType = iota
	// DoDSettlePaymentTypeInvoice is a DoDSettlePaymentType of type Invoice
	DoDSettlePaymentTypeInvoice
	// DoDSettlePaymentTypeStableCoin is a DoDSettlePaymentType of type StableCoin
	DoDSettlePaymentTypeStableCoin
)

const _DoDSettlePaymentTypeName = "nullinvoicestableCoin"

var _DoDSettlePaymentTypeNames = []string{
	_DoDSettlePaymentTypeName[0:4],
	_DoDSettlePaymentTypeName[4:11],
	_DoDSettlePaymentTypeName[11:21],
}

// DoDSettlePaymentTypeNames returns a list of possible string values of DoDSettlePaymentType.
func DoDSettlePaymentTypeNames() []string {
	tmp := make([]string, len(_DoDSettlePaymentTypeNames))
	copy(tmp, _DoDSettlePaymentTypeNames)
	return tmp
}

var _DoDSettlePaymentTypeMap = map[DoDSettlePaymentType]string{
	0: _DoDSettlePaymentTypeName[0:4],
	1: _DoDSettlePaymentTypeName[4:11],
	2: _DoDSettlePaymentTypeName[11:21],
}

// String implements the Stringer interface.
func (x DoDSettlePaymentType) String() string {
	if str, ok := _DoDSettlePaymentTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DoDSettlePaymentType(%d)", x)
}

var _DoDSettlePaymentTypeValue = map[string]DoDSettlePaymentType{
	_DoDSettlePaymentTypeName[0:4]:   0,
	_DoDSettlePaymentTypeName[4:11]:  1,
	_DoDSettlePaymentTypeName[11:21]: 2,
}

// ParseDoDSettlePaymentType attempts to convert a string to a DoDSettlePaymentType
func ParseDoDSettlePaymentType(name string) (DoDSettlePaymentType, error) {
	if x, ok := _DoDSettlePaymentTypeValue[name]; ok {
		return x, nil
	}
	return DoDSettlePaymentType(0), fmt.Errorf("%s is not a valid DoDSettlePaymentType, try [%s]", name, strings.Join(_DoDSettlePaymentTypeNames, ", "))
}

// MarshalText implements the text marshaller method
func (x DoDSettlePaymentType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *DoDSettlePaymentType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDoDSettlePaymentType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// DoDSettleResponseActionNull is a DoDSettleResponseAction of type Null
	DoDSettleResponseActionNull DoDSettleResponseAction = iota
	// DoDSettleResponseActionConfirm is a DoDSettleResponseAction of type Confirm
	DoDSettleResponseActionConfirm
	// DoDSettleResponseActionReject is a DoDSettleResponseAction of type Reject
	DoDSettleResponseActionReject
)

const _DoDSettleResponseActionName = "nullconfirmreject"

var _DoDSettleResponseActionNames = []string{
	_DoDSettleResponseActionName[0:4],
	_DoDSettleResponseActionName[4:11],
	_DoDSettleResponseActionName[11:17],
}

// DoDSettleResponseActionNames returns a list of possible string values of DoDSettleResponseAction.
func DoDSettleResponseActionNames() []string {
	tmp := make([]string, len(_DoDSettleResponseActionNames))
	copy(tmp, _DoDSettleResponseActionNames)
	return tmp
}

var _DoDSettleResponseActionMap = map[DoDSettleResponseAction]string{
	0: _DoDSettleResponseActionName[0:4],
	1: _DoDSettleResponseActionName[4:11],
	2: _DoDSettleResponseActionName[11:17],
}

// String implements the Stringer interface.
func (x DoDSettleResponseAction) String() string {
	if str, ok := _DoDSettleResponseActionMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DoDSettleResponseAction(%d)", x)
}

var _DoDSettleResponseActionValue = map[string]DoDSettleResponseAction{
	_DoDSettleResponseActionName[0:4]:   0,
	_DoDSettleResponseActionName[4:11]:  1,
	_DoDSettleResponseActionName[11:17]: 2,
}

// ParseDoDSettleResponseAction attempts to convert a string to a DoDSettleResponseAction
func ParseDoDSettleResponseAction(name string) (DoDSettleResponseAction, error) {
	if x, ok := _DoDSettleResponseActionValue[name]; ok {
		return x, nil
	}
	return DoDSettleResponseAction(0), fmt.Errorf("%s is not a valid DoDSettleResponseAction, try [%s]", name, strings.Join(_DoDSettleResponseActionNames, ", "))
}

// MarshalText implements the text marshaller method
func (x DoDSettleResponseAction) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *DoDSettleResponseAction) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDoDSettleResponseAction(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// DoDSettleServiceClassNull is a DoDSettleServiceClass of type Null
	DoDSettleServiceClassNull DoDSettleServiceClass = iota
	// DoDSettleServiceClassGold is a DoDSettleServiceClass of type Gold
	DoDSettleServiceClassGold
	// DoDSettleServiceClassSilver is a DoDSettleServiceClass of type Silver
	DoDSettleServiceClassSilver
	// DoDSettleServiceClassBronze is a DoDSettleServiceClass of type Bronze
	DoDSettleServiceClassBronze
)

const _DoDSettleServiceClassName = "nullgoldsilverbronze"

var _DoDSettleServiceClassNames = []string{
	_DoDSettleServiceClassName[0:4],
	_DoDSettleServiceClassName[4:8],
	_DoDSettleServiceClassName[8:14],
	_DoDSettleServiceClassName[14:20],
}

// DoDSettleServiceClassNames returns a list of possible string values of DoDSettleServiceClass.
func DoDSettleServiceClassNames() []string {
	tmp := make([]string, len(_DoDSettleServiceClassNames))
	copy(tmp, _DoDSettleServiceClassNames)
	return tmp
}

var _DoDSettleServiceClassMap = map[DoDSettleServiceClass]string{
	0: _DoDSettleServiceClassName[0:4],
	1: _DoDSettleServiceClassName[4:8],
	2: _DoDSettleServiceClassName[8:14],
	3: _DoDSettleServiceClassName[14:20],
}

// String implements the Stringer interface.
func (x DoDSettleServiceClass) String() string {
	if str, ok := _DoDSettleServiceClassMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DoDSettleServiceClass(%d)", x)
}

var _DoDSettleServiceClassValue = map[string]DoDSettleServiceClass{
	_DoDSettleServiceClassName[0:4]:   0,
	_DoDSettleServiceClassName[4:8]:   1,
	_DoDSettleServiceClassName[8:14]:  2,
	_DoDSettleServiceClassName[14:20]: 3,
}

// ParseDoDSettleServiceClass attempts to convert a string to a DoDSettleServiceClass
func ParseDoDSettleServiceClass(name string) (DoDSettleServiceClass, error) {
	if x, ok := _DoDSettleServiceClassValue[name]; ok {
		return x, nil
	}
	return DoDSettleServiceClass(0), fmt.Errorf("%s is not a valid DoDSettleServiceClass, try [%s]", name, strings.Join(_DoDSettleServiceClassNames, ", "))
}

// MarshalText implements the text marshaller method
func (x DoDSettleServiceClass) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *DoDSettleServiceClass) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDoDSettleServiceClass(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
