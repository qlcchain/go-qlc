// Code generated by go-enum
// DO NOT EDIT!

package abi

import (
	"fmt"
	"strings"
)

const (
	// DoDBillingTypePAYG is a DoDBillingType of type PAYG
	DoDBillingTypePAYG DoDBillingType = iota + 1
	// DoDBillingTypeDOD is a DoDBillingType of type DOD
	DoDBillingTypeDOD
)

const _DoDBillingTypeName = "PAYGDOD"

var _DoDBillingTypeNames = []string{
	_DoDBillingTypeName[0:4],
	_DoDBillingTypeName[4:7],
}

// DoDBillingTypeNames returns a list of possible string values of DoDBillingType.
func DoDBillingTypeNames() []string {
	tmp := make([]string, len(_DoDBillingTypeNames))
	copy(tmp, _DoDBillingTypeNames)
	return tmp
}

var _DoDBillingTypeMap = map[DoDBillingType]string{
	1: _DoDBillingTypeName[0:4],
	2: _DoDBillingTypeName[4:7],
}

// String implements the Stringer interface.
func (x DoDBillingType) String() string {
	if str, ok := _DoDBillingTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DoDBillingType(%d)", x)
}

var _DoDBillingTypeValue = map[string]DoDBillingType{
	_DoDBillingTypeName[0:4]: 1,
	_DoDBillingTypeName[4:7]: 2,
}

// ParseDoDBillingType attempts to convert a string to a DoDBillingType
func ParseDoDBillingType(name string) (DoDBillingType, error) {
	if x, ok := _DoDBillingTypeValue[name]; ok {
		return x, nil
	}
	return DoDBillingType(0), fmt.Errorf("%s is not a valid DoDBillingType, try [%s]", name, strings.Join(_DoDBillingTypeNames, ", "))
}

// MarshalText implements the text marshaller method
func (x DoDBillingType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *DoDBillingType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDoDBillingType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// DoDOrderOperationCreate is a DoDOrderOperation of type Create
	DoDOrderOperationCreate DoDOrderOperation = iota + 1
	// DoDOrderOperationChange is a DoDOrderOperation of type Change
	DoDOrderOperationChange
	// DoDOrderOperationTerminate is a DoDOrderOperation of type Terminate
	DoDOrderOperationTerminate
	// DoDOrderOperationFail is a DoDOrderOperation of type Fail
	DoDOrderOperationFail
)

const _DoDOrderOperationName = "createchangeterminatefail"

var _DoDOrderOperationNames = []string{
	_DoDOrderOperationName[0:6],
	_DoDOrderOperationName[6:12],
	_DoDOrderOperationName[12:21],
	_DoDOrderOperationName[21:25],
}

// DoDOrderOperationNames returns a list of possible string values of DoDOrderOperation.
func DoDOrderOperationNames() []string {
	tmp := make([]string, len(_DoDOrderOperationNames))
	copy(tmp, _DoDOrderOperationNames)
	return tmp
}

var _DoDOrderOperationMap = map[DoDOrderOperation]string{
	1: _DoDOrderOperationName[0:6],
	2: _DoDOrderOperationName[6:12],
	3: _DoDOrderOperationName[12:21],
	4: _DoDOrderOperationName[21:25],
}

// String implements the Stringer interface.
func (x DoDOrderOperation) String() string {
	if str, ok := _DoDOrderOperationMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DoDOrderOperation(%d)", x)
}

var _DoDOrderOperationValue = map[string]DoDOrderOperation{
	_DoDOrderOperationName[0:6]:   1,
	_DoDOrderOperationName[6:12]:  2,
	_DoDOrderOperationName[12:21]: 3,
	_DoDOrderOperationName[21:25]: 4,
}

// ParseDoDOrderOperation attempts to convert a string to a DoDOrderOperation
func ParseDoDOrderOperation(name string) (DoDOrderOperation, error) {
	if x, ok := _DoDOrderOperationValue[name]; ok {
		return x, nil
	}
	return DoDOrderOperation(0), fmt.Errorf("%s is not a valid DoDOrderOperation, try [%s]", name, strings.Join(_DoDOrderOperationNames, ", "))
}

// MarshalText implements the text marshaller method
func (x DoDOrderOperation) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *DoDOrderOperation) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDoDOrderOperation(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// DoDPaymentTypeInvoice is a DoDPaymentType of type Invoice
	DoDPaymentTypeInvoice DoDPaymentType = iota + 1
	// DoDPaymentTypeStableCoin is a DoDPaymentType of type StableCoin
	DoDPaymentTypeStableCoin
)

const _DoDPaymentTypeName = "invoicestableCoin"

var _DoDPaymentTypeNames = []string{
	_DoDPaymentTypeName[0:7],
	_DoDPaymentTypeName[7:17],
}

// DoDPaymentTypeNames returns a list of possible string values of DoDPaymentType.
func DoDPaymentTypeNames() []string {
	tmp := make([]string, len(_DoDPaymentTypeNames))
	copy(tmp, _DoDPaymentTypeNames)
	return tmp
}

var _DoDPaymentTypeMap = map[DoDPaymentType]string{
	1: _DoDPaymentTypeName[0:7],
	2: _DoDPaymentTypeName[7:17],
}

// String implements the Stringer interface.
func (x DoDPaymentType) String() string {
	if str, ok := _DoDPaymentTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DoDPaymentType(%d)", x)
}

var _DoDPaymentTypeValue = map[string]DoDPaymentType{
	_DoDPaymentTypeName[0:7]:  1,
	_DoDPaymentTypeName[7:17]: 2,
}

// ParseDoDPaymentType attempts to convert a string to a DoDPaymentType
func ParseDoDPaymentType(name string) (DoDPaymentType, error) {
	if x, ok := _DoDPaymentTypeValue[name]; ok {
		return x, nil
	}
	return DoDPaymentType(0), fmt.Errorf("%s is not a valid DoDPaymentType, try [%s]", name, strings.Join(_DoDPaymentTypeNames, ", "))
}

// MarshalText implements the text marshaller method
func (x DoDPaymentType) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *DoDPaymentType) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDoDPaymentType(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// DoDResponseActionConfirm is a DoDResponseAction of type Confirm
	DoDResponseActionConfirm DoDResponseAction = iota + 1
	// DoDResponseActionReject is a DoDResponseAction of type Reject
	DoDResponseActionReject
)

const _DoDResponseActionName = "confirmreject"

var _DoDResponseActionNames = []string{
	_DoDResponseActionName[0:7],
	_DoDResponseActionName[7:13],
}

// DoDResponseActionNames returns a list of possible string values of DoDResponseAction.
func DoDResponseActionNames() []string {
	tmp := make([]string, len(_DoDResponseActionNames))
	copy(tmp, _DoDResponseActionNames)
	return tmp
}

var _DoDResponseActionMap = map[DoDResponseAction]string{
	1: _DoDResponseActionName[0:7],
	2: _DoDResponseActionName[7:13],
}

// String implements the Stringer interface.
func (x DoDResponseAction) String() string {
	if str, ok := _DoDResponseActionMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DoDResponseAction(%d)", x)
}

var _DoDResponseActionValue = map[string]DoDResponseAction{
	_DoDResponseActionName[0:7]:  1,
	_DoDResponseActionName[7:13]: 2,
}

// ParseDoDResponseAction attempts to convert a string to a DoDResponseAction
func ParseDoDResponseAction(name string) (DoDResponseAction, error) {
	if x, ok := _DoDResponseActionValue[name]; ok {
		return x, nil
	}
	return DoDResponseAction(0), fmt.Errorf("%s is not a valid DoDResponseAction, try [%s]", name, strings.Join(_DoDResponseActionNames, ", "))
}

// MarshalText implements the text marshaller method
func (x DoDResponseAction) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *DoDResponseAction) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDoDResponseAction(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// DoDServiceClassGold is a DoDServiceClass of type Gold
	DoDServiceClassGold DoDServiceClass = iota + 1
	// DoDServiceClassSilver is a DoDServiceClass of type Silver
	DoDServiceClassSilver
	// DoDServiceClassBronze is a DoDServiceClass of type Bronze
	DoDServiceClassBronze
)

const _DoDServiceClassName = "GoldSilverBronze"

var _DoDServiceClassNames = []string{
	_DoDServiceClassName[0:4],
	_DoDServiceClassName[4:10],
	_DoDServiceClassName[10:16],
}

// DoDServiceClassNames returns a list of possible string values of DoDServiceClass.
func DoDServiceClassNames() []string {
	tmp := make([]string, len(_DoDServiceClassNames))
	copy(tmp, _DoDServiceClassNames)
	return tmp
}

var _DoDServiceClassMap = map[DoDServiceClass]string{
	1: _DoDServiceClassName[0:4],
	2: _DoDServiceClassName[4:10],
	3: _DoDServiceClassName[10:16],
}

// String implements the Stringer interface.
func (x DoDServiceClass) String() string {
	if str, ok := _DoDServiceClassMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DoDServiceClass(%d)", x)
}

var _DoDServiceClassValue = map[string]DoDServiceClass{
	_DoDServiceClassName[0:4]:   1,
	_DoDServiceClassName[4:10]:  2,
	_DoDServiceClassName[10:16]: 3,
}

// ParseDoDServiceClass attempts to convert a string to a DoDServiceClass
func ParseDoDServiceClass(name string) (DoDServiceClass, error) {
	if x, ok := _DoDServiceClassValue[name]; ok {
		return x, nil
	}
	return DoDServiceClass(0), fmt.Errorf("%s is not a valid DoDServiceClass, try [%s]", name, strings.Join(_DoDServiceClassNames, ", "))
}

// MarshalText implements the text marshaller method
func (x DoDServiceClass) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *DoDServiceClass) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDoDServiceClass(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// DoDSettleOrderStateCreateRequest is a DoDSettleOrderState of type CreateRequest
	DoDSettleOrderStateCreateRequest DoDSettleOrderState = iota + 1
	// DoDSettleOrderStateCreateConfirmed is a DoDSettleOrderState of type CreateConfirmed
	DoDSettleOrderStateCreateConfirmed
	// DoDSettleOrderStateCreateSend is a DoDSettleOrderState of type CreateSend
	DoDSettleOrderStateCreateSend
	// DoDSettleOrderStateChangeRequest is a DoDSettleOrderState of type ChangeRequest
	DoDSettleOrderStateChangeRequest
	// DoDSettleOrderStateChangeConfirmed is a DoDSettleOrderState of type ChangeConfirmed
	DoDSettleOrderStateChangeConfirmed
	// DoDSettleOrderStateChangeSend is a DoDSettleOrderState of type ChangeSend
	DoDSettleOrderStateChangeSend
	// DoDSettleOrderStateTerminateRequest is a DoDSettleOrderState of type TerminateRequest
	DoDSettleOrderStateTerminateRequest
	// DoDSettleOrderStateTerminateConfirmed is a DoDSettleOrderState of type TerminateConfirmed
	DoDSettleOrderStateTerminateConfirmed
	// DoDSettleOrderStateTerminateSend is a DoDSettleOrderState of type TerminateSend
	DoDSettleOrderStateTerminateSend
	// DoDSettleOrderStateRejected is a DoDSettleOrderState of type Rejected
	DoDSettleOrderStateRejected
	// DoDSettleOrderStateFailed is a DoDSettleOrderState of type Failed
	DoDSettleOrderStateFailed
	// DoDSettleOrderStateComplete is a DoDSettleOrderState of type Complete
	DoDSettleOrderStateComplete
)

const _DoDSettleOrderStateName = "CreateRequestCreateConfirmedCreateSendChangeRequestChangeConfirmedChangeSendTerminateRequestTerminateConfirmedTerminateSendRejectedFailedComplete"

var _DoDSettleOrderStateNames = []string{
	_DoDSettleOrderStateName[0:13],
	_DoDSettleOrderStateName[13:28],
	_DoDSettleOrderStateName[28:38],
	_DoDSettleOrderStateName[38:51],
	_DoDSettleOrderStateName[51:66],
	_DoDSettleOrderStateName[66:76],
	_DoDSettleOrderStateName[76:92],
	_DoDSettleOrderStateName[92:110],
	_DoDSettleOrderStateName[110:123],
	_DoDSettleOrderStateName[123:131],
	_DoDSettleOrderStateName[131:137],
	_DoDSettleOrderStateName[137:145],
}

// DoDSettleOrderStateNames returns a list of possible string values of DoDSettleOrderState.
func DoDSettleOrderStateNames() []string {
	tmp := make([]string, len(_DoDSettleOrderStateNames))
	copy(tmp, _DoDSettleOrderStateNames)
	return tmp
}

var _DoDSettleOrderStateMap = map[DoDSettleOrderState]string{
	1:  _DoDSettleOrderStateName[0:13],
	2:  _DoDSettleOrderStateName[13:28],
	3:  _DoDSettleOrderStateName[28:38],
	4:  _DoDSettleOrderStateName[38:51],
	5:  _DoDSettleOrderStateName[51:66],
	6:  _DoDSettleOrderStateName[66:76],
	7:  _DoDSettleOrderStateName[76:92],
	8:  _DoDSettleOrderStateName[92:110],
	9:  _DoDSettleOrderStateName[110:123],
	10: _DoDSettleOrderStateName[123:131],
	11: _DoDSettleOrderStateName[131:137],
	12: _DoDSettleOrderStateName[137:145],
}

// String implements the Stringer interface.
func (x DoDSettleOrderState) String() string {
	if str, ok := _DoDSettleOrderStateMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DoDSettleOrderState(%d)", x)
}

var _DoDSettleOrderStateValue = map[string]DoDSettleOrderState{
	_DoDSettleOrderStateName[0:13]:    1,
	_DoDSettleOrderStateName[13:28]:   2,
	_DoDSettleOrderStateName[28:38]:   3,
	_DoDSettleOrderStateName[38:51]:   4,
	_DoDSettleOrderStateName[51:66]:   5,
	_DoDSettleOrderStateName[66:76]:   6,
	_DoDSettleOrderStateName[76:92]:   7,
	_DoDSettleOrderStateName[92:110]:  8,
	_DoDSettleOrderStateName[110:123]: 9,
	_DoDSettleOrderStateName[123:131]: 10,
	_DoDSettleOrderStateName[131:137]: 11,
	_DoDSettleOrderStateName[137:145]: 12,
}

// ParseDoDSettleOrderState attempts to convert a string to a DoDSettleOrderState
func ParseDoDSettleOrderState(name string) (DoDSettleOrderState, error) {
	if x, ok := _DoDSettleOrderStateValue[name]; ok {
		return x, nil
	}
	return DoDSettleOrderState(0), fmt.Errorf("%s is not a valid DoDSettleOrderState, try [%s]", name, strings.Join(_DoDSettleOrderStateNames, ", "))
}

// MarshalText implements the text marshaller method
func (x DoDSettleOrderState) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *DoDSettleOrderState) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDoDSettleOrderState(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// DodBillingUnitYear is a DodBillingUnit of type Year
	DodBillingUnitYear DodBillingUnit = iota + 1
	// DodBillingUnitMonth is a DodBillingUnit of type Month
	DodBillingUnitMonth
	// DodBillingUnitWeek is a DodBillingUnit of type Week
	DodBillingUnitWeek
	// DodBillingUnitDay is a DodBillingUnit of type Day
	DodBillingUnitDay
	// DodBillingUnitHour is a DodBillingUnit of type Hour
	DodBillingUnitHour
	// DodBillingUnitMinute is a DodBillingUnit of type Minute
	DodBillingUnitMinute
	// DodBillingUnitSecond is a DodBillingUnit of type Second
	DodBillingUnitSecond
)

const _DodBillingUnitName = "yearmonthweekdayhourminutesecond"

var _DodBillingUnitNames = []string{
	_DodBillingUnitName[0:4],
	_DodBillingUnitName[4:9],
	_DodBillingUnitName[9:13],
	_DodBillingUnitName[13:16],
	_DodBillingUnitName[16:20],
	_DodBillingUnitName[20:26],
	_DodBillingUnitName[26:32],
}

// DodBillingUnitNames returns a list of possible string values of DodBillingUnit.
func DodBillingUnitNames() []string {
	tmp := make([]string, len(_DodBillingUnitNames))
	copy(tmp, _DodBillingUnitNames)
	return tmp
}

var _DodBillingUnitMap = map[DodBillingUnit]string{
	1: _DodBillingUnitName[0:4],
	2: _DodBillingUnitName[4:9],
	3: _DodBillingUnitName[9:13],
	4: _DodBillingUnitName[13:16],
	5: _DodBillingUnitName[16:20],
	6: _DodBillingUnitName[20:26],
	7: _DodBillingUnitName[26:32],
}

// String implements the Stringer interface.
func (x DodBillingUnit) String() string {
	if str, ok := _DodBillingUnitMap[x]; ok {
		return str
	}
	return fmt.Sprintf("DodBillingUnit(%d)", x)
}

var _DodBillingUnitValue = map[string]DodBillingUnit{
	_DodBillingUnitName[0:4]:   1,
	_DodBillingUnitName[4:9]:   2,
	_DodBillingUnitName[9:13]:  3,
	_DodBillingUnitName[13:16]: 4,
	_DodBillingUnitName[16:20]: 5,
	_DodBillingUnitName[20:26]: 6,
	_DodBillingUnitName[26:32]: 7,
}

// ParseDodBillingUnit attempts to convert a string to a DodBillingUnit
func ParseDodBillingUnit(name string) (DodBillingUnit, error) {
	if x, ok := _DodBillingUnitValue[name]; ok {
		return x, nil
	}
	return DodBillingUnit(0), fmt.Errorf("%s is not a valid DodBillingUnit, try [%s]", name, strings.Join(_DodBillingUnitNames, ", "))
}

// MarshalText implements the text marshaller method
func (x DodBillingUnit) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *DodBillingUnit) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseDodBillingUnit(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
