package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *PovAuxHeader) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "amb":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "AuxMerkleBranch")
				return
			}
			if cap(z.AuxMerkleBranch) >= int(zb0002) {
				z.AuxMerkleBranch = (z.AuxMerkleBranch)[:zb0002]
			} else {
				z.AuxMerkleBranch = make([]*Hash, zb0002)
			}
			for za0001 := range z.AuxMerkleBranch {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "AuxMerkleBranch", za0001)
						return
					}
					z.AuxMerkleBranch[za0001] = nil
				} else {
					if z.AuxMerkleBranch[za0001] == nil {
						z.AuxMerkleBranch[za0001] = new(Hash)
					}
					err = z.AuxMerkleBranch[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "AuxMerkleBranch", za0001)
						return
					}
				}
			}
		case "ami":
			z.AuxMerkleIndex, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "AuxMerkleIndex")
				return
			}
		case "pcbtx":
			err = z.ParCoinBaseTx.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ParCoinBaseTx")
				return
			}
		case "pmi":
			z.ParMerkleIndex, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ParMerkleIndex")
				return
			}
		case "pbh":
			err = z.ParBlockHeader.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ParBlockHeader")
				return
			}
		case "ph":
			err = dc.ReadExtension(&z.ParentHash)
			if err != nil {
				err = msgp.WrapError(err, "ParentHash")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PovAuxHeader) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "amb"
	err = en.Append(0x86, 0xa3, 0x61, 0x6d, 0x62)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.AuxMerkleBranch)))
	if err != nil {
		err = msgp.WrapError(err, "AuxMerkleBranch")
		return
	}
	for za0001 := range z.AuxMerkleBranch {
		if z.AuxMerkleBranch[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.AuxMerkleBranch[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "AuxMerkleBranch", za0001)
				return
			}
		}
	}
	// write "ami"
	err = en.Append(0xa3, 0x61, 0x6d, 0x69)
	if err != nil {
		return
	}
	err = en.WriteInt(z.AuxMerkleIndex)
	if err != nil {
		err = msgp.WrapError(err, "AuxMerkleIndex")
		return
	}
	// write "pcbtx"
	err = en.Append(0xa5, 0x70, 0x63, 0x62, 0x74, 0x78)
	if err != nil {
		return
	}
	err = z.ParCoinBaseTx.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ParCoinBaseTx")
		return
	}
	// write "pmi"
	err = en.Append(0xa3, 0x70, 0x6d, 0x69)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ParMerkleIndex)
	if err != nil {
		err = msgp.WrapError(err, "ParMerkleIndex")
		return
	}
	// write "pbh"
	err = en.Append(0xa3, 0x70, 0x62, 0x68)
	if err != nil {
		return
	}
	err = z.ParBlockHeader.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ParBlockHeader")
		return
	}
	// write "ph"
	err = en.Append(0xa2, 0x70, 0x68)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.ParentHash)
	if err != nil {
		err = msgp.WrapError(err, "ParentHash")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PovAuxHeader) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "amb"
	o = append(o, 0x86, 0xa3, 0x61, 0x6d, 0x62)
	o = msgp.AppendArrayHeader(o, uint32(len(z.AuxMerkleBranch)))
	for za0001 := range z.AuxMerkleBranch {
		if z.AuxMerkleBranch[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.AuxMerkleBranch[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "AuxMerkleBranch", za0001)
				return
			}
		}
	}
	// string "ami"
	o = append(o, 0xa3, 0x61, 0x6d, 0x69)
	o = msgp.AppendInt(o, z.AuxMerkleIndex)
	// string "pcbtx"
	o = append(o, 0xa5, 0x70, 0x63, 0x62, 0x74, 0x78)
	o, err = z.ParCoinBaseTx.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ParCoinBaseTx")
		return
	}
	// string "pmi"
	o = append(o, 0xa3, 0x70, 0x6d, 0x69)
	o = msgp.AppendInt(o, z.ParMerkleIndex)
	// string "pbh"
	o = append(o, 0xa3, 0x70, 0x62, 0x68)
	o, err = z.ParBlockHeader.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ParBlockHeader")
		return
	}
	// string "ph"
	o = append(o, 0xa2, 0x70, 0x68)
	o, err = msgp.AppendExtension(o, &z.ParentHash)
	if err != nil {
		err = msgp.WrapError(err, "ParentHash")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PovAuxHeader) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "amb":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AuxMerkleBranch")
				return
			}
			if cap(z.AuxMerkleBranch) >= int(zb0002) {
				z.AuxMerkleBranch = (z.AuxMerkleBranch)[:zb0002]
			} else {
				z.AuxMerkleBranch = make([]*Hash, zb0002)
			}
			for za0001 := range z.AuxMerkleBranch {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.AuxMerkleBranch[za0001] = nil
				} else {
					if z.AuxMerkleBranch[za0001] == nil {
						z.AuxMerkleBranch[za0001] = new(Hash)
					}
					bts, err = z.AuxMerkleBranch[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "AuxMerkleBranch", za0001)
						return
					}
				}
			}
		case "ami":
			z.AuxMerkleIndex, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AuxMerkleIndex")
				return
			}
		case "pcbtx":
			bts, err = z.ParCoinBaseTx.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ParCoinBaseTx")
				return
			}
		case "pmi":
			z.ParMerkleIndex, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ParMerkleIndex")
				return
			}
		case "pbh":
			bts, err = z.ParBlockHeader.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ParBlockHeader")
				return
			}
		case "ph":
			bts, err = msgp.ReadExtensionBytes(bts, &z.ParentHash)
			if err != nil {
				err = msgp.WrapError(err, "ParentHash")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PovAuxHeader) Msgsize() (s int) {
	s = 1 + 4 + msgp.ArrayHeaderSize
	for za0001 := range z.AuxMerkleBranch {
		if z.AuxMerkleBranch[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.AuxMerkleBranch[za0001].Msgsize()
		}
	}
	s += 4 + msgp.IntSize + 6 + z.ParCoinBaseTx.Msgsize() + 4 + msgp.IntSize + 4 + z.ParBlockHeader.Msgsize() + 3 + msgp.ExtensionPrefixSize + z.ParentHash.Len()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PovBaseHeader) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "v":
			z.Version, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "p":
			err = dc.ReadExtension(&z.Previous)
			if err != nil {
				err = msgp.WrapError(err, "Previous")
				return
			}
		case "mr":
			err = dc.ReadExtension(&z.MerkleRoot)
			if err != nil {
				err = msgp.WrapError(err, "MerkleRoot")
				return
			}
		case "ts":
			z.Timestamp, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		case "b":
			z.Bits, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Bits")
				return
			}
		case "n":
			z.Nonce, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Nonce")
				return
			}
		case "ha":
			err = dc.ReadExtension(&z.Hash)
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		case "he":
			z.Height, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PovBaseHeader) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 8
	// write "v"
	err = en.Append(0x88, 0xa1, 0x76)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Version)
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	// write "p"
	err = en.Append(0xa1, 0x70)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Previous)
	if err != nil {
		err = msgp.WrapError(err, "Previous")
		return
	}
	// write "mr"
	err = en.Append(0xa2, 0x6d, 0x72)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.MerkleRoot)
	if err != nil {
		err = msgp.WrapError(err, "MerkleRoot")
		return
	}
	// write "ts"
	err = en.Append(0xa2, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	// write "b"
	err = en.Append(0xa1, 0x62)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Bits)
	if err != nil {
		err = msgp.WrapError(err, "Bits")
		return
	}
	// write "n"
	err = en.Append(0xa1, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Nonce)
	if err != nil {
		err = msgp.WrapError(err, "Nonce")
		return
	}
	// write "ha"
	err = en.Append(0xa2, 0x68, 0x61)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Hash)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	// write "he"
	err = en.Append(0xa2, 0x68, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Height)
	if err != nil {
		err = msgp.WrapError(err, "Height")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PovBaseHeader) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 8
	// string "v"
	o = append(o, 0x88, 0xa1, 0x76)
	o = msgp.AppendUint32(o, z.Version)
	// string "p"
	o = append(o, 0xa1, 0x70)
	o, err = msgp.AppendExtension(o, &z.Previous)
	if err != nil {
		err = msgp.WrapError(err, "Previous")
		return
	}
	// string "mr"
	o = append(o, 0xa2, 0x6d, 0x72)
	o, err = msgp.AppendExtension(o, &z.MerkleRoot)
	if err != nil {
		err = msgp.WrapError(err, "MerkleRoot")
		return
	}
	// string "ts"
	o = append(o, 0xa2, 0x74, 0x73)
	o = msgp.AppendUint32(o, z.Timestamp)
	// string "b"
	o = append(o, 0xa1, 0x62)
	o = msgp.AppendUint32(o, z.Bits)
	// string "n"
	o = append(o, 0xa1, 0x6e)
	o = msgp.AppendUint32(o, z.Nonce)
	// string "ha"
	o = append(o, 0xa2, 0x68, 0x61)
	o, err = msgp.AppendExtension(o, &z.Hash)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	// string "he"
	o = append(o, 0xa2, 0x68, 0x65)
	o = msgp.AppendUint64(o, z.Height)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PovBaseHeader) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "v":
			z.Version, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "p":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Previous)
			if err != nil {
				err = msgp.WrapError(err, "Previous")
				return
			}
		case "mr":
			bts, err = msgp.ReadExtensionBytes(bts, &z.MerkleRoot)
			if err != nil {
				err = msgp.WrapError(err, "MerkleRoot")
				return
			}
		case "ts":
			z.Timestamp, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		case "b":
			z.Bits, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bits")
				return
			}
		case "n":
			z.Nonce, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Nonce")
				return
			}
		case "ha":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Hash)
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		case "he":
			z.Height, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PovBaseHeader) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint32Size + 2 + msgp.ExtensionPrefixSize + z.Previous.Len() + 3 + msgp.ExtensionPrefixSize + z.MerkleRoot.Len() + 3 + msgp.Uint32Size + 2 + msgp.Uint32Size + 2 + msgp.Uint32Size + 3 + msgp.ExtensionPrefixSize + z.Hash.Len() + 3 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PovBlock) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "h":
			err = z.Header.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Header")
				return
			}
		case "b":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Body")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Body")
					return
				}
				switch msgp.UnsafeString(field) {
				case "txs":
					var zb0003 uint32
					zb0003, err = dc.ReadArrayHeader()
					if err != nil {
						err = msgp.WrapError(err, "Body", "Txs")
						return
					}
					if cap(z.Body.Txs) >= int(zb0003) {
						z.Body.Txs = (z.Body.Txs)[:zb0003]
					} else {
						z.Body.Txs = make([]*PovTransaction, zb0003)
					}
					for za0001 := range z.Body.Txs {
						if dc.IsNil() {
							err = dc.ReadNil()
							if err != nil {
								err = msgp.WrapError(err, "Body", "Txs", za0001)
								return
							}
							z.Body.Txs[za0001] = nil
						} else {
							if z.Body.Txs[za0001] == nil {
								z.Body.Txs[za0001] = new(PovTransaction)
							}
							var zb0004 uint32
							zb0004, err = dc.ReadMapHeader()
							if err != nil {
								err = msgp.WrapError(err, "Body", "Txs", za0001)
								return
							}
							for zb0004 > 0 {
								zb0004--
								field, err = dc.ReadMapKeyPtr()
								if err != nil {
									err = msgp.WrapError(err, "Body", "Txs", za0001)
									return
								}
								switch msgp.UnsafeString(field) {
								case "h":
									err = dc.ReadExtension(&z.Body.Txs[za0001].Hash)
									if err != nil {
										err = msgp.WrapError(err, "Body", "Txs", za0001, "Hash")
										return
									}
								default:
									err = dc.Skip()
									if err != nil {
										err = msgp.WrapError(err, "Body", "Txs", za0001)
										return
									}
								}
							}
						}
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Body")
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PovBlock) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "h"
	err = en.Append(0x82, 0xa1, 0x68)
	if err != nil {
		return
	}
	err = z.Header.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Header")
		return
	}
	// write "b"
	// map header, size 1
	// write "txs"
	err = en.Append(0xa1, 0x62, 0x81, 0xa3, 0x74, 0x78, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Body.Txs)))
	if err != nil {
		err = msgp.WrapError(err, "Body", "Txs")
		return
	}
	for za0001 := range z.Body.Txs {
		if z.Body.Txs[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 1
			// write "h"
			err = en.Append(0x81, 0xa1, 0x68)
			if err != nil {
				return
			}
			err = en.WriteExtension(&z.Body.Txs[za0001].Hash)
			if err != nil {
				err = msgp.WrapError(err, "Body", "Txs", za0001, "Hash")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PovBlock) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "h"
	o = append(o, 0x82, 0xa1, 0x68)
	o, err = z.Header.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Header")
		return
	}
	// string "b"
	// map header, size 1
	// string "txs"
	o = append(o, 0xa1, 0x62, 0x81, 0xa3, 0x74, 0x78, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Body.Txs)))
	for za0001 := range z.Body.Txs {
		if z.Body.Txs[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 1
			// string "h"
			o = append(o, 0x81, 0xa1, 0x68)
			o, err = msgp.AppendExtension(o, &z.Body.Txs[za0001].Hash)
			if err != nil {
				err = msgp.WrapError(err, "Body", "Txs", za0001, "Hash")
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PovBlock) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "h":
			bts, err = z.Header.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Header")
				return
			}
		case "b":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Body")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Body")
					return
				}
				switch msgp.UnsafeString(field) {
				case "txs":
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Body", "Txs")
						return
					}
					if cap(z.Body.Txs) >= int(zb0003) {
						z.Body.Txs = (z.Body.Txs)[:zb0003]
					} else {
						z.Body.Txs = make([]*PovTransaction, zb0003)
					}
					for za0001 := range z.Body.Txs {
						if msgp.IsNil(bts) {
							bts, err = msgp.ReadNilBytes(bts)
							if err != nil {
								return
							}
							z.Body.Txs[za0001] = nil
						} else {
							if z.Body.Txs[za0001] == nil {
								z.Body.Txs[za0001] = new(PovTransaction)
							}
							var zb0004 uint32
							zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Body", "Txs", za0001)
								return
							}
							for zb0004 > 0 {
								zb0004--
								field, bts, err = msgp.ReadMapKeyZC(bts)
								if err != nil {
									err = msgp.WrapError(err, "Body", "Txs", za0001)
									return
								}
								switch msgp.UnsafeString(field) {
								case "h":
									bts, err = msgp.ReadExtensionBytes(bts, &z.Body.Txs[za0001].Hash)
									if err != nil {
										err = msgp.WrapError(err, "Body", "Txs", za0001, "Hash")
										return
									}
								default:
									bts, err = msgp.Skip(bts)
									if err != nil {
										err = msgp.WrapError(err, "Body", "Txs", za0001)
										return
									}
								}
							}
						}
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Body")
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PovBlock) Msgsize() (s int) {
	s = 1 + 2 + z.Header.Msgsize() + 2 + 1 + 4 + msgp.ArrayHeaderSize
	for za0001 := range z.Body.Txs {
		if z.Body.Txs[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 2 + msgp.ExtensionPrefixSize + z.Body.Txs[za0001].Hash.Len()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PovBlockFrom) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint16
		zb0001, err = dc.ReadUint16()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = PovBlockFrom(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z PovBlockFrom) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint16(uint16(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z PovBlockFrom) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint16(o, uint16(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PovBlockFrom) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint16
		zb0001, bts, err = msgp.ReadUint16Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = PovBlockFrom(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z PovBlockFrom) Msgsize() (s int) {
	s = msgp.Uint16Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PovBlocks) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(PovBlocks, zb0002)
	}
	for zb0001 := range *z {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			(*z)[zb0001] = nil
		} else {
			if (*z)[zb0001] == nil {
				(*z)[zb0001] = new(PovBlock)
			}
			err = (*z)[zb0001].DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z PovBlocks) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0003 := range z {
		if z[zb0003] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z[zb0003].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, zb0003)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z PovBlocks) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zb0003 := range z {
		if z[zb0003] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z[zb0003].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, zb0003)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PovBlocks) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(PovBlocks, zb0002)
	}
	for zb0001 := range *z {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			(*z)[zb0001] = nil
		} else {
			if (*z)[zb0001] == nil {
				(*z)[zb0001] = new(PovBlock)
			}
			bts, err = (*z)[zb0001].UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z PovBlocks) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0003 := range z {
		if z[zb0003] == nil {
			s += msgp.NilSize
		} else {
			s += z[zb0003].Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PovBody) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "txs":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Txs")
				return
			}
			if cap(z.Txs) >= int(zb0002) {
				z.Txs = (z.Txs)[:zb0002]
			} else {
				z.Txs = make([]*PovTransaction, zb0002)
			}
			for za0001 := range z.Txs {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Txs", za0001)
						return
					}
					z.Txs[za0001] = nil
				} else {
					if z.Txs[za0001] == nil {
						z.Txs[za0001] = new(PovTransaction)
					}
					var zb0003 uint32
					zb0003, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "Txs", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "Txs", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "h":
							err = dc.ReadExtension(&z.Txs[za0001].Hash)
							if err != nil {
								err = msgp.WrapError(err, "Txs", za0001, "Hash")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "Txs", za0001)
								return
							}
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PovBody) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "txs"
	err = en.Append(0x81, 0xa3, 0x74, 0x78, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Txs)))
	if err != nil {
		err = msgp.WrapError(err, "Txs")
		return
	}
	for za0001 := range z.Txs {
		if z.Txs[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 1
			// write "h"
			err = en.Append(0x81, 0xa1, 0x68)
			if err != nil {
				return
			}
			err = en.WriteExtension(&z.Txs[za0001].Hash)
			if err != nil {
				err = msgp.WrapError(err, "Txs", za0001, "Hash")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PovBody) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "txs"
	o = append(o, 0x81, 0xa3, 0x74, 0x78, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Txs)))
	for za0001 := range z.Txs {
		if z.Txs[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 1
			// string "h"
			o = append(o, 0x81, 0xa1, 0x68)
			o, err = msgp.AppendExtension(o, &z.Txs[za0001].Hash)
			if err != nil {
				err = msgp.WrapError(err, "Txs", za0001, "Hash")
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PovBody) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "txs":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Txs")
				return
			}
			if cap(z.Txs) >= int(zb0002) {
				z.Txs = (z.Txs)[:zb0002]
			} else {
				z.Txs = make([]*PovTransaction, zb0002)
			}
			for za0001 := range z.Txs {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Txs[za0001] = nil
				} else {
					if z.Txs[za0001] == nil {
						z.Txs[za0001] = new(PovTransaction)
					}
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Txs", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "Txs", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "h":
							bts, err = msgp.ReadExtensionBytes(bts, &z.Txs[za0001].Hash)
							if err != nil {
								err = msgp.WrapError(err, "Txs", za0001, "Hash")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "Txs", za0001)
								return
							}
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PovBody) Msgsize() (s int) {
	s = 1 + 4 + msgp.ArrayHeaderSize
	for za0001 := range z.Txs {
		if z.Txs[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 2 + msgp.ExtensionPrefixSize + z.Txs[za0001].Hash.Len()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PovCoinBaseTx) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "v":
			z.Version, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "tis":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "TxIns")
				return
			}
			if cap(z.TxIns) >= int(zb0002) {
				z.TxIns = (z.TxIns)[:zb0002]
			} else {
				z.TxIns = make([]*PovCoinBaseTxIn, zb0002)
			}
			for za0001 := range z.TxIns {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "TxIns", za0001)
						return
					}
					z.TxIns[za0001] = nil
				} else {
					if z.TxIns[za0001] == nil {
						z.TxIns[za0001] = new(PovCoinBaseTxIn)
					}
					err = z.TxIns[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "TxIns", za0001)
						return
					}
				}
			}
		case "tos":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "TxOuts")
				return
			}
			if cap(z.TxOuts) >= int(zb0003) {
				z.TxOuts = (z.TxOuts)[:zb0003]
			} else {
				z.TxOuts = make([]*PovCoinBaseTxOut, zb0003)
			}
			for za0002 := range z.TxOuts {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "TxOuts", za0002)
						return
					}
					z.TxOuts[za0002] = nil
				} else {
					if z.TxOuts[za0002] == nil {
						z.TxOuts[za0002] = new(PovCoinBaseTxOut)
					}
					var zb0004 uint32
					zb0004, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "TxOuts", za0002)
						return
					}
					for zb0004 > 0 {
						zb0004--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "TxOuts", za0002)
							return
						}
						switch msgp.UnsafeString(field) {
						case "v":
							err = dc.ReadExtension(&z.TxOuts[za0002].Value)
							if err != nil {
								err = msgp.WrapError(err, "TxOuts", za0002, "Value")
								return
							}
						case "a":
							err = dc.ReadExtension(&z.TxOuts[za0002].Address)
							if err != nil {
								err = msgp.WrapError(err, "TxOuts", za0002, "Address")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "TxOuts", za0002)
								return
							}
						}
					}
				}
			}
		case "sh":
			err = dc.ReadExtension(&z.StateHash)
			if err != nil {
				err = msgp.WrapError(err, "StateHash")
				return
			}
		case "tn":
			z.TxNum, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "TxNum")
				return
			}
		case "h":
			err = dc.ReadExtension(&z.Hash)
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PovCoinBaseTx) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "v"
	err = en.Append(0x86, 0xa1, 0x76)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Version)
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	// write "tis"
	err = en.Append(0xa3, 0x74, 0x69, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.TxIns)))
	if err != nil {
		err = msgp.WrapError(err, "TxIns")
		return
	}
	for za0001 := range z.TxIns {
		if z.TxIns[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.TxIns[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "TxIns", za0001)
				return
			}
		}
	}
	// write "tos"
	err = en.Append(0xa3, 0x74, 0x6f, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.TxOuts)))
	if err != nil {
		err = msgp.WrapError(err, "TxOuts")
		return
	}
	for za0002 := range z.TxOuts {
		if z.TxOuts[za0002] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 2
			// write "v"
			err = en.Append(0x82, 0xa1, 0x76)
			if err != nil {
				return
			}
			err = en.WriteExtension(&z.TxOuts[za0002].Value)
			if err != nil {
				err = msgp.WrapError(err, "TxOuts", za0002, "Value")
				return
			}
			// write "a"
			err = en.Append(0xa1, 0x61)
			if err != nil {
				return
			}
			err = en.WriteExtension(&z.TxOuts[za0002].Address)
			if err != nil {
				err = msgp.WrapError(err, "TxOuts", za0002, "Address")
				return
			}
		}
	}
	// write "sh"
	err = en.Append(0xa2, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.StateHash)
	if err != nil {
		err = msgp.WrapError(err, "StateHash")
		return
	}
	// write "tn"
	err = en.Append(0xa2, 0x74, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.TxNum)
	if err != nil {
		err = msgp.WrapError(err, "TxNum")
		return
	}
	// write "h"
	err = en.Append(0xa1, 0x68)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Hash)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PovCoinBaseTx) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "v"
	o = append(o, 0x86, 0xa1, 0x76)
	o = msgp.AppendUint32(o, z.Version)
	// string "tis"
	o = append(o, 0xa3, 0x74, 0x69, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.TxIns)))
	for za0001 := range z.TxIns {
		if z.TxIns[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.TxIns[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "TxIns", za0001)
				return
			}
		}
	}
	// string "tos"
	o = append(o, 0xa3, 0x74, 0x6f, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.TxOuts)))
	for za0002 := range z.TxOuts {
		if z.TxOuts[za0002] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "v"
			o = append(o, 0x82, 0xa1, 0x76)
			o, err = msgp.AppendExtension(o, &z.TxOuts[za0002].Value)
			if err != nil {
				err = msgp.WrapError(err, "TxOuts", za0002, "Value")
				return
			}
			// string "a"
			o = append(o, 0xa1, 0x61)
			o, err = msgp.AppendExtension(o, &z.TxOuts[za0002].Address)
			if err != nil {
				err = msgp.WrapError(err, "TxOuts", za0002, "Address")
				return
			}
		}
	}
	// string "sh"
	o = append(o, 0xa2, 0x73, 0x68)
	o, err = msgp.AppendExtension(o, &z.StateHash)
	if err != nil {
		err = msgp.WrapError(err, "StateHash")
		return
	}
	// string "tn"
	o = append(o, 0xa2, 0x74, 0x6e)
	o = msgp.AppendUint32(o, z.TxNum)
	// string "h"
	o = append(o, 0xa1, 0x68)
	o, err = msgp.AppendExtension(o, &z.Hash)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PovCoinBaseTx) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "v":
			z.Version, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "tis":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TxIns")
				return
			}
			if cap(z.TxIns) >= int(zb0002) {
				z.TxIns = (z.TxIns)[:zb0002]
			} else {
				z.TxIns = make([]*PovCoinBaseTxIn, zb0002)
			}
			for za0001 := range z.TxIns {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.TxIns[za0001] = nil
				} else {
					if z.TxIns[za0001] == nil {
						z.TxIns[za0001] = new(PovCoinBaseTxIn)
					}
					bts, err = z.TxIns[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "TxIns", za0001)
						return
					}
				}
			}
		case "tos":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TxOuts")
				return
			}
			if cap(z.TxOuts) >= int(zb0003) {
				z.TxOuts = (z.TxOuts)[:zb0003]
			} else {
				z.TxOuts = make([]*PovCoinBaseTxOut, zb0003)
			}
			for za0002 := range z.TxOuts {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.TxOuts[za0002] = nil
				} else {
					if z.TxOuts[za0002] == nil {
						z.TxOuts[za0002] = new(PovCoinBaseTxOut)
					}
					var zb0004 uint32
					zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "TxOuts", za0002)
						return
					}
					for zb0004 > 0 {
						zb0004--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "TxOuts", za0002)
							return
						}
						switch msgp.UnsafeString(field) {
						case "v":
							bts, err = msgp.ReadExtensionBytes(bts, &z.TxOuts[za0002].Value)
							if err != nil {
								err = msgp.WrapError(err, "TxOuts", za0002, "Value")
								return
							}
						case "a":
							bts, err = msgp.ReadExtensionBytes(bts, &z.TxOuts[za0002].Address)
							if err != nil {
								err = msgp.WrapError(err, "TxOuts", za0002, "Address")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "TxOuts", za0002)
								return
							}
						}
					}
				}
			}
		case "sh":
			bts, err = msgp.ReadExtensionBytes(bts, &z.StateHash)
			if err != nil {
				err = msgp.WrapError(err, "StateHash")
				return
			}
		case "tn":
			z.TxNum, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TxNum")
				return
			}
		case "h":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Hash)
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PovCoinBaseTx) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint32Size + 4 + msgp.ArrayHeaderSize
	for za0001 := range z.TxIns {
		if z.TxIns[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.TxIns[za0001].Msgsize()
		}
	}
	s += 4 + msgp.ArrayHeaderSize
	for za0002 := range z.TxOuts {
		if z.TxOuts[za0002] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 2 + msgp.ExtensionPrefixSize + z.TxOuts[za0002].Value.Len() + 2 + msgp.ExtensionPrefixSize + z.TxOuts[za0002].Address.Len()
		}
	}
	s += 3 + msgp.ExtensionPrefixSize + z.StateHash.Len() + 3 + msgp.Uint32Size + 2 + msgp.ExtensionPrefixSize + z.Hash.Len()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PovCoinBaseTxIn) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "pth":
			err = dc.ReadExtension(&z.PrevTxHash)
			if err != nil {
				err = msgp.WrapError(err, "PrevTxHash")
				return
			}
		case "pti":
			z.PrevTxIdx, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "PrevTxIdx")
				return
			}
		case "ext":
			err = dc.ReadExtension(&z.Extra)
			if err != nil {
				err = msgp.WrapError(err, "Extra")
				return
			}
		case "seq":
			z.Sequence, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Sequence")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PovCoinBaseTxIn) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "pth"
	err = en.Append(0x84, 0xa3, 0x70, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.PrevTxHash)
	if err != nil {
		err = msgp.WrapError(err, "PrevTxHash")
		return
	}
	// write "pti"
	err = en.Append(0xa3, 0x70, 0x74, 0x69)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.PrevTxIdx)
	if err != nil {
		err = msgp.WrapError(err, "PrevTxIdx")
		return
	}
	// write "ext"
	err = en.Append(0xa3, 0x65, 0x78, 0x74)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Extra)
	if err != nil {
		err = msgp.WrapError(err, "Extra")
		return
	}
	// write "seq"
	err = en.Append(0xa3, 0x73, 0x65, 0x71)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Sequence)
	if err != nil {
		err = msgp.WrapError(err, "Sequence")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PovCoinBaseTxIn) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "pth"
	o = append(o, 0x84, 0xa3, 0x70, 0x74, 0x68)
	o, err = msgp.AppendExtension(o, &z.PrevTxHash)
	if err != nil {
		err = msgp.WrapError(err, "PrevTxHash")
		return
	}
	// string "pti"
	o = append(o, 0xa3, 0x70, 0x74, 0x69)
	o = msgp.AppendUint32(o, z.PrevTxIdx)
	// string "ext"
	o = append(o, 0xa3, 0x65, 0x78, 0x74)
	o, err = msgp.AppendExtension(o, &z.Extra)
	if err != nil {
		err = msgp.WrapError(err, "Extra")
		return
	}
	// string "seq"
	o = append(o, 0xa3, 0x73, 0x65, 0x71)
	o = msgp.AppendUint32(o, z.Sequence)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PovCoinBaseTxIn) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "pth":
			bts, err = msgp.ReadExtensionBytes(bts, &z.PrevTxHash)
			if err != nil {
				err = msgp.WrapError(err, "PrevTxHash")
				return
			}
		case "pti":
			z.PrevTxIdx, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PrevTxIdx")
				return
			}
		case "ext":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Extra)
			if err != nil {
				err = msgp.WrapError(err, "Extra")
				return
			}
		case "seq":
			z.Sequence, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sequence")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PovCoinBaseTxIn) Msgsize() (s int) {
	s = 1 + 4 + msgp.ExtensionPrefixSize + z.PrevTxHash.Len() + 4 + msgp.Uint32Size + 4 + msgp.ExtensionPrefixSize + z.Extra.Len() + 4 + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PovCoinBaseTxOut) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "v":
			err = dc.ReadExtension(&z.Value)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		case "a":
			err = dc.ReadExtension(&z.Address)
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z PovCoinBaseTxOut) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "v"
	err = en.Append(0x82, 0xa1, 0x76)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Value)
	if err != nil {
		err = msgp.WrapError(err, "Value")
		return
	}
	// write "a"
	err = en.Append(0xa1, 0x61)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Address)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z PovCoinBaseTxOut) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "v"
	o = append(o, 0x82, 0xa1, 0x76)
	o, err = msgp.AppendExtension(o, &z.Value)
	if err != nil {
		err = msgp.WrapError(err, "Value")
		return
	}
	// string "a"
	o = append(o, 0xa1, 0x61)
	o, err = msgp.AppendExtension(o, &z.Address)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PovCoinBaseTxOut) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "v":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Value)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		case "a":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Address)
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z PovCoinBaseTxOut) Msgsize() (s int) {
	s = 1 + 2 + msgp.ExtensionPrefixSize + z.Value.Len() + 2 + msgp.ExtensionPrefixSize + z.Address.Len()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PovHeader) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "basHdr":
			err = z.BasHdr.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "BasHdr")
				return
			}
		case "auxHdr":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AuxHdr")
					return
				}
				z.AuxHdr = nil
			} else {
				if z.AuxHdr == nil {
					z.AuxHdr = new(PovAuxHeader)
				}
				err = z.AuxHdr.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "AuxHdr")
					return
				}
			}
		case "cbtx":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "CbTx")
					return
				}
				z.CbTx = nil
			} else {
				if z.CbTx == nil {
					z.CbTx = new(PovCoinBaseTx)
				}
				err = z.CbTx.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "CbTx")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PovHeader) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "basHdr"
	err = en.Append(0x83, 0xa6, 0x62, 0x61, 0x73, 0x48, 0x64, 0x72)
	if err != nil {
		return
	}
	err = z.BasHdr.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "BasHdr")
		return
	}
	// write "auxHdr"
	err = en.Append(0xa6, 0x61, 0x75, 0x78, 0x48, 0x64, 0x72)
	if err != nil {
		return
	}
	if z.AuxHdr == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.AuxHdr.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "AuxHdr")
			return
		}
	}
	// write "cbtx"
	err = en.Append(0xa4, 0x63, 0x62, 0x74, 0x78)
	if err != nil {
		return
	}
	if z.CbTx == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.CbTx.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "CbTx")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PovHeader) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "basHdr"
	o = append(o, 0x83, 0xa6, 0x62, 0x61, 0x73, 0x48, 0x64, 0x72)
	o, err = z.BasHdr.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "BasHdr")
		return
	}
	// string "auxHdr"
	o = append(o, 0xa6, 0x61, 0x75, 0x78, 0x48, 0x64, 0x72)
	if z.AuxHdr == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.AuxHdr.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "AuxHdr")
			return
		}
	}
	// string "cbtx"
	o = append(o, 0xa4, 0x63, 0x62, 0x74, 0x78)
	if z.CbTx == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.CbTx.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "CbTx")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PovHeader) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "basHdr":
			bts, err = z.BasHdr.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "BasHdr")
				return
			}
		case "auxHdr":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AuxHdr = nil
			} else {
				if z.AuxHdr == nil {
					z.AuxHdr = new(PovAuxHeader)
				}
				bts, err = z.AuxHdr.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "AuxHdr")
					return
				}
			}
		case "cbtx":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.CbTx = nil
			} else {
				if z.CbTx == nil {
					z.CbTx = new(PovCoinBaseTx)
				}
				bts, err = z.CbTx.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "CbTx")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PovHeader) Msgsize() (s int) {
	s = 1 + 7 + z.BasHdr.Msgsize() + 7
	if z.AuxHdr == nil {
		s += msgp.NilSize
	} else {
		s += z.AuxHdr.Msgsize()
	}
	s += 5
	if z.CbTx == nil {
		s += msgp.NilSize
	} else {
		s += z.CbTx.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PovMinerDayStat) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "di":
			z.DayIndex, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "DayIndex")
				return
			}
		case "mn":
			z.MinerNum, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "MinerNum")
				return
			}
		case "mss":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "MinerStats")
				return
			}
			if z.MinerStats == nil {
				z.MinerStats = make(map[string]*PovMinerStatItem, zb0002)
			} else if len(z.MinerStats) > 0 {
				for key := range z.MinerStats {
					delete(z.MinerStats, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 *PovMinerStatItem
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "MinerStats")
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "MinerStats", za0001)
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(PovMinerStatItem)
					}
					err = za0002.DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "MinerStats", za0001)
						return
					}
				}
				z.MinerStats[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PovMinerDayStat) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "di"
	err = en.Append(0x83, 0xa2, 0x64, 0x69)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.DayIndex)
	if err != nil {
		err = msgp.WrapError(err, "DayIndex")
		return
	}
	// write "mn"
	err = en.Append(0xa2, 0x6d, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.MinerNum)
	if err != nil {
		err = msgp.WrapError(err, "MinerNum")
		return
	}
	// write "mss"
	err = en.Append(0xa3, 0x6d, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.MinerStats)))
	if err != nil {
		err = msgp.WrapError(err, "MinerStats")
		return
	}
	for za0001, za0002 := range z.MinerStats {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "MinerStats")
			return
		}
		if za0002 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = za0002.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "MinerStats", za0001)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PovMinerDayStat) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "di"
	o = append(o, 0x83, 0xa2, 0x64, 0x69)
	o = msgp.AppendUint32(o, z.DayIndex)
	// string "mn"
	o = append(o, 0xa2, 0x6d, 0x6e)
	o = msgp.AppendUint32(o, z.MinerNum)
	// string "mss"
	o = append(o, 0xa3, 0x6d, 0x73, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.MinerStats)))
	for za0001, za0002 := range z.MinerStats {
		o = msgp.AppendString(o, za0001)
		if za0002 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = za0002.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "MinerStats", za0001)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PovMinerDayStat) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "di":
			z.DayIndex, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DayIndex")
				return
			}
		case "mn":
			z.MinerNum, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MinerNum")
				return
			}
		case "mss":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MinerStats")
				return
			}
			if z.MinerStats == nil {
				z.MinerStats = make(map[string]*PovMinerStatItem, zb0002)
			} else if len(z.MinerStats) > 0 {
				for key := range z.MinerStats {
					delete(z.MinerStats, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 *PovMinerStatItem
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MinerStats")
					return
				}
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(PovMinerStatItem)
					}
					bts, err = za0002.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "MinerStats", za0001)
						return
					}
				}
				z.MinerStats[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PovMinerDayStat) Msgsize() (s int) {
	s = 1 + 3 + msgp.Uint32Size + 3 + msgp.Uint32Size + 4 + msgp.MapHeaderSize
	if z.MinerStats != nil {
		for za0001, za0002 := range z.MinerStats {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001)
			if za0002 == nil {
				s += msgp.NilSize
			} else {
				s += za0002.Msgsize()
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PovMinerStatItem) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "fh":
			z.FirstHeight, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "FirstHeight")
				return
			}
		case "lh":
			z.LastHeight, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "LastHeight")
				return
			}
		case "bn":
			z.BlockNum, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "BlockNum")
				return
			}
		case "ra":
			err = dc.ReadExtension(&z.RewardAmount)
			if err != nil {
				err = msgp.WrapError(err, "RewardAmount")
				return
			}
		case "rn":
			z.RepBlockNum, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "RepBlockNum")
				return
			}
		case "rr":
			err = dc.ReadExtension(&z.RepReward)
			if err != nil {
				err = msgp.WrapError(err, "RepReward")
				return
			}
		case "im":
			z.IsMiner, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsMiner")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PovMinerStatItem) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "fh"
	err = en.Append(0x87, 0xa2, 0x66, 0x68)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.FirstHeight)
	if err != nil {
		err = msgp.WrapError(err, "FirstHeight")
		return
	}
	// write "lh"
	err = en.Append(0xa2, 0x6c, 0x68)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.LastHeight)
	if err != nil {
		err = msgp.WrapError(err, "LastHeight")
		return
	}
	// write "bn"
	err = en.Append(0xa2, 0x62, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.BlockNum)
	if err != nil {
		err = msgp.WrapError(err, "BlockNum")
		return
	}
	// write "ra"
	err = en.Append(0xa2, 0x72, 0x61)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.RewardAmount)
	if err != nil {
		err = msgp.WrapError(err, "RewardAmount")
		return
	}
	// write "rn"
	err = en.Append(0xa2, 0x72, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.RepBlockNum)
	if err != nil {
		err = msgp.WrapError(err, "RepBlockNum")
		return
	}
	// write "rr"
	err = en.Append(0xa2, 0x72, 0x72)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.RepReward)
	if err != nil {
		err = msgp.WrapError(err, "RepReward")
		return
	}
	// write "im"
	err = en.Append(0xa2, 0x69, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsMiner)
	if err != nil {
		err = msgp.WrapError(err, "IsMiner")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PovMinerStatItem) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "fh"
	o = append(o, 0x87, 0xa2, 0x66, 0x68)
	o = msgp.AppendUint64(o, z.FirstHeight)
	// string "lh"
	o = append(o, 0xa2, 0x6c, 0x68)
	o = msgp.AppendUint64(o, z.LastHeight)
	// string "bn"
	o = append(o, 0xa2, 0x62, 0x6e)
	o = msgp.AppendUint32(o, z.BlockNum)
	// string "ra"
	o = append(o, 0xa2, 0x72, 0x61)
	o, err = msgp.AppendExtension(o, &z.RewardAmount)
	if err != nil {
		err = msgp.WrapError(err, "RewardAmount")
		return
	}
	// string "rn"
	o = append(o, 0xa2, 0x72, 0x6e)
	o = msgp.AppendUint32(o, z.RepBlockNum)
	// string "rr"
	o = append(o, 0xa2, 0x72, 0x72)
	o, err = msgp.AppendExtension(o, &z.RepReward)
	if err != nil {
		err = msgp.WrapError(err, "RepReward")
		return
	}
	// string "im"
	o = append(o, 0xa2, 0x69, 0x6d)
	o = msgp.AppendBool(o, z.IsMiner)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PovMinerStatItem) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "fh":
			z.FirstHeight, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FirstHeight")
				return
			}
		case "lh":
			z.LastHeight, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastHeight")
				return
			}
		case "bn":
			z.BlockNum, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlockNum")
				return
			}
		case "ra":
			bts, err = msgp.ReadExtensionBytes(bts, &z.RewardAmount)
			if err != nil {
				err = msgp.WrapError(err, "RewardAmount")
				return
			}
		case "rn":
			z.RepBlockNum, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RepBlockNum")
				return
			}
		case "rr":
			bts, err = msgp.ReadExtensionBytes(bts, &z.RepReward)
			if err != nil {
				err = msgp.WrapError(err, "RepReward")
				return
			}
		case "im":
			z.IsMiner, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsMiner")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PovMinerStatItem) Msgsize() (s int) {
	s = 1 + 3 + msgp.Uint64Size + 3 + msgp.Uint64Size + 3 + msgp.Uint32Size + 3 + msgp.ExtensionPrefixSize + z.RewardAmount.Len() + 3 + msgp.Uint32Size + 3 + msgp.ExtensionPrefixSize + z.RepReward.Len() + 3 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PovTD) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "c":
			err = dc.ReadExtension(&z.Chain)
			if err != nil {
				err = msgp.WrapError(err, "Chain")
				return
			}
		case "sha":
			err = dc.ReadExtension(&z.Sha256d)
			if err != nil {
				err = msgp.WrapError(err, "Sha256d")
				return
			}
		case "scr":
			err = dc.ReadExtension(&z.Scrypt)
			if err != nil {
				err = msgp.WrapError(err, "Scrypt")
				return
			}
		case "x11":
			err = dc.ReadExtension(&z.X11)
			if err != nil {
				err = msgp.WrapError(err, "X11")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PovTD) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "c"
	err = en.Append(0x84, 0xa1, 0x63)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Chain)
	if err != nil {
		err = msgp.WrapError(err, "Chain")
		return
	}
	// write "sha"
	err = en.Append(0xa3, 0x73, 0x68, 0x61)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Sha256d)
	if err != nil {
		err = msgp.WrapError(err, "Sha256d")
		return
	}
	// write "scr"
	err = en.Append(0xa3, 0x73, 0x63, 0x72)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Scrypt)
	if err != nil {
		err = msgp.WrapError(err, "Scrypt")
		return
	}
	// write "x11"
	err = en.Append(0xa3, 0x78, 0x31, 0x31)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.X11)
	if err != nil {
		err = msgp.WrapError(err, "X11")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PovTD) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "c"
	o = append(o, 0x84, 0xa1, 0x63)
	o, err = msgp.AppendExtension(o, &z.Chain)
	if err != nil {
		err = msgp.WrapError(err, "Chain")
		return
	}
	// string "sha"
	o = append(o, 0xa3, 0x73, 0x68, 0x61)
	o, err = msgp.AppendExtension(o, &z.Sha256d)
	if err != nil {
		err = msgp.WrapError(err, "Sha256d")
		return
	}
	// string "scr"
	o = append(o, 0xa3, 0x73, 0x63, 0x72)
	o, err = msgp.AppendExtension(o, &z.Scrypt)
	if err != nil {
		err = msgp.WrapError(err, "Scrypt")
		return
	}
	// string "x11"
	o = append(o, 0xa3, 0x78, 0x31, 0x31)
	o, err = msgp.AppendExtension(o, &z.X11)
	if err != nil {
		err = msgp.WrapError(err, "X11")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PovTD) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "c":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Chain)
			if err != nil {
				err = msgp.WrapError(err, "Chain")
				return
			}
		case "sha":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Sha256d)
			if err != nil {
				err = msgp.WrapError(err, "Sha256d")
				return
			}
		case "scr":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Scrypt)
			if err != nil {
				err = msgp.WrapError(err, "Scrypt")
				return
			}
		case "x11":
			bts, err = msgp.ReadExtensionBytes(bts, &z.X11)
			if err != nil {
				err = msgp.WrapError(err, "X11")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PovTD) Msgsize() (s int) {
	s = 1 + 2 + msgp.ExtensionPrefixSize + z.Chain.Len() + 4 + msgp.ExtensionPrefixSize + z.Sha256d.Len() + 4 + msgp.ExtensionPrefixSize + z.Scrypt.Len() + 4 + msgp.ExtensionPrefixSize + z.X11.Len()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PovTransaction) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "h":
			err = dc.ReadExtension(&z.Hash)
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z PovTransaction) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "h"
	err = en.Append(0x81, 0xa1, 0x68)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Hash)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z PovTransaction) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "h"
	o = append(o, 0x81, 0xa1, 0x68)
	o, err = msgp.AppendExtension(o, &z.Hash)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PovTransaction) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "h":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Hash)
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z PovTransaction) Msgsize() (s int) {
	s = 1 + 2 + msgp.ExtensionPrefixSize + z.Hash.Len()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PovTxLookup) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "bha":
			err = dc.ReadExtension(&z.BlockHash)
			if err != nil {
				err = msgp.WrapError(err, "BlockHash")
				return
			}
		case "bhe":
			z.BlockHeight, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "BlockHeight")
				return
			}
		case "ti":
			z.TxIndex, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "TxIndex")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z PovTxLookup) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "bha"
	err = en.Append(0x83, 0xa3, 0x62, 0x68, 0x61)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.BlockHash)
	if err != nil {
		err = msgp.WrapError(err, "BlockHash")
		return
	}
	// write "bhe"
	err = en.Append(0xa3, 0x62, 0x68, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.BlockHeight)
	if err != nil {
		err = msgp.WrapError(err, "BlockHeight")
		return
	}
	// write "ti"
	err = en.Append(0xa2, 0x74, 0x69)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.TxIndex)
	if err != nil {
		err = msgp.WrapError(err, "TxIndex")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z PovTxLookup) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "bha"
	o = append(o, 0x83, 0xa3, 0x62, 0x68, 0x61)
	o, err = msgp.AppendExtension(o, &z.BlockHash)
	if err != nil {
		err = msgp.WrapError(err, "BlockHash")
		return
	}
	// string "bhe"
	o = append(o, 0xa3, 0x62, 0x68, 0x65)
	o = msgp.AppendUint64(o, z.BlockHeight)
	// string "ti"
	o = append(o, 0xa2, 0x74, 0x69)
	o = msgp.AppendUint64(o, z.TxIndex)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PovTxLookup) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "bha":
			bts, err = msgp.ReadExtensionBytes(bts, &z.BlockHash)
			if err != nil {
				err = msgp.WrapError(err, "BlockHash")
				return
			}
		case "bhe":
			z.BlockHeight, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlockHeight")
				return
			}
		case "ti":
			z.TxIndex, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TxIndex")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z PovTxLookup) Msgsize() (s int) {
	s = 1 + 4 + msgp.ExtensionPrefixSize + z.BlockHash.Len() + 4 + msgp.Uint64Size + 3 + msgp.Uint64Size
	return
}
