package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *PovBlock) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "hash":
			err = dc.ReadExtension(&z.Hash)
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		case "previous":
			err = dc.ReadExtension(&z.Previous)
			if err != nil {
				err = msgp.WrapError(err, "Previous")
				return
			}
		case "merkleRoot":
			err = dc.ReadExtension(&z.MerkleRoot)
			if err != nil {
				err = msgp.WrapError(err, "MerkleRoot")
				return
			}
		case "nonce":
			z.Nonce, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Nonce")
				return
			}
		case "voteSignature":
			err = dc.ReadExtension(&z.VoteSignature)
			if err != nil {
				err = msgp.WrapError(err, "VoteSignature")
				return
			}
		case "height":
			z.Height, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		case "timestamp":
			z.Timestamp, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		case "target":
			err = dc.ReadExtension(&z.Target)
			if err != nil {
				err = msgp.WrapError(err, "Target")
				return
			}
		case "coinbase":
			err = dc.ReadExtension(&z.Coinbase)
			if err != nil {
				err = msgp.WrapError(err, "Coinbase")
				return
			}
		case "txNum":
			z.TxNum, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "TxNum")
				return
			}
		case "stateHash":
			err = dc.ReadExtension(&z.StateHash)
			if err != nil {
				err = msgp.WrapError(err, "StateHash")
				return
			}
		case "signature":
			err = dc.ReadExtension(&z.Signature)
			if err != nil {
				err = msgp.WrapError(err, "Signature")
				return
			}
		case "transactions":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Transactions")
				return
			}
			if cap(z.Transactions) >= int(zb0002) {
				z.Transactions = (z.Transactions)[:zb0002]
			} else {
				z.Transactions = make([]*PovTransaction, zb0002)
			}
			for za0001 := range z.Transactions {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Transactions", za0001)
						return
					}
					z.Transactions[za0001] = nil
				} else {
					if z.Transactions[za0001] == nil {
						z.Transactions[za0001] = new(PovTransaction)
					}
					var zb0003 uint32
					zb0003, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "Transactions", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "Transactions", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "hash":
							err = dc.ReadExtension(&z.Transactions[za0001].Hash)
							if err != nil {
								err = msgp.WrapError(err, "Transactions", za0001, "Hash")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "Transactions", za0001)
								return
							}
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PovBlock) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 13
	// write "hash"
	err = en.Append(0x8d, 0xa4, 0x68, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Hash)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	// write "previous"
	err = en.Append(0xa8, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Previous)
	if err != nil {
		err = msgp.WrapError(err, "Previous")
		return
	}
	// write "merkleRoot"
	err = en.Append(0xaa, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.MerkleRoot)
	if err != nil {
		err = msgp.WrapError(err, "MerkleRoot")
		return
	}
	// write "nonce"
	err = en.Append(0xa5, 0x6e, 0x6f, 0x6e, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Nonce)
	if err != nil {
		err = msgp.WrapError(err, "Nonce")
		return
	}
	// write "voteSignature"
	err = en.Append(0xad, 0x76, 0x6f, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.VoteSignature)
	if err != nil {
		err = msgp.WrapError(err, "VoteSignature")
		return
	}
	// write "height"
	err = en.Append(0xa6, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Height)
	if err != nil {
		err = msgp.WrapError(err, "Height")
		return
	}
	// write "timestamp"
	err = en.Append(0xa9, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	// write "target"
	err = en.Append(0xa6, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Target)
	if err != nil {
		err = msgp.WrapError(err, "Target")
		return
	}
	// write "coinbase"
	err = en.Append(0xa8, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Coinbase)
	if err != nil {
		err = msgp.WrapError(err, "Coinbase")
		return
	}
	// write "txNum"
	err = en.Append(0xa5, 0x74, 0x78, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.TxNum)
	if err != nil {
		err = msgp.WrapError(err, "TxNum")
		return
	}
	// write "stateHash"
	err = en.Append(0xa9, 0x73, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.StateHash)
	if err != nil {
		err = msgp.WrapError(err, "StateHash")
		return
	}
	// write "signature"
	err = en.Append(0xa9, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Signature)
	if err != nil {
		err = msgp.WrapError(err, "Signature")
		return
	}
	// write "transactions"
	err = en.Append(0xac, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Transactions)))
	if err != nil {
		err = msgp.WrapError(err, "Transactions")
		return
	}
	for za0001 := range z.Transactions {
		if z.Transactions[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 1
			// write "hash"
			err = en.Append(0x81, 0xa4, 0x68, 0x61, 0x73, 0x68)
			if err != nil {
				return
			}
			err = en.WriteExtension(&z.Transactions[za0001].Hash)
			if err != nil {
				err = msgp.WrapError(err, "Transactions", za0001, "Hash")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PovBlock) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 13
	// string "hash"
	o = append(o, 0x8d, 0xa4, 0x68, 0x61, 0x73, 0x68)
	o, err = msgp.AppendExtension(o, &z.Hash)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	// string "previous"
	o = append(o, 0xa8, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73)
	o, err = msgp.AppendExtension(o, &z.Previous)
	if err != nil {
		err = msgp.WrapError(err, "Previous")
		return
	}
	// string "merkleRoot"
	o = append(o, 0xaa, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74)
	o, err = msgp.AppendExtension(o, &z.MerkleRoot)
	if err != nil {
		err = msgp.WrapError(err, "MerkleRoot")
		return
	}
	// string "nonce"
	o = append(o, 0xa5, 0x6e, 0x6f, 0x6e, 0x63, 0x65)
	o = msgp.AppendUint64(o, z.Nonce)
	// string "voteSignature"
	o = append(o, 0xad, 0x76, 0x6f, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	o, err = msgp.AppendExtension(o, &z.VoteSignature)
	if err != nil {
		err = msgp.WrapError(err, "VoteSignature")
		return
	}
	// string "height"
	o = append(o, 0xa6, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendUint64(o, z.Height)
	// string "timestamp"
	o = append(o, 0xa9, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	o = msgp.AppendInt64(o, z.Timestamp)
	// string "target"
	o = append(o, 0xa6, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74)
	o, err = msgp.AppendExtension(o, &z.Target)
	if err != nil {
		err = msgp.WrapError(err, "Target")
		return
	}
	// string "coinbase"
	o = append(o, 0xa8, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65)
	o, err = msgp.AppendExtension(o, &z.Coinbase)
	if err != nil {
		err = msgp.WrapError(err, "Coinbase")
		return
	}
	// string "txNum"
	o = append(o, 0xa5, 0x74, 0x78, 0x4e, 0x75, 0x6d)
	o = msgp.AppendUint32(o, z.TxNum)
	// string "stateHash"
	o = append(o, 0xa9, 0x73, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68)
	o, err = msgp.AppendExtension(o, &z.StateHash)
	if err != nil {
		err = msgp.WrapError(err, "StateHash")
		return
	}
	// string "signature"
	o = append(o, 0xa9, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	o, err = msgp.AppendExtension(o, &z.Signature)
	if err != nil {
		err = msgp.WrapError(err, "Signature")
		return
	}
	// string "transactions"
	o = append(o, 0xac, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Transactions)))
	for za0001 := range z.Transactions {
		if z.Transactions[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 1
			// string "hash"
			o = append(o, 0x81, 0xa4, 0x68, 0x61, 0x73, 0x68)
			o, err = msgp.AppendExtension(o, &z.Transactions[za0001].Hash)
			if err != nil {
				err = msgp.WrapError(err, "Transactions", za0001, "Hash")
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PovBlock) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "hash":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Hash)
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		case "previous":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Previous)
			if err != nil {
				err = msgp.WrapError(err, "Previous")
				return
			}
		case "merkleRoot":
			bts, err = msgp.ReadExtensionBytes(bts, &z.MerkleRoot)
			if err != nil {
				err = msgp.WrapError(err, "MerkleRoot")
				return
			}
		case "nonce":
			z.Nonce, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Nonce")
				return
			}
		case "voteSignature":
			bts, err = msgp.ReadExtensionBytes(bts, &z.VoteSignature)
			if err != nil {
				err = msgp.WrapError(err, "VoteSignature")
				return
			}
		case "height":
			z.Height, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		case "timestamp":
			z.Timestamp, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		case "target":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Target)
			if err != nil {
				err = msgp.WrapError(err, "Target")
				return
			}
		case "coinbase":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Coinbase)
			if err != nil {
				err = msgp.WrapError(err, "Coinbase")
				return
			}
		case "txNum":
			z.TxNum, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TxNum")
				return
			}
		case "stateHash":
			bts, err = msgp.ReadExtensionBytes(bts, &z.StateHash)
			if err != nil {
				err = msgp.WrapError(err, "StateHash")
				return
			}
		case "signature":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Signature)
			if err != nil {
				err = msgp.WrapError(err, "Signature")
				return
			}
		case "transactions":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Transactions")
				return
			}
			if cap(z.Transactions) >= int(zb0002) {
				z.Transactions = (z.Transactions)[:zb0002]
			} else {
				z.Transactions = make([]*PovTransaction, zb0002)
			}
			for za0001 := range z.Transactions {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Transactions[za0001] = nil
				} else {
					if z.Transactions[za0001] == nil {
						z.Transactions[za0001] = new(PovTransaction)
					}
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Transactions", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "Transactions", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "hash":
							bts, err = msgp.ReadExtensionBytes(bts, &z.Transactions[za0001].Hash)
							if err != nil {
								err = msgp.WrapError(err, "Transactions", za0001, "Hash")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "Transactions", za0001)
								return
							}
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PovBlock) Msgsize() (s int) {
	s = 1 + 5 + msgp.ExtensionPrefixSize + z.Hash.Len() + 9 + msgp.ExtensionPrefixSize + z.Previous.Len() + 11 + msgp.ExtensionPrefixSize + z.MerkleRoot.Len() + 6 + msgp.Uint64Size + 14 + msgp.ExtensionPrefixSize + z.VoteSignature.Len() + 7 + msgp.Uint64Size + 10 + msgp.Int64Size + 7 + msgp.ExtensionPrefixSize + z.Target.Len() + 9 + msgp.ExtensionPrefixSize + z.Coinbase.Len() + 6 + msgp.Uint32Size + 10 + msgp.ExtensionPrefixSize + z.StateHash.Len() + 10 + msgp.ExtensionPrefixSize + z.Signature.Len() + 13 + msgp.ArrayHeaderSize
	for za0001 := range z.Transactions {
		if z.Transactions[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 5 + msgp.ExtensionPrefixSize + z.Transactions[za0001].Hash.Len()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PovBlockFrom) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint16
		zb0001, err = dc.ReadUint16()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = PovBlockFrom(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z PovBlockFrom) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint16(uint16(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z PovBlockFrom) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint16(o, uint16(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PovBlockFrom) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint16
		zb0001, bts, err = msgp.ReadUint16Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = PovBlockFrom(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z PovBlockFrom) Msgsize() (s int) {
	s = msgp.Uint16Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PovBlocks) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(PovBlocks, zb0002)
	}
	for zb0001 := range *z {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			(*z)[zb0001] = nil
		} else {
			if (*z)[zb0001] == nil {
				(*z)[zb0001] = new(PovBlock)
			}
			err = (*z)[zb0001].DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z PovBlocks) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0003 := range z {
		if z[zb0003] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z[zb0003].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, zb0003)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z PovBlocks) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zb0003 := range z {
		if z[zb0003] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z[zb0003].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, zb0003)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PovBlocks) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(PovBlocks, zb0002)
	}
	for zb0001 := range *z {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			(*z)[zb0001] = nil
		} else {
			if (*z)[zb0001] == nil {
				(*z)[zb0001] = new(PovBlock)
			}
			bts, err = (*z)[zb0001].UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z PovBlocks) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0003 := range z {
		if z[zb0003] == nil {
			s += msgp.NilSize
		} else {
			s += z[zb0003].Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PovBody) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "transactions":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Transactions")
				return
			}
			if cap(z.Transactions) >= int(zb0002) {
				z.Transactions = (z.Transactions)[:zb0002]
			} else {
				z.Transactions = make([]*PovTransaction, zb0002)
			}
			for za0001 := range z.Transactions {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Transactions", za0001)
						return
					}
					z.Transactions[za0001] = nil
				} else {
					if z.Transactions[za0001] == nil {
						z.Transactions[za0001] = new(PovTransaction)
					}
					var zb0003 uint32
					zb0003, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "Transactions", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "Transactions", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "hash":
							err = dc.ReadExtension(&z.Transactions[za0001].Hash)
							if err != nil {
								err = msgp.WrapError(err, "Transactions", za0001, "Hash")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "Transactions", za0001)
								return
							}
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PovBody) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "transactions"
	err = en.Append(0x81, 0xac, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Transactions)))
	if err != nil {
		err = msgp.WrapError(err, "Transactions")
		return
	}
	for za0001 := range z.Transactions {
		if z.Transactions[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 1
			// write "hash"
			err = en.Append(0x81, 0xa4, 0x68, 0x61, 0x73, 0x68)
			if err != nil {
				return
			}
			err = en.WriteExtension(&z.Transactions[za0001].Hash)
			if err != nil {
				err = msgp.WrapError(err, "Transactions", za0001, "Hash")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PovBody) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "transactions"
	o = append(o, 0x81, 0xac, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Transactions)))
	for za0001 := range z.Transactions {
		if z.Transactions[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 1
			// string "hash"
			o = append(o, 0x81, 0xa4, 0x68, 0x61, 0x73, 0x68)
			o, err = msgp.AppendExtension(o, &z.Transactions[za0001].Hash)
			if err != nil {
				err = msgp.WrapError(err, "Transactions", za0001, "Hash")
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PovBody) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "transactions":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Transactions")
				return
			}
			if cap(z.Transactions) >= int(zb0002) {
				z.Transactions = (z.Transactions)[:zb0002]
			} else {
				z.Transactions = make([]*PovTransaction, zb0002)
			}
			for za0001 := range z.Transactions {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Transactions[za0001] = nil
				} else {
					if z.Transactions[za0001] == nil {
						z.Transactions[za0001] = new(PovTransaction)
					}
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Transactions", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "Transactions", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "hash":
							bts, err = msgp.ReadExtensionBytes(bts, &z.Transactions[za0001].Hash)
							if err != nil {
								err = msgp.WrapError(err, "Transactions", za0001, "Hash")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "Transactions", za0001)
								return
							}
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PovBody) Msgsize() (s int) {
	s = 1 + 13 + msgp.ArrayHeaderSize
	for za0001 := range z.Transactions {
		if z.Transactions[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 5 + msgp.ExtensionPrefixSize + z.Transactions[za0001].Hash.Len()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PovHeader) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "hash":
			err = dc.ReadExtension(&z.Hash)
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		case "previous":
			err = dc.ReadExtension(&z.Previous)
			if err != nil {
				err = msgp.WrapError(err, "Previous")
				return
			}
		case "merkleRoot":
			err = dc.ReadExtension(&z.MerkleRoot)
			if err != nil {
				err = msgp.WrapError(err, "MerkleRoot")
				return
			}
		case "nonce":
			z.Nonce, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Nonce")
				return
			}
		case "voteSignature":
			err = dc.ReadExtension(&z.VoteSignature)
			if err != nil {
				err = msgp.WrapError(err, "VoteSignature")
				return
			}
		case "height":
			z.Height, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		case "timestamp":
			z.Timestamp, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		case "target":
			err = dc.ReadExtension(&z.Target)
			if err != nil {
				err = msgp.WrapError(err, "Target")
				return
			}
		case "coinbase":
			err = dc.ReadExtension(&z.Coinbase)
			if err != nil {
				err = msgp.WrapError(err, "Coinbase")
				return
			}
		case "txNum":
			z.TxNum, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "TxNum")
				return
			}
		case "stateHash":
			err = dc.ReadExtension(&z.StateHash)
			if err != nil {
				err = msgp.WrapError(err, "StateHash")
				return
			}
		case "signature":
			err = dc.ReadExtension(&z.Signature)
			if err != nil {
				err = msgp.WrapError(err, "Signature")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PovHeader) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 12
	// write "hash"
	err = en.Append(0x8c, 0xa4, 0x68, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Hash)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	// write "previous"
	err = en.Append(0xa8, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Previous)
	if err != nil {
		err = msgp.WrapError(err, "Previous")
		return
	}
	// write "merkleRoot"
	err = en.Append(0xaa, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.MerkleRoot)
	if err != nil {
		err = msgp.WrapError(err, "MerkleRoot")
		return
	}
	// write "nonce"
	err = en.Append(0xa5, 0x6e, 0x6f, 0x6e, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Nonce)
	if err != nil {
		err = msgp.WrapError(err, "Nonce")
		return
	}
	// write "voteSignature"
	err = en.Append(0xad, 0x76, 0x6f, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.VoteSignature)
	if err != nil {
		err = msgp.WrapError(err, "VoteSignature")
		return
	}
	// write "height"
	err = en.Append(0xa6, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Height)
	if err != nil {
		err = msgp.WrapError(err, "Height")
		return
	}
	// write "timestamp"
	err = en.Append(0xa9, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	// write "target"
	err = en.Append(0xa6, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Target)
	if err != nil {
		err = msgp.WrapError(err, "Target")
		return
	}
	// write "coinbase"
	err = en.Append(0xa8, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Coinbase)
	if err != nil {
		err = msgp.WrapError(err, "Coinbase")
		return
	}
	// write "txNum"
	err = en.Append(0xa5, 0x74, 0x78, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.TxNum)
	if err != nil {
		err = msgp.WrapError(err, "TxNum")
		return
	}
	// write "stateHash"
	err = en.Append(0xa9, 0x73, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.StateHash)
	if err != nil {
		err = msgp.WrapError(err, "StateHash")
		return
	}
	// write "signature"
	err = en.Append(0xa9, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Signature)
	if err != nil {
		err = msgp.WrapError(err, "Signature")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PovHeader) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 12
	// string "hash"
	o = append(o, 0x8c, 0xa4, 0x68, 0x61, 0x73, 0x68)
	o, err = msgp.AppendExtension(o, &z.Hash)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	// string "previous"
	o = append(o, 0xa8, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73)
	o, err = msgp.AppendExtension(o, &z.Previous)
	if err != nil {
		err = msgp.WrapError(err, "Previous")
		return
	}
	// string "merkleRoot"
	o = append(o, 0xaa, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74)
	o, err = msgp.AppendExtension(o, &z.MerkleRoot)
	if err != nil {
		err = msgp.WrapError(err, "MerkleRoot")
		return
	}
	// string "nonce"
	o = append(o, 0xa5, 0x6e, 0x6f, 0x6e, 0x63, 0x65)
	o = msgp.AppendUint64(o, z.Nonce)
	// string "voteSignature"
	o = append(o, 0xad, 0x76, 0x6f, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	o, err = msgp.AppendExtension(o, &z.VoteSignature)
	if err != nil {
		err = msgp.WrapError(err, "VoteSignature")
		return
	}
	// string "height"
	o = append(o, 0xa6, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendUint64(o, z.Height)
	// string "timestamp"
	o = append(o, 0xa9, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	o = msgp.AppendInt64(o, z.Timestamp)
	// string "target"
	o = append(o, 0xa6, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74)
	o, err = msgp.AppendExtension(o, &z.Target)
	if err != nil {
		err = msgp.WrapError(err, "Target")
		return
	}
	// string "coinbase"
	o = append(o, 0xa8, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65)
	o, err = msgp.AppendExtension(o, &z.Coinbase)
	if err != nil {
		err = msgp.WrapError(err, "Coinbase")
		return
	}
	// string "txNum"
	o = append(o, 0xa5, 0x74, 0x78, 0x4e, 0x75, 0x6d)
	o = msgp.AppendUint32(o, z.TxNum)
	// string "stateHash"
	o = append(o, 0xa9, 0x73, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68)
	o, err = msgp.AppendExtension(o, &z.StateHash)
	if err != nil {
		err = msgp.WrapError(err, "StateHash")
		return
	}
	// string "signature"
	o = append(o, 0xa9, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	o, err = msgp.AppendExtension(o, &z.Signature)
	if err != nil {
		err = msgp.WrapError(err, "Signature")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PovHeader) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "hash":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Hash)
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		case "previous":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Previous)
			if err != nil {
				err = msgp.WrapError(err, "Previous")
				return
			}
		case "merkleRoot":
			bts, err = msgp.ReadExtensionBytes(bts, &z.MerkleRoot)
			if err != nil {
				err = msgp.WrapError(err, "MerkleRoot")
				return
			}
		case "nonce":
			z.Nonce, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Nonce")
				return
			}
		case "voteSignature":
			bts, err = msgp.ReadExtensionBytes(bts, &z.VoteSignature)
			if err != nil {
				err = msgp.WrapError(err, "VoteSignature")
				return
			}
		case "height":
			z.Height, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Height")
				return
			}
		case "timestamp":
			z.Timestamp, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		case "target":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Target)
			if err != nil {
				err = msgp.WrapError(err, "Target")
				return
			}
		case "coinbase":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Coinbase)
			if err != nil {
				err = msgp.WrapError(err, "Coinbase")
				return
			}
		case "txNum":
			z.TxNum, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TxNum")
				return
			}
		case "stateHash":
			bts, err = msgp.ReadExtensionBytes(bts, &z.StateHash)
			if err != nil {
				err = msgp.WrapError(err, "StateHash")
				return
			}
		case "signature":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Signature)
			if err != nil {
				err = msgp.WrapError(err, "Signature")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PovHeader) Msgsize() (s int) {
	s = 1 + 5 + msgp.ExtensionPrefixSize + z.Hash.Len() + 9 + msgp.ExtensionPrefixSize + z.Previous.Len() + 11 + msgp.ExtensionPrefixSize + z.MerkleRoot.Len() + 6 + msgp.Uint64Size + 14 + msgp.ExtensionPrefixSize + z.VoteSignature.Len() + 7 + msgp.Uint64Size + 10 + msgp.Int64Size + 7 + msgp.ExtensionPrefixSize + z.Target.Len() + 9 + msgp.ExtensionPrefixSize + z.Coinbase.Len() + 6 + msgp.Uint32Size + 10 + msgp.ExtensionPrefixSize + z.StateHash.Len() + 10 + msgp.ExtensionPrefixSize + z.Signature.Len()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PovMinerDayStat) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "dayIndex":
			z.DayIndex, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "DayIndex")
				return
			}
		case "minerNum":
			z.MinerNum, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "MinerNum")
				return
			}
		case "minerStats":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "MinerStats")
				return
			}
			if z.MinerStats == nil {
				z.MinerStats = make(map[string]*PovMinerStatItem, zb0002)
			} else if len(z.MinerStats) > 0 {
				for key := range z.MinerStats {
					delete(z.MinerStats, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 *PovMinerStatItem
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "MinerStats")
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "MinerStats", za0001)
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(PovMinerStatItem)
					}
					var zb0003 uint32
					zb0003, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "MinerStats", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "MinerStats", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "firstHeight":
							za0002.FirstHeight, err = dc.ReadUint64()
							if err != nil {
								err = msgp.WrapError(err, "MinerStats", za0001, "FirstHeight")
								return
							}
						case "lastHeight":
							za0002.LastHeight, err = dc.ReadUint64()
							if err != nil {
								err = msgp.WrapError(err, "MinerStats", za0001, "LastHeight")
								return
							}
						case "blockNum":
							za0002.BlockNum, err = dc.ReadUint32()
							if err != nil {
								err = msgp.WrapError(err, "MinerStats", za0001, "BlockNum")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "MinerStats", za0001)
								return
							}
						}
					}
				}
				z.MinerStats[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PovMinerDayStat) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "dayIndex"
	err = en.Append(0x83, 0xa8, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.DayIndex)
	if err != nil {
		err = msgp.WrapError(err, "DayIndex")
		return
	}
	// write "minerNum"
	err = en.Append(0xa8, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.MinerNum)
	if err != nil {
		err = msgp.WrapError(err, "MinerNum")
		return
	}
	// write "minerStats"
	err = en.Append(0xaa, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.MinerStats)))
	if err != nil {
		err = msgp.WrapError(err, "MinerStats")
		return
	}
	for za0001, za0002 := range z.MinerStats {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "MinerStats")
			return
		}
		if za0002 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 3
			// write "firstHeight"
			err = en.Append(0x83, 0xab, 0x66, 0x69, 0x72, 0x73, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
			if err != nil {
				return
			}
			err = en.WriteUint64(za0002.FirstHeight)
			if err != nil {
				err = msgp.WrapError(err, "MinerStats", za0001, "FirstHeight")
				return
			}
			// write "lastHeight"
			err = en.Append(0xaa, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
			if err != nil {
				return
			}
			err = en.WriteUint64(za0002.LastHeight)
			if err != nil {
				err = msgp.WrapError(err, "MinerStats", za0001, "LastHeight")
				return
			}
			// write "blockNum"
			err = en.Append(0xa8, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d)
			if err != nil {
				return
			}
			err = en.WriteUint32(za0002.BlockNum)
			if err != nil {
				err = msgp.WrapError(err, "MinerStats", za0001, "BlockNum")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PovMinerDayStat) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "dayIndex"
	o = append(o, 0x83, 0xa8, 0x64, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendUint32(o, z.DayIndex)
	// string "minerNum"
	o = append(o, 0xa8, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x75, 0x6d)
	o = msgp.AppendUint32(o, z.MinerNum)
	// string "minerStats"
	o = append(o, 0xaa, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.MinerStats)))
	for za0001, za0002 := range z.MinerStats {
		o = msgp.AppendString(o, za0001)
		if za0002 == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 3
			// string "firstHeight"
			o = append(o, 0x83, 0xab, 0x66, 0x69, 0x72, 0x73, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
			o = msgp.AppendUint64(o, za0002.FirstHeight)
			// string "lastHeight"
			o = append(o, 0xaa, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
			o = msgp.AppendUint64(o, za0002.LastHeight)
			// string "blockNum"
			o = append(o, 0xa8, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d)
			o = msgp.AppendUint32(o, za0002.BlockNum)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PovMinerDayStat) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "dayIndex":
			z.DayIndex, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DayIndex")
				return
			}
		case "minerNum":
			z.MinerNum, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MinerNum")
				return
			}
		case "minerStats":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MinerStats")
				return
			}
			if z.MinerStats == nil {
				z.MinerStats = make(map[string]*PovMinerStatItem, zb0002)
			} else if len(z.MinerStats) > 0 {
				for key := range z.MinerStats {
					delete(z.MinerStats, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 *PovMinerStatItem
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "MinerStats")
					return
				}
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(PovMinerStatItem)
					}
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "MinerStats", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "MinerStats", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "firstHeight":
							za0002.FirstHeight, bts, err = msgp.ReadUint64Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "MinerStats", za0001, "FirstHeight")
								return
							}
						case "lastHeight":
							za0002.LastHeight, bts, err = msgp.ReadUint64Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "MinerStats", za0001, "LastHeight")
								return
							}
						case "blockNum":
							za0002.BlockNum, bts, err = msgp.ReadUint32Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "MinerStats", za0001, "BlockNum")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "MinerStats", za0001)
								return
							}
						}
					}
				}
				z.MinerStats[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PovMinerDayStat) Msgsize() (s int) {
	s = 1 + 9 + msgp.Uint32Size + 9 + msgp.Uint32Size + 11 + msgp.MapHeaderSize
	if z.MinerStats != nil {
		for za0001, za0002 := range z.MinerStats {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001)
			if za0002 == nil {
				s += msgp.NilSize
			} else {
				s += 1 + 12 + msgp.Uint64Size + 11 + msgp.Uint64Size + 9 + msgp.Uint32Size
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PovMinerStatItem) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "firstHeight":
			z.FirstHeight, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "FirstHeight")
				return
			}
		case "lastHeight":
			z.LastHeight, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "LastHeight")
				return
			}
		case "blockNum":
			z.BlockNum, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "BlockNum")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z PovMinerStatItem) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "firstHeight"
	err = en.Append(0x83, 0xab, 0x66, 0x69, 0x72, 0x73, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.FirstHeight)
	if err != nil {
		err = msgp.WrapError(err, "FirstHeight")
		return
	}
	// write "lastHeight"
	err = en.Append(0xaa, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.LastHeight)
	if err != nil {
		err = msgp.WrapError(err, "LastHeight")
		return
	}
	// write "blockNum"
	err = en.Append(0xa8, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.BlockNum)
	if err != nil {
		err = msgp.WrapError(err, "BlockNum")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z PovMinerStatItem) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "firstHeight"
	o = append(o, 0x83, 0xab, 0x66, 0x69, 0x72, 0x73, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendUint64(o, z.FirstHeight)
	// string "lastHeight"
	o = append(o, 0xaa, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendUint64(o, z.LastHeight)
	// string "blockNum"
	o = append(o, 0xa8, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d)
	o = msgp.AppendUint32(o, z.BlockNum)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PovMinerStatItem) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "firstHeight":
			z.FirstHeight, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FirstHeight")
				return
			}
		case "lastHeight":
			z.LastHeight, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastHeight")
				return
			}
		case "blockNum":
			z.BlockNum, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlockNum")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z PovMinerStatItem) Msgsize() (s int) {
	s = 1 + 12 + msgp.Uint64Size + 11 + msgp.Uint64Size + 9 + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PovTransaction) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "hash":
			err = dc.ReadExtension(&z.Hash)
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z PovTransaction) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "hash"
	err = en.Append(0x81, 0xa4, 0x68, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Hash)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z PovTransaction) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "hash"
	o = append(o, 0x81, 0xa4, 0x68, 0x61, 0x73, 0x68)
	o, err = msgp.AppendExtension(o, &z.Hash)
	if err != nil {
		err = msgp.WrapError(err, "Hash")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PovTransaction) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "hash":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Hash)
			if err != nil {
				err = msgp.WrapError(err, "Hash")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z PovTransaction) Msgsize() (s int) {
	s = 1 + 5 + msgp.ExtensionPrefixSize + z.Hash.Len()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PovTxLookup) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "blockHash":
			err = dc.ReadExtension(&z.BlockHash)
			if err != nil {
				err = msgp.WrapError(err, "BlockHash")
				return
			}
		case "blockHeight":
			z.BlockHeight, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "BlockHeight")
				return
			}
		case "txIndex":
			z.TxIndex, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "TxIndex")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z PovTxLookup) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "blockHash"
	err = en.Append(0x83, 0xa9, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.BlockHash)
	if err != nil {
		err = msgp.WrapError(err, "BlockHash")
		return
	}
	// write "blockHeight"
	err = en.Append(0xab, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.BlockHeight)
	if err != nil {
		err = msgp.WrapError(err, "BlockHeight")
		return
	}
	// write "txIndex"
	err = en.Append(0xa7, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.TxIndex)
	if err != nil {
		err = msgp.WrapError(err, "TxIndex")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z PovTxLookup) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "blockHash"
	o = append(o, 0x83, 0xa9, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68)
	o, err = msgp.AppendExtension(o, &z.BlockHash)
	if err != nil {
		err = msgp.WrapError(err, "BlockHash")
		return
	}
	// string "blockHeight"
	o = append(o, 0xab, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendUint64(o, z.BlockHeight)
	// string "txIndex"
	o = append(o, 0xa7, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78)
	o = msgp.AppendUint64(o, z.TxIndex)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PovTxLookup) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "blockHash":
			bts, err = msgp.ReadExtensionBytes(bts, &z.BlockHash)
			if err != nil {
				err = msgp.WrapError(err, "BlockHash")
				return
			}
		case "blockHeight":
			z.BlockHeight, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BlockHeight")
				return
			}
		case "txIndex":
			z.TxIndex, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TxIndex")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z PovTxLookup) Msgsize() (s int) {
	s = 1 + 10 + msgp.ExtensionPrefixSize + z.BlockHash.Len() + 12 + msgp.Uint64Size + 8 + msgp.Uint64Size
	return
}
