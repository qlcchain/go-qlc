package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *SmartContractBlock) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "address":
			err = dc.ReadExtension(&z.Address)
			if err != nil {
				return
			}
		case "internalAccount":
			err = dc.ReadExtension(&z.InternalAccount)
			if err != nil {
				return
			}
		case "extraAddress":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.ExtraAddress) >= int(zb0002) {
				z.ExtraAddress = (z.ExtraAddress)[:zb0002]
			} else {
				z.ExtraAddress = make([]Address, zb0002)
			}
			for za0001 := range z.ExtraAddress {
				err = z.ExtraAddress[za0001].DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "owner":
			err = dc.ReadExtension(&z.Owner)
			if err != nil {
				return
			}
		case "contract":
			err = dc.ReadExtension(&z.Abi)
			if err != nil {
				return
			}
		case "schema":
			z.AbiSchema, err = dc.ReadString()
			if err != nil {
				return
			}
		case "isUseStorage":
			z.IsUseStorage, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "work":
			err = dc.ReadExtension(&z.Work)
			if err != nil {
				return
			}
		case "signature":
			err = dc.ReadExtension(&z.Signature)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SmartContractBlock) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 9
	// write "address"
	err = en.Append(0x89, 0xa7, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Address)
	if err != nil {
		return
	}
	// write "internalAccount"
	err = en.Append(0xaf, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.InternalAccount)
	if err != nil {
		return
	}
	// write "extraAddress"
	err = en.Append(0xac, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ExtraAddress)))
	if err != nil {
		return
	}
	for za0001 := range z.ExtraAddress {
		err = z.ExtraAddress[za0001].EncodeMsg(en)
		if err != nil {
			return
		}
	}
	// write "owner"
	err = en.Append(0xa5, 0x6f, 0x77, 0x6e, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Owner)
	if err != nil {
		return
	}
	// write "contract"
	err = en.Append(0xa8, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Abi)
	if err != nil {
		return
	}
	// write "schema"
	err = en.Append(0xa6, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61)
	if err != nil {
		return
	}
	err = en.WriteString(z.AbiSchema)
	if err != nil {
		return
	}
	// write "isUseStorage"
	err = en.Append(0xac, 0x69, 0x73, 0x55, 0x73, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsUseStorage)
	if err != nil {
		return
	}
	// write "work"
	err = en.Append(0xa4, 0x77, 0x6f, 0x72, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Work)
	if err != nil {
		return
	}
	// write "signature"
	err = en.Append(0xa9, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Signature)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SmartContractBlock) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 9
	// string "address"
	o = append(o, 0x89, 0xa7, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o, err = msgp.AppendExtension(o, &z.Address)
	if err != nil {
		return
	}
	// string "internalAccount"
	o = append(o, 0xaf, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74)
	o, err = msgp.AppendExtension(o, &z.InternalAccount)
	if err != nil {
		return
	}
	// string "extraAddress"
	o = append(o, 0xac, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ExtraAddress)))
	for za0001 := range z.ExtraAddress {
		o, err = z.ExtraAddress[za0001].MarshalMsg(o)
		if err != nil {
			return
		}
	}
	// string "owner"
	o = append(o, 0xa5, 0x6f, 0x77, 0x6e, 0x65, 0x72)
	o, err = msgp.AppendExtension(o, &z.Owner)
	if err != nil {
		return
	}
	// string "contract"
	o = append(o, 0xa8, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74)
	o, err = msgp.AppendExtension(o, &z.Abi)
	if err != nil {
		return
	}
	// string "schema"
	o = append(o, 0xa6, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61)
	o = msgp.AppendString(o, z.AbiSchema)
	// string "isUseStorage"
	o = append(o, 0xac, 0x69, 0x73, 0x55, 0x73, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65)
	o = msgp.AppendBool(o, z.IsUseStorage)
	// string "work"
	o = append(o, 0xa4, 0x77, 0x6f, 0x72, 0x6b)
	o, err = msgp.AppendExtension(o, &z.Work)
	if err != nil {
		return
	}
	// string "signature"
	o = append(o, 0xa9, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	o, err = msgp.AppendExtension(o, &z.Signature)
	if err != nil {
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SmartContractBlock) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "address":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Address)
			if err != nil {
				return
			}
		case "internalAccount":
			bts, err = msgp.ReadExtensionBytes(bts, &z.InternalAccount)
			if err != nil {
				return
			}
		case "extraAddress":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.ExtraAddress) >= int(zb0002) {
				z.ExtraAddress = (z.ExtraAddress)[:zb0002]
			} else {
				z.ExtraAddress = make([]Address, zb0002)
			}
			for za0001 := range z.ExtraAddress {
				bts, err = z.ExtraAddress[za0001].UnmarshalMsg(bts)
				if err != nil {
					return
				}
			}
		case "owner":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Owner)
			if err != nil {
				return
			}
		case "contract":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Abi)
			if err != nil {
				return
			}
		case "schema":
			z.AbiSchema, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "isUseStorage":
			z.IsUseStorage, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				return
			}
		case "work":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Work)
			if err != nil {
				return
			}
		case "signature":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Signature)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SmartContractBlock) Msgsize() (s int) {
	s = 1 + 8 + msgp.ExtensionPrefixSize + z.Address.Len() + 16 + msgp.ExtensionPrefixSize + z.InternalAccount.Len() + 13 + msgp.ArrayHeaderSize
	for za0001 := range z.ExtraAddress {
		s += z.ExtraAddress[za0001].Msgsize()
	}
	s += 6 + msgp.ExtensionPrefixSize + z.Owner.Len() + 9 + msgp.ExtensionPrefixSize + z.Abi.Len() + 7 + msgp.StringPrefixSize + len(z.AbiSchema) + 13 + msgp.BoolSize + 5 + msgp.ExtensionPrefixSize + z.Work.Len() + 10 + msgp.ExtensionPrefixSize + z.Signature.Len()
	return
}
