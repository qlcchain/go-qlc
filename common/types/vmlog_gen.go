package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *VmLog) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "topics":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Topics")
				return
			}
			if cap(z.Topics) >= int(zb0002) {
				z.Topics = (z.Topics)[:zb0002]
			} else {
				z.Topics = make([]Hash, zb0002)
			}
			for za0001 := range z.Topics {
				err = z.Topics[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Topics", za0001)
					return
				}
			}
		case "data":
			z.Data, err = dc.ReadBytes(z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *VmLog) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "topics"
	err = en.Append(0x82, 0xa6, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Topics)))
	if err != nil {
		err = msgp.WrapError(err, "Topics")
		return
	}
	for za0001 := range z.Topics {
		err = z.Topics[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Topics", za0001)
			return
		}
	}
	// write "data"
	err = en.Append(0xa4, 0x64, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *VmLog) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "topics"
	o = append(o, 0x82, 0xa6, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Topics)))
	for za0001 := range z.Topics {
		o, err = z.Topics[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Topics", za0001)
			return
		}
	}
	// string "data"
	o = append(o, 0xa4, 0x64, 0x61, 0x74, 0x61)
	o = msgp.AppendBytes(o, z.Data)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *VmLog) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "topics":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Topics")
				return
			}
			if cap(z.Topics) >= int(zb0002) {
				z.Topics = (z.Topics)[:zb0002]
			} else {
				z.Topics = make([]Hash, zb0002)
			}
			for za0001 := range z.Topics {
				bts, err = z.Topics[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Topics", za0001)
					return
				}
			}
		case "data":
			z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *VmLog) Msgsize() (s int) {
	s = 1 + 7 + msgp.ArrayHeaderSize
	for za0001 := range z.Topics {
		s += z.Topics[za0001].Msgsize()
	}
	s += 5 + msgp.BytesPrefixSize + len(z.Data)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *VmLogs) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "logs":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Logs")
				return
			}
			if cap(z.Logs) >= int(zb0002) {
				z.Logs = (z.Logs)[:zb0002]
			} else {
				z.Logs = make([]*VmLog, zb0002)
			}
			for za0001 := range z.Logs {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Logs", za0001)
						return
					}
					z.Logs[za0001] = nil
				} else {
					if z.Logs[za0001] == nil {
						z.Logs[za0001] = new(VmLog)
					}
					var zb0003 uint32
					zb0003, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "Logs", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "Logs", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "topics":
							var zb0004 uint32
							zb0004, err = dc.ReadArrayHeader()
							if err != nil {
								err = msgp.WrapError(err, "Logs", za0001, "Topics")
								return
							}
							if cap(z.Logs[za0001].Topics) >= int(zb0004) {
								z.Logs[za0001].Topics = (z.Logs[za0001].Topics)[:zb0004]
							} else {
								z.Logs[za0001].Topics = make([]Hash, zb0004)
							}
							for za0002 := range z.Logs[za0001].Topics {
								err = z.Logs[za0001].Topics[za0002].DecodeMsg(dc)
								if err != nil {
									err = msgp.WrapError(err, "Logs", za0001, "Topics", za0002)
									return
								}
							}
						case "data":
							z.Logs[za0001].Data, err = dc.ReadBytes(z.Logs[za0001].Data)
							if err != nil {
								err = msgp.WrapError(err, "Logs", za0001, "Data")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "Logs", za0001)
								return
							}
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *VmLogs) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "logs"
	err = en.Append(0x81, 0xa4, 0x6c, 0x6f, 0x67, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Logs)))
	if err != nil {
		err = msgp.WrapError(err, "Logs")
		return
	}
	for za0001 := range z.Logs {
		if z.Logs[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 2
			// write "topics"
			err = en.Append(0x82, 0xa6, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73)
			if err != nil {
				return
			}
			err = en.WriteArrayHeader(uint32(len(z.Logs[za0001].Topics)))
			if err != nil {
				err = msgp.WrapError(err, "Logs", za0001, "Topics")
				return
			}
			for za0002 := range z.Logs[za0001].Topics {
				err = z.Logs[za0001].Topics[za0002].EncodeMsg(en)
				if err != nil {
					err = msgp.WrapError(err, "Logs", za0001, "Topics", za0002)
					return
				}
			}
			// write "data"
			err = en.Append(0xa4, 0x64, 0x61, 0x74, 0x61)
			if err != nil {
				return
			}
			err = en.WriteBytes(z.Logs[za0001].Data)
			if err != nil {
				err = msgp.WrapError(err, "Logs", za0001, "Data")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *VmLogs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "logs"
	o = append(o, 0x81, 0xa4, 0x6c, 0x6f, 0x67, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Logs)))
	for za0001 := range z.Logs {
		if z.Logs[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "topics"
			o = append(o, 0x82, 0xa6, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73)
			o = msgp.AppendArrayHeader(o, uint32(len(z.Logs[za0001].Topics)))
			for za0002 := range z.Logs[za0001].Topics {
				o, err = z.Logs[za0001].Topics[za0002].MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "Logs", za0001, "Topics", za0002)
					return
				}
			}
			// string "data"
			o = append(o, 0xa4, 0x64, 0x61, 0x74, 0x61)
			o = msgp.AppendBytes(o, z.Logs[za0001].Data)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *VmLogs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "logs":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Logs")
				return
			}
			if cap(z.Logs) >= int(zb0002) {
				z.Logs = (z.Logs)[:zb0002]
			} else {
				z.Logs = make([]*VmLog, zb0002)
			}
			for za0001 := range z.Logs {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Logs[za0001] = nil
				} else {
					if z.Logs[za0001] == nil {
						z.Logs[za0001] = new(VmLog)
					}
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Logs", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "Logs", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "topics":
							var zb0004 uint32
							zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Logs", za0001, "Topics")
								return
							}
							if cap(z.Logs[za0001].Topics) >= int(zb0004) {
								z.Logs[za0001].Topics = (z.Logs[za0001].Topics)[:zb0004]
							} else {
								z.Logs[za0001].Topics = make([]Hash, zb0004)
							}
							for za0002 := range z.Logs[za0001].Topics {
								bts, err = z.Logs[za0001].Topics[za0002].UnmarshalMsg(bts)
								if err != nil {
									err = msgp.WrapError(err, "Logs", za0001, "Topics", za0002)
									return
								}
							}
						case "data":
							z.Logs[za0001].Data, bts, err = msgp.ReadBytesBytes(bts, z.Logs[za0001].Data)
							if err != nil {
								err = msgp.WrapError(err, "Logs", za0001, "Data")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "Logs", za0001)
								return
							}
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *VmLogs) Msgsize() (s int) {
	s = 1 + 5 + msgp.ArrayHeaderSize
	for za0001 := range z.Logs {
		if z.Logs[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 7 + msgp.ArrayHeaderSize
			for za0002 := range z.Logs[za0001].Topics {
				s += z.Logs[za0001].Topics[za0002].Msgsize()
			}
			s += 5 + msgp.BytesPrefixSize + len(z.Logs[za0001].Data)
		}
	}
	return
}
