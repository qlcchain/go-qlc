package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *ContractAbi) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "abi":
			z.Abi, err = dc.ReadBytes(z.Abi)
			if err != nil {
				err = msgp.WrapError(err, "Abi")
				return
			}
		case "abiLength":
			z.AbiLength, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "AbiLength")
				return
			}
		case "abiHash":
			err = dc.ReadExtension(&z.AbiHash)
			if err != nil {
				err = msgp.WrapError(err, "AbiHash")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ContractAbi) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "abi"
	err = en.Append(0x83, 0xa3, 0x61, 0x62, 0x69)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Abi)
	if err != nil {
		err = msgp.WrapError(err, "Abi")
		return
	}
	// write "abiLength"
	err = en.Append(0xa9, 0x61, 0x62, 0x69, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.AbiLength)
	if err != nil {
		err = msgp.WrapError(err, "AbiLength")
		return
	}
	// write "abiHash"
	err = en.Append(0xa7, 0x61, 0x62, 0x69, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.AbiHash)
	if err != nil {
		err = msgp.WrapError(err, "AbiHash")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ContractAbi) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "abi"
	o = append(o, 0x83, 0xa3, 0x61, 0x62, 0x69)
	o = msgp.AppendBytes(o, z.Abi)
	// string "abiLength"
	o = append(o, 0xa9, 0x61, 0x62, 0x69, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68)
	o = msgp.AppendUint64(o, z.AbiLength)
	// string "abiHash"
	o = append(o, 0xa7, 0x61, 0x62, 0x69, 0x48, 0x61, 0x73, 0x68)
	o, err = msgp.AppendExtension(o, &z.AbiHash)
	if err != nil {
		err = msgp.WrapError(err, "AbiHash")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ContractAbi) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "abi":
			z.Abi, bts, err = msgp.ReadBytesBytes(bts, z.Abi)
			if err != nil {
				err = msgp.WrapError(err, "Abi")
				return
			}
		case "abiLength":
			z.AbiLength, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AbiLength")
				return
			}
		case "abiHash":
			bts, err = msgp.ReadExtensionBytes(bts, &z.AbiHash)
			if err != nil {
				err = msgp.WrapError(err, "AbiHash")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ContractAbi) Msgsize() (s int) {
	s = 1 + 4 + msgp.BytesPrefixSize + len(z.Abi) + 10 + msgp.Uint64Size + 8 + msgp.ExtensionPrefixSize + z.AbiHash.Len()
	return
}
