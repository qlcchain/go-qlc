package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *PeerInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "PeerID":
			z.PeerID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "PeerID")
				return
			}
		case "Address":
			z.Address, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "Version":
			z.Version, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "Rtt":
			z.Rtt, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Rtt")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PeerInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "PeerID"
	err = en.Append(0x84, 0xa6, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.PeerID)
	if err != nil {
		err = msgp.WrapError(err, "PeerID")
		return
	}
	// write "Address"
	err = en.Append(0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Address)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	// write "Version"
	err = en.Append(0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Version)
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	// write "Rtt"
	err = en.Append(0xa3, 0x52, 0x74, 0x74)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Rtt)
	if err != nil {
		err = msgp.WrapError(err, "Rtt")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PeerInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "PeerID"
	o = append(o, 0x84, 0xa6, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44)
	o = msgp.AppendString(o, z.PeerID)
	// string "Address"
	o = append(o, 0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendString(o, z.Address)
	// string "Version"
	o = append(o, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Version)
	// string "Rtt"
	o = append(o, 0xa3, 0x52, 0x74, 0x74)
	o = msgp.AppendFloat64(o, z.Rtt)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PeerInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "PeerID":
			z.PeerID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PeerID")
				return
			}
		case "Address":
			z.Address, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
		case "Version":
			z.Version, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "Rtt":
			z.Rtt, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Rtt")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PeerInfo) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.PeerID) + 8 + msgp.StringPrefixSize + len(z.Address) + 8 + msgp.StringPrefixSize + len(z.Version) + 4 + msgp.Float64Size
	return
}
