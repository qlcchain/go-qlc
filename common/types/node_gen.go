package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *TrieNode) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "hash":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Hash")
					return
				}
				z.Hash = nil
			} else {
				if z.Hash == nil {
					z.Hash = new(Hash)
				}
				err = dc.ReadExtension(z.Hash)
				if err != nil {
					err = msgp.WrapError(err, "Hash")
					return
				}
			}
		case "type":
			z.Type, err = dc.ReadByte()
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "children":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Children")
				return
			}
			if z.Children == nil {
				z.Children = make(map[string][]byte, zb0002)
			} else if len(z.Children) > 0 {
				for key := range z.Children {
					delete(z.Children, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 []byte
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Children")
					return
				}
				za0002, err = dc.ReadBytes(za0002)
				if err != nil {
					err = msgp.WrapError(err, "Children", za0001)
					return
				}
				z.Children[za0001] = za0002
			}
		case "key":
			z.Key, err = dc.ReadBytes(z.Key)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "child":
			z.Child, err = dc.ReadBytes(z.Child)
			if err != nil {
				err = msgp.WrapError(err, "Child")
				return
			}
		case "value":
			z.Value, err = dc.ReadBytes(z.Value)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TrieNode) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "hash"
	err = en.Append(0x86, 0xa4, 0x68, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	if z.Hash == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteExtension(z.Hash)
		if err != nil {
			err = msgp.WrapError(err, "Hash")
			return
		}
	}
	// write "type"
	err = en.Append(0xa4, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteByte(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "children"
	err = en.Append(0xa8, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Children)))
	if err != nil {
		err = msgp.WrapError(err, "Children")
		return
	}
	for za0001, za0002 := range z.Children {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Children")
			return
		}
		err = en.WriteBytes(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Children", za0001)
			return
		}
	}
	// write "key"
	err = en.Append(0xa3, 0x6b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Key)
	if err != nil {
		err = msgp.WrapError(err, "Key")
		return
	}
	// write "child"
	err = en.Append(0xa5, 0x63, 0x68, 0x69, 0x6c, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Child)
	if err != nil {
		err = msgp.WrapError(err, "Child")
		return
	}
	// write "value"
	err = en.Append(0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Value)
	if err != nil {
		err = msgp.WrapError(err, "Value")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TrieNode) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "hash"
	o = append(o, 0x86, 0xa4, 0x68, 0x61, 0x73, 0x68)
	if z.Hash == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = msgp.AppendExtension(o, z.Hash)
		if err != nil {
			err = msgp.WrapError(err, "Hash")
			return
		}
	}
	// string "type"
	o = append(o, 0xa4, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendByte(o, z.Type)
	// string "children"
	o = append(o, 0xa8, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e)
	o = msgp.AppendMapHeader(o, uint32(len(z.Children)))
	for za0001, za0002 := range z.Children {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendBytes(o, za0002)
	}
	// string "key"
	o = append(o, 0xa3, 0x6b, 0x65, 0x79)
	o = msgp.AppendBytes(o, z.Key)
	// string "child"
	o = append(o, 0xa5, 0x63, 0x68, 0x69, 0x6c, 0x64)
	o = msgp.AppendBytes(o, z.Child)
	// string "value"
	o = append(o, 0xa5, 0x76, 0x61, 0x6c, 0x75, 0x65)
	o = msgp.AppendBytes(o, z.Value)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TrieNode) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "hash":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Hash = nil
			} else {
				if z.Hash == nil {
					z.Hash = new(Hash)
				}
				bts, err = msgp.ReadExtensionBytes(bts, z.Hash)
				if err != nil {
					err = msgp.WrapError(err, "Hash")
					return
				}
			}
		case "type":
			z.Type, bts, err = msgp.ReadByteBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "children":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Children")
				return
			}
			if z.Children == nil {
				z.Children = make(map[string][]byte, zb0002)
			} else if len(z.Children) > 0 {
				for key := range z.Children {
					delete(z.Children, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 []byte
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Children")
					return
				}
				za0002, bts, err = msgp.ReadBytesBytes(bts, za0002)
				if err != nil {
					err = msgp.WrapError(err, "Children", za0001)
					return
				}
				z.Children[za0001] = za0002
			}
		case "key":
			z.Key, bts, err = msgp.ReadBytesBytes(bts, z.Key)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "child":
			z.Child, bts, err = msgp.ReadBytesBytes(bts, z.Child)
			if err != nil {
				err = msgp.WrapError(err, "Child")
				return
			}
		case "value":
			z.Value, bts, err = msgp.ReadBytesBytes(bts, z.Value)
			if err != nil {
				err = msgp.WrapError(err, "Value")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TrieNode) Msgsize() (s int) {
	s = 1 + 5
	if z.Hash == nil {
		s += msgp.NilSize
	} else {
		s += msgp.ExtensionPrefixSize + z.Hash.Len()
	}
	s += 5 + msgp.ByteSize + 9 + msgp.MapHeaderSize
	if z.Children != nil {
		for za0001, za0002 := range z.Children {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.BytesPrefixSize + len(za0002)
		}
	}
	s += 4 + msgp.BytesPrefixSize + len(z.Key) + 6 + msgp.BytesPrefixSize + len(z.Child) + 6 + msgp.BytesPrefixSize + len(z.Value)
	return
}
