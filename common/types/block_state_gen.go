package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *BlockExtra) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "key":
			err = dc.ReadExtension(&z.KeyHash)
			if err != nil {
				return
			}
		case "abi":
			z.Abi, err = dc.ReadBytes(z.Abi)
			if err != nil {
				return
			}
		case "issuer":
			err = dc.ReadExtension(&z.Issuer)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BlockExtra) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "key"
	err = en.Append(0x83, 0xa3, 0x6b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.KeyHash)
	if err != nil {
		return
	}
	// write "abi"
	err = en.Append(0xa3, 0x61, 0x62, 0x69)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Abi)
	if err != nil {
		return
	}
	// write "issuer"
	err = en.Append(0xa6, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Issuer)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BlockExtra) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "key"
	o = append(o, 0x83, 0xa3, 0x6b, 0x65, 0x79)
	o, err = msgp.AppendExtension(o, &z.KeyHash)
	if err != nil {
		return
	}
	// string "abi"
	o = append(o, 0xa3, 0x61, 0x62, 0x69)
	o = msgp.AppendBytes(o, z.Abi)
	// string "issuer"
	o = append(o, 0xa6, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72)
	o, err = msgp.AppendExtension(o, &z.Issuer)
	if err != nil {
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BlockExtra) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "key":
			bts, err = msgp.ReadExtensionBytes(bts, &z.KeyHash)
			if err != nil {
				return
			}
		case "abi":
			z.Abi, bts, err = msgp.ReadBytesBytes(bts, z.Abi)
			if err != nil {
				return
			}
		case "issuer":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Issuer)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BlockExtra) Msgsize() (s int) {
	s = 1 + 4 + msgp.ExtensionPrefixSize + z.KeyHash.Len() + 4 + msgp.BytesPrefixSize + len(z.Abi) + 7 + msgp.ExtensionPrefixSize + z.Issuer.Len()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *StateBlock) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "type":
			err = z.Type.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "token":
			err = dc.ReadExtension(&z.Token)
			if err != nil {
				return
			}
		case "address":
			err = dc.ReadExtension(&z.Address)
			if err != nil {
				return
			}
		case "balance":
			err = dc.ReadExtension(&z.Balance)
			if err != nil {
				return
			}
		case "previous":
			err = dc.ReadExtension(&z.Previous)
			if err != nil {
				return
			}
		case "link":
			err = dc.ReadExtension(&z.Link)
			if err != nil {
				return
			}
		case "sender":
			z.Sender, err = dc.ReadBytes(z.Sender)
			if err != nil {
				return
			}
		case "receiver":
			z.Receiver, err = dc.ReadBytes(z.Receiver)
			if err != nil {
				return
			}
		case "message":
			err = dc.ReadExtension(&z.Message)
			if err != nil {
				return
			}
		case "data":
			z.Data, err = dc.ReadBytes(z.Data)
			if err != nil {
				return
			}
		case "quota":
			z.Quota, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "timestamp":
			z.Timestamp, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "extra":
			err = dc.ReadExtension(&z.Extra)
			if err != nil {
				return
			}
		case "representative":
			err = dc.ReadExtension(&z.Representative)
			if err != nil {
				return
			}
		case "work":
			err = dc.ReadExtension(&z.Work)
			if err != nil {
				return
			}
		case "signature":
			err = dc.ReadExtension(&z.Signature)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *StateBlock) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 16
	// write "type"
	err = en.Append(0xde, 0x0, 0x10, 0xa4, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = z.Type.EncodeMsg(en)
	if err != nil {
		return
	}
	// write "token"
	err = en.Append(0xa5, 0x74, 0x6f, 0x6b, 0x65, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Token)
	if err != nil {
		return
	}
	// write "address"
	err = en.Append(0xa7, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Address)
	if err != nil {
		return
	}
	// write "balance"
	err = en.Append(0xa7, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Balance)
	if err != nil {
		return
	}
	// write "previous"
	err = en.Append(0xa8, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Previous)
	if err != nil {
		return
	}
	// write "link"
	err = en.Append(0xa4, 0x6c, 0x69, 0x6e, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Link)
	if err != nil {
		return
	}
	// write "sender"
	err = en.Append(0xa6, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Sender)
	if err != nil {
		return
	}
	// write "receiver"
	err = en.Append(0xa8, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Receiver)
	if err != nil {
		return
	}
	// write "message"
	err = en.Append(0xa7, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Message)
	if err != nil {
		return
	}
	// write "data"
	err = en.Append(0xa4, 0x64, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Data)
	if err != nil {
		return
	}
	// write "quota"
	err = en.Append(0xa5, 0x71, 0x75, 0x6f, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Quota)
	if err != nil {
		return
	}
	// write "timestamp"
	err = en.Append(0xa9, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Timestamp)
	if err != nil {
		return
	}
	// write "extra"
	err = en.Append(0xa5, 0x65, 0x78, 0x74, 0x72, 0x61)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Extra)
	if err != nil {
		return
	}
	// write "representative"
	err = en.Append(0xae, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Representative)
	if err != nil {
		return
	}
	// write "work"
	err = en.Append(0xa4, 0x77, 0x6f, 0x72, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Work)
	if err != nil {
		return
	}
	// write "signature"
	err = en.Append(0xa9, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.Signature)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *StateBlock) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 16
	// string "type"
	o = append(o, 0xde, 0x0, 0x10, 0xa4, 0x74, 0x79, 0x70, 0x65)
	o, err = z.Type.MarshalMsg(o)
	if err != nil {
		return
	}
	// string "token"
	o = append(o, 0xa5, 0x74, 0x6f, 0x6b, 0x65, 0x6e)
	o, err = msgp.AppendExtension(o, &z.Token)
	if err != nil {
		return
	}
	// string "address"
	o = append(o, 0xa7, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o, err = msgp.AppendExtension(o, &z.Address)
	if err != nil {
		return
	}
	// string "balance"
	o = append(o, 0xa7, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65)
	o, err = msgp.AppendExtension(o, &z.Balance)
	if err != nil {
		return
	}
	// string "previous"
	o = append(o, 0xa8, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73)
	o, err = msgp.AppendExtension(o, &z.Previous)
	if err != nil {
		return
	}
	// string "link"
	o = append(o, 0xa4, 0x6c, 0x69, 0x6e, 0x6b)
	o, err = msgp.AppendExtension(o, &z.Link)
	if err != nil {
		return
	}
	// string "sender"
	o = append(o, 0xa6, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72)
	o = msgp.AppendBytes(o, z.Sender)
	// string "receiver"
	o = append(o, 0xa8, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72)
	o = msgp.AppendBytes(o, z.Receiver)
	// string "message"
	o = append(o, 0xa7, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65)
	o, err = msgp.AppendExtension(o, &z.Message)
	if err != nil {
		return
	}
	// string "data"
	o = append(o, 0xa4, 0x64, 0x61, 0x74, 0x61)
	o = msgp.AppendBytes(o, z.Data)
	// string "quota"
	o = append(o, 0xa5, 0x71, 0x75, 0x6f, 0x74, 0x61)
	o = msgp.AppendInt64(o, z.Quota)
	// string "timestamp"
	o = append(o, 0xa9, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	o = msgp.AppendInt64(o, z.Timestamp)
	// string "extra"
	o = append(o, 0xa5, 0x65, 0x78, 0x74, 0x72, 0x61)
	o, err = msgp.AppendExtension(o, &z.Extra)
	if err != nil {
		return
	}
	// string "representative"
	o = append(o, 0xae, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65)
	o, err = msgp.AppendExtension(o, &z.Representative)
	if err != nil {
		return
	}
	// string "work"
	o = append(o, 0xa4, 0x77, 0x6f, 0x72, 0x6b)
	o, err = msgp.AppendExtension(o, &z.Work)
	if err != nil {
		return
	}
	// string "signature"
	o = append(o, 0xa9, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65)
	o, err = msgp.AppendExtension(o, &z.Signature)
	if err != nil {
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StateBlock) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "type":
			bts, err = z.Type.UnmarshalMsg(bts)
			if err != nil {
				return
			}
		case "token":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Token)
			if err != nil {
				return
			}
		case "address":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Address)
			if err != nil {
				return
			}
		case "balance":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Balance)
			if err != nil {
				return
			}
		case "previous":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Previous)
			if err != nil {
				return
			}
		case "link":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Link)
			if err != nil {
				return
			}
		case "sender":
			z.Sender, bts, err = msgp.ReadBytesBytes(bts, z.Sender)
			if err != nil {
				return
			}
		case "receiver":
			z.Receiver, bts, err = msgp.ReadBytesBytes(bts, z.Receiver)
			if err != nil {
				return
			}
		case "message":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Message)
			if err != nil {
				return
			}
		case "data":
			z.Data, bts, err = msgp.ReadBytesBytes(bts, z.Data)
			if err != nil {
				return
			}
		case "quota":
			z.Quota, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				return
			}
		case "timestamp":
			z.Timestamp, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				return
			}
		case "extra":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Extra)
			if err != nil {
				return
			}
		case "representative":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Representative)
			if err != nil {
				return
			}
		case "work":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Work)
			if err != nil {
				return
			}
		case "signature":
			bts, err = msgp.ReadExtensionBytes(bts, &z.Signature)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *StateBlock) Msgsize() (s int) {
	s = 3 + 5 + z.Type.Msgsize() + 6 + msgp.ExtensionPrefixSize + z.Token.Len() + 8 + msgp.ExtensionPrefixSize + z.Address.Len() + 8 + msgp.ExtensionPrefixSize + z.Balance.Len() + 9 + msgp.ExtensionPrefixSize + z.Previous.Len() + 5 + msgp.ExtensionPrefixSize + z.Link.Len() + 7 + msgp.BytesPrefixSize + len(z.Sender) + 9 + msgp.BytesPrefixSize + len(z.Receiver) + 8 + msgp.ExtensionPrefixSize + z.Message.Len() + 5 + msgp.BytesPrefixSize + len(z.Data) + 6 + msgp.Int64Size + 10 + msgp.Int64Size + 6 + msgp.ExtensionPrefixSize + z.Extra.Len() + 15 + msgp.ExtensionPrefixSize + z.Representative.Len() + 5 + msgp.ExtensionPrefixSize + z.Work.Len() + 10 + msgp.ExtensionPrefixSize + z.Signature.Len()
	return
}
