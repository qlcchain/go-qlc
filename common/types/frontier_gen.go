package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Frontier) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "headerblock":
			err = dc.ReadExtension(&z.HeaderBlock)
			if err != nil {
				return
			}
		case "openblock":
			err = dc.ReadExtension(&z.OpenBlock)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Frontier) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "headerblock"
	err = en.Append(0x82, 0xab, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6c, 0x6f, 0x63, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.HeaderBlock)
	if err != nil {
		return
	}
	// write "openblock"
	err = en.Append(0xa9, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteExtension(&z.OpenBlock)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Frontier) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "headerblock"
	o = append(o, 0x82, 0xab, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6c, 0x6f, 0x63, 0x6b)
	o, err = msgp.AppendExtension(o, &z.HeaderBlock)
	if err != nil {
		return
	}
	// string "openblock"
	o = append(o, 0xa9, 0x6f, 0x70, 0x65, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b)
	o, err = msgp.AppendExtension(o, &z.OpenBlock)
	if err != nil {
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Frontier) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "headerblock":
			bts, err = msgp.ReadExtensionBytes(bts, &z.HeaderBlock)
			if err != nil {
				return
			}
		case "openblock":
			bts, err = msgp.ReadExtensionBytes(bts, &z.OpenBlock)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Frontier) Msgsize() (s int) {
	s = 1 + 12 + msgp.ExtensionPrefixSize + z.HeaderBlock.Len() + 10 + msgp.ExtensionPrefixSize + z.OpenBlock.Len()
	return
}
