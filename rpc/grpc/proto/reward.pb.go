// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.7.1
// source: reward.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	types "github.com/qlcchain/go-qlc/rpc/grpc/proto/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RewardsParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Amount int64  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Self   string `protobuf:"bytes,3,opt,name=self,proto3" json:"self,omitempty"`
	To     string `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *RewardsParam) Reset() {
	*x = RewardsParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reward_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardsParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardsParam) ProtoMessage() {}

func (x *RewardsParam) ProtoReflect() protoreflect.Message {
	mi := &file_reward_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardsParam.ProtoReflect.Descriptor instead.
func (*RewardsParam) Descriptor() ([]byte, []int) {
	return file_reward_proto_rawDescGZIP(), []int{0}
}

func (x *RewardsParam) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RewardsParam) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RewardsParam) GetSelf() string {
	if x != nil {
		return x.Self
	}
	return ""
}

func (x *RewardsParam) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type RewardsParamWithSign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Param *RewardsParam `protobuf:"bytes,1,opt,name=param,proto3" json:"param,omitempty"`
	Sign  string        `protobuf:"bytes,2,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (x *RewardsParamWithSign) Reset() {
	*x = RewardsParamWithSign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reward_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardsParamWithSign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardsParamWithSign) ProtoMessage() {}

func (x *RewardsParamWithSign) ProtoReflect() protoreflect.Message {
	mi := &file_reward_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardsParamWithSign.ProtoReflect.Descriptor instead.
func (*RewardsParamWithSign) Descriptor() ([]byte, []int) {
	return file_reward_proto_rawDescGZIP(), []int{1}
}

func (x *RewardsParamWithSign) GetParam() *RewardsParam {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *RewardsParamWithSign) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type RewardsInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*types.RewardsInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty"`
}

func (x *RewardsInfos) Reset() {
	*x = RewardsInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reward_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardsInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardsInfos) ProtoMessage() {}

func (x *RewardsInfos) ProtoReflect() protoreflect.Message {
	mi := &file_reward_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardsInfos.ProtoReflect.Descriptor instead.
func (*RewardsInfos) Descriptor() ([]byte, []int) {
	return file_reward_proto_rawDescGZIP(), []int{2}
}

func (x *RewardsInfos) GetInfos() []*types.RewardsInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type RewardsInfosByAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos map[string]*RewardsInfos `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RewardsInfosByAddress) Reset() {
	*x = RewardsInfosByAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reward_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardsInfosByAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardsInfosByAddress) ProtoMessage() {}

func (x *RewardsInfosByAddress) ProtoReflect() protoreflect.Message {
	mi := &file_reward_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardsInfosByAddress.ProtoReflect.Descriptor instead.
func (*RewardsInfosByAddress) Descriptor() ([]byte, []int) {
	return file_reward_proto_rawDescGZIP(), []int{3}
}

func (x *RewardsInfosByAddress) GetInfos() map[string]*RewardsInfos {
	if x != nil {
		return x.Infos
	}
	return nil
}

type ConfidantRewardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rewards map[string]int64 `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ConfidantRewardsResponse) Reset() {
	*x = ConfidantRewardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_reward_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfidantRewardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfidantRewardsResponse) ProtoMessage() {}

func (x *ConfidantRewardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_reward_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfidantRewardsResponse.ProtoReflect.Descriptor instead.
func (*ConfidantRewardsResponse) Descriptor() ([]byte, []int) {
	return file_reward_proto_rawDescGZIP(), []int{4}
}

func (x *ConfidantRewardsResponse) GetRewards() map[string]int64 {
	if x != nil {
		return x.Rewards
	}
	return nil
}

var File_reward_proto protoreflect.FileDescriptor

var file_reward_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x0c, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x55, 0x0a, 0x14, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x29,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x38, 0x0a,
	0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x28, 0x0a,
	0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x3d, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73,
	0x1a, 0x4d, 0x0a, 0x0a, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x9e, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x07,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x32, 0x82, 0x08, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x41, 0x50, 0x49, 0x12,
	0x61, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x0b, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x20, 0x12, 0x1e, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x67, 0x65, 0x74,
	0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x67, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x1a, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68,
	0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x6c, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x1a, 0x11,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x72, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x61, 0x6e, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x57, 0x69, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x1a,
	0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x61, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x5f, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48,
	0x61, 0x73, 0x68, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e,
	0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x53,
	0x0a, 0x10, 0x49, 0x73, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x2f, 0x69, 0x73, 0x41, 0x69, 0x72, 0x64, 0x72, 0x6f, 0x70, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x59, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x21, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2f,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x6c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e,
	0x12, 0x1c, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x75,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x24, 0x12, 0x22, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x64, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_reward_proto_rawDescOnce sync.Once
	file_reward_proto_rawDescData = file_reward_proto_rawDesc
)

func file_reward_proto_rawDescGZIP() []byte {
	file_reward_proto_rawDescOnce.Do(func() {
		file_reward_proto_rawDescData = protoimpl.X.CompressGZIP(file_reward_proto_rawDescData)
	})
	return file_reward_proto_rawDescData
}

var file_reward_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_reward_proto_goTypes = []interface{}{
	(*RewardsParam)(nil),             // 0: proto.RewardsParam
	(*RewardsParamWithSign)(nil),     // 1: proto.RewardsParamWithSign
	(*RewardsInfos)(nil),             // 2: proto.RewardsInfos
	(*RewardsInfosByAddress)(nil),    // 3: proto.RewardsInfosByAddress
	(*ConfidantRewardsResponse)(nil), // 4: proto.ConfidantRewardsResponse
	nil,                              // 5: proto.RewardsInfosByAddress.InfosEntry
	nil,                              // 6: proto.ConfidantRewardsResponse.RewardsEntry
	(*types.RewardsInfo)(nil),        // 7: types.RewardsInfo
	(*types.Hash)(nil),               // 8: types.Hash
	(*Bytes)(nil),                    // 9: proto.Bytes
	(*String)(nil),                   // 10: proto.String
	(*types.Address)(nil),            // 11: types.Address
	(*types.StateBlock)(nil),         // 12: types.StateBlock
	(*Boolean)(nil),                  // 13: proto.Boolean
	(*Int64)(nil),                    // 14: proto.Int64
}
var file_reward_proto_depIdxs = []int32{
	0,  // 0: proto.RewardsParamWithSign.param:type_name -> proto.RewardsParam
	7,  // 1: proto.RewardsInfos.infos:type_name -> types.RewardsInfo
	5,  // 2: proto.RewardsInfosByAddress.infos:type_name -> proto.RewardsInfosByAddress.InfosEntry
	6,  // 3: proto.ConfidantRewardsResponse.rewards:type_name -> proto.ConfidantRewardsResponse.RewardsEntry
	2,  // 4: proto.RewardsInfosByAddress.InfosEntry.value:type_name -> proto.RewardsInfos
	0,  // 5: proto.RewardsAPI.GetUnsignedRewardData:input_type -> proto.RewardsParam
	0,  // 6: proto.RewardsAPI.GetUnsignedConfidantData:input_type -> proto.RewardsParam
	1,  // 7: proto.RewardsAPI.GetSendRewardBlock:input_type -> proto.RewardsParamWithSign
	1,  // 8: proto.RewardsAPI.GetSendConfidantBlock:input_type -> proto.RewardsParamWithSign
	8,  // 9: proto.RewardsAPI.GetReceiveRewardBlock:input_type -> types.Hash
	9,  // 10: proto.RewardsAPI.IsAirdropRewards:input_type -> proto.Bytes
	10, // 11: proto.RewardsAPI.GetTotalRewards:input_type -> proto.String
	10, // 12: proto.RewardsAPI.GetRewardsDetail:input_type -> proto.String
	11, // 13: proto.RewardsAPI.GetConfidantRewards:input_type -> types.Address
	11, // 14: proto.RewardsAPI.GetConfidantRewordsDetail:input_type -> types.Address
	8,  // 15: proto.RewardsAPI.GetUnsignedRewardData:output_type -> types.Hash
	8,  // 16: proto.RewardsAPI.GetUnsignedConfidantData:output_type -> types.Hash
	12, // 17: proto.RewardsAPI.GetSendRewardBlock:output_type -> types.StateBlock
	12, // 18: proto.RewardsAPI.GetSendConfidantBlock:output_type -> types.StateBlock
	12, // 19: proto.RewardsAPI.GetReceiveRewardBlock:output_type -> types.StateBlock
	13, // 20: proto.RewardsAPI.IsAirdropRewards:output_type -> proto.Boolean
	14, // 21: proto.RewardsAPI.GetTotalRewards:output_type -> proto.Int64
	2,  // 22: proto.RewardsAPI.GetRewardsDetail:output_type -> proto.RewardsInfos
	4,  // 23: proto.RewardsAPI.GetConfidantRewards:output_type -> proto.ConfidantRewardsResponse
	3,  // 24: proto.RewardsAPI.GetConfidantRewordsDetail:output_type -> proto.RewardsInfosByAddress
	15, // [15:25] is the sub-list for method output_type
	5,  // [5:15] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_reward_proto_init() }
func file_reward_proto_init() {
	if File_reward_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_reward_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardsParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reward_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardsParamWithSign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reward_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardsInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reward_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardsInfosByAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_reward_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfidantRewardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_reward_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_reward_proto_goTypes,
		DependencyIndexes: file_reward_proto_depIdxs,
		MessageInfos:      file_reward_proto_msgTypes,
	}.Build()
	File_reward_proto = out.File
	file_reward_proto_rawDesc = nil
	file_reward_proto_goTypes = nil
	file_reward_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RewardsAPIClient is the client API for RewardsAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RewardsAPIClient interface {
	GetUnsignedRewardData(ctx context.Context, in *RewardsParam, opts ...grpc.CallOption) (*types.Hash, error)
	GetUnsignedConfidantData(ctx context.Context, in *RewardsParam, opts ...grpc.CallOption) (*types.Hash, error)
	GetSendRewardBlock(ctx context.Context, in *RewardsParamWithSign, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetSendConfidantBlock(ctx context.Context, in *RewardsParamWithSign, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetReceiveRewardBlock(ctx context.Context, in *types.Hash, opts ...grpc.CallOption) (*types.StateBlock, error)
	IsAirdropRewards(ctx context.Context, in *Bytes, opts ...grpc.CallOption) (*Boolean, error)
	GetTotalRewards(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int64, error)
	GetRewardsDetail(ctx context.Context, in *String, opts ...grpc.CallOption) (*RewardsInfos, error)
	GetConfidantRewards(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*ConfidantRewardsResponse, error)
	GetConfidantRewordsDetail(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*RewardsInfosByAddress, error)
}

type rewardsAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewRewardsAPIClient(cc grpc.ClientConnInterface) RewardsAPIClient {
	return &rewardsAPIClient{cc}
}

func (c *rewardsAPIClient) GetUnsignedRewardData(ctx context.Context, in *RewardsParam, opts ...grpc.CallOption) (*types.Hash, error) {
	out := new(types.Hash)
	err := c.cc.Invoke(ctx, "/proto.RewardsAPI/GetUnsignedRewardData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardsAPIClient) GetUnsignedConfidantData(ctx context.Context, in *RewardsParam, opts ...grpc.CallOption) (*types.Hash, error) {
	out := new(types.Hash)
	err := c.cc.Invoke(ctx, "/proto.RewardsAPI/GetUnsignedConfidantData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardsAPIClient) GetSendRewardBlock(ctx context.Context, in *RewardsParamWithSign, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.RewardsAPI/GetSendRewardBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardsAPIClient) GetSendConfidantBlock(ctx context.Context, in *RewardsParamWithSign, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.RewardsAPI/GetSendConfidantBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardsAPIClient) GetReceiveRewardBlock(ctx context.Context, in *types.Hash, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.RewardsAPI/GetReceiveRewardBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardsAPIClient) IsAirdropRewards(ctx context.Context, in *Bytes, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/proto.RewardsAPI/IsAirdropRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardsAPIClient) GetTotalRewards(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/proto.RewardsAPI/GetTotalRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardsAPIClient) GetRewardsDetail(ctx context.Context, in *String, opts ...grpc.CallOption) (*RewardsInfos, error) {
	out := new(RewardsInfos)
	err := c.cc.Invoke(ctx, "/proto.RewardsAPI/GetRewardsDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardsAPIClient) GetConfidantRewards(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*ConfidantRewardsResponse, error) {
	out := new(ConfidantRewardsResponse)
	err := c.cc.Invoke(ctx, "/proto.RewardsAPI/GetConfidantRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardsAPIClient) GetConfidantRewordsDetail(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*RewardsInfosByAddress, error) {
	out := new(RewardsInfosByAddress)
	err := c.cc.Invoke(ctx, "/proto.RewardsAPI/GetConfidantRewordsDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RewardsAPIServer is the server API for RewardsAPI service.
type RewardsAPIServer interface {
	GetUnsignedRewardData(context.Context, *RewardsParam) (*types.Hash, error)
	GetUnsignedConfidantData(context.Context, *RewardsParam) (*types.Hash, error)
	GetSendRewardBlock(context.Context, *RewardsParamWithSign) (*types.StateBlock, error)
	GetSendConfidantBlock(context.Context, *RewardsParamWithSign) (*types.StateBlock, error)
	GetReceiveRewardBlock(context.Context, *types.Hash) (*types.StateBlock, error)
	IsAirdropRewards(context.Context, *Bytes) (*Boolean, error)
	GetTotalRewards(context.Context, *String) (*Int64, error)
	GetRewardsDetail(context.Context, *String) (*RewardsInfos, error)
	GetConfidantRewards(context.Context, *types.Address) (*ConfidantRewardsResponse, error)
	GetConfidantRewordsDetail(context.Context, *types.Address) (*RewardsInfosByAddress, error)
}

// UnimplementedRewardsAPIServer can be embedded to have forward compatible implementations.
type UnimplementedRewardsAPIServer struct {
}

func (*UnimplementedRewardsAPIServer) GetUnsignedRewardData(context.Context, *RewardsParam) (*types.Hash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnsignedRewardData not implemented")
}
func (*UnimplementedRewardsAPIServer) GetUnsignedConfidantData(context.Context, *RewardsParam) (*types.Hash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnsignedConfidantData not implemented")
}
func (*UnimplementedRewardsAPIServer) GetSendRewardBlock(context.Context, *RewardsParamWithSign) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSendRewardBlock not implemented")
}
func (*UnimplementedRewardsAPIServer) GetSendConfidantBlock(context.Context, *RewardsParamWithSign) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSendConfidantBlock not implemented")
}
func (*UnimplementedRewardsAPIServer) GetReceiveRewardBlock(context.Context, *types.Hash) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceiveRewardBlock not implemented")
}
func (*UnimplementedRewardsAPIServer) IsAirdropRewards(context.Context, *Bytes) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAirdropRewards not implemented")
}
func (*UnimplementedRewardsAPIServer) GetTotalRewards(context.Context, *String) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalRewards not implemented")
}
func (*UnimplementedRewardsAPIServer) GetRewardsDetail(context.Context, *String) (*RewardsInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardsDetail not implemented")
}
func (*UnimplementedRewardsAPIServer) GetConfidantRewards(context.Context, *types.Address) (*ConfidantRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfidantRewards not implemented")
}
func (*UnimplementedRewardsAPIServer) GetConfidantRewordsDetail(context.Context, *types.Address) (*RewardsInfosByAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfidantRewordsDetail not implemented")
}

func RegisterRewardsAPIServer(s *grpc.Server, srv RewardsAPIServer) {
	s.RegisterService(&_RewardsAPI_serviceDesc, srv)
}

func _RewardsAPI_GetUnsignedRewardData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardsAPIServer).GetUnsignedRewardData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RewardsAPI/GetUnsignedRewardData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardsAPIServer).GetUnsignedRewardData(ctx, req.(*RewardsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardsAPI_GetUnsignedConfidantData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardsAPIServer).GetUnsignedConfidantData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RewardsAPI/GetUnsignedConfidantData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardsAPIServer).GetUnsignedConfidantData(ctx, req.(*RewardsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardsAPI_GetSendRewardBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardsParamWithSign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardsAPIServer).GetSendRewardBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RewardsAPI/GetSendRewardBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardsAPIServer).GetSendRewardBlock(ctx, req.(*RewardsParamWithSign))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardsAPI_GetSendConfidantBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardsParamWithSign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardsAPIServer).GetSendConfidantBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RewardsAPI/GetSendConfidantBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardsAPIServer).GetSendConfidantBlock(ctx, req.(*RewardsParamWithSign))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardsAPI_GetReceiveRewardBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardsAPIServer).GetReceiveRewardBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RewardsAPI/GetReceiveRewardBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardsAPIServer).GetReceiveRewardBlock(ctx, req.(*types.Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardsAPI_IsAirdropRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardsAPIServer).IsAirdropRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RewardsAPI/IsAirdropRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardsAPIServer).IsAirdropRewards(ctx, req.(*Bytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardsAPI_GetTotalRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardsAPIServer).GetTotalRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RewardsAPI/GetTotalRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardsAPIServer).GetTotalRewards(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardsAPI_GetRewardsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardsAPIServer).GetRewardsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RewardsAPI/GetRewardsDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardsAPIServer).GetRewardsDetail(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardsAPI_GetConfidantRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardsAPIServer).GetConfidantRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RewardsAPI/GetConfidantRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardsAPIServer).GetConfidantRewards(ctx, req.(*types.Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardsAPI_GetConfidantRewordsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardsAPIServer).GetConfidantRewordsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RewardsAPI/GetConfidantRewordsDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardsAPIServer).GetConfidantRewordsDetail(ctx, req.(*types.Address))
	}
	return interceptor(ctx, in, info, handler)
}

var _RewardsAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RewardsAPI",
	HandlerType: (*RewardsAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUnsignedRewardData",
			Handler:    _RewardsAPI_GetUnsignedRewardData_Handler,
		},
		{
			MethodName: "GetUnsignedConfidantData",
			Handler:    _RewardsAPI_GetUnsignedConfidantData_Handler,
		},
		{
			MethodName: "GetSendRewardBlock",
			Handler:    _RewardsAPI_GetSendRewardBlock_Handler,
		},
		{
			MethodName: "GetSendConfidantBlock",
			Handler:    _RewardsAPI_GetSendConfidantBlock_Handler,
		},
		{
			MethodName: "GetReceiveRewardBlock",
			Handler:    _RewardsAPI_GetReceiveRewardBlock_Handler,
		},
		{
			MethodName: "IsAirdropRewards",
			Handler:    _RewardsAPI_IsAirdropRewards_Handler,
		},
		{
			MethodName: "GetTotalRewards",
			Handler:    _RewardsAPI_GetTotalRewards_Handler,
		},
		{
			MethodName: "GetRewardsDetail",
			Handler:    _RewardsAPI_GetRewardsDetail_Handler,
		},
		{
			MethodName: "GetConfidantRewards",
			Handler:    _RewardsAPI_GetConfidantRewards_Handler,
		},
		{
			MethodName: "GetConfidantRewordsDetail",
			Handler:    _RewardsAPI_GetConfidantRewordsDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reward.proto",
}
