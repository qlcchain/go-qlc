// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.7.1
// source: nep5_pledge.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	types "github.com/qlcchain/go-qlc/rpc/grpc/proto/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type BeneficialPledgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Beneficial string `protobuf:"bytes,1,opt,name=beneficial,proto3" json:"beneficial,omitempty"`
	PType      string `protobuf:"bytes,2,opt,name=pType,proto3" json:"pType,omitempty"`
}

func (x *BeneficialPledgeRequest) Reset() {
	*x = BeneficialPledgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nep5_pledge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeneficialPledgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeneficialPledgeRequest) ProtoMessage() {}

func (x *BeneficialPledgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nep5_pledge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeneficialPledgeRequest.ProtoReflect.Descriptor instead.
func (*BeneficialPledgeRequest) Descriptor() ([]byte, []int) {
	return file_nep5_pledge_proto_rawDescGZIP(), []int{0}
}

func (x *BeneficialPledgeRequest) GetBeneficial() string {
	if x != nil {
		return x.Beneficial
	}
	return ""
}

func (x *BeneficialPledgeRequest) GetPType() string {
	if x != nil {
		return x.PType
	}
	return ""
}

type PledgeParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Beneficial    string `protobuf:"bytes,1,opt,name=beneficial,proto3" json:"beneficial,omitempty"`
	PledgeAddress string `protobuf:"bytes,2,opt,name=pledgeAddress,proto3" json:"pledgeAddress,omitempty"`
	Amount        int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	PType         string `protobuf:"bytes,4,opt,name=pType,proto3" json:"pType,omitempty"`
	Nep5TxId      string `protobuf:"bytes,5,opt,name=nep5TxId,proto3" json:"nep5TxId,omitempty"`
}

func (x *PledgeParam) Reset() {
	*x = PledgeParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nep5_pledge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PledgeParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PledgeParam) ProtoMessage() {}

func (x *PledgeParam) ProtoReflect() protoreflect.Message {
	mi := &file_nep5_pledge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PledgeParam.ProtoReflect.Descriptor instead.
func (*PledgeParam) Descriptor() ([]byte, []int) {
	return file_nep5_pledge_proto_rawDescGZIP(), []int{1}
}

func (x *PledgeParam) GetBeneficial() string {
	if x != nil {
		return x.Beneficial
	}
	return ""
}

func (x *PledgeParam) GetPledgeAddress() string {
	if x != nil {
		return x.PledgeAddress
	}
	return ""
}

func (x *PledgeParam) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PledgeParam) GetPType() string {
	if x != nil {
		return x.PType
	}
	return ""
}

func (x *PledgeParam) GetNep5TxId() string {
	if x != nil {
		return x.Nep5TxId
	}
	return ""
}

type WithdrawPledgeParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Beneficial string `protobuf:"bytes,1,opt,name=beneficial,proto3" json:"beneficial,omitempty"`
	Amount     int64  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	PType      string `protobuf:"bytes,3,opt,name=pType,proto3" json:"pType,omitempty"`
	Nep5TxId   string `protobuf:"bytes,4,opt,name=nep5TxId,proto3" json:"nep5TxId,omitempty"`
}

func (x *WithdrawPledgeParam) Reset() {
	*x = WithdrawPledgeParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nep5_pledge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawPledgeParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawPledgeParam) ProtoMessage() {}

func (x *WithdrawPledgeParam) ProtoReflect() protoreflect.Message {
	mi := &file_nep5_pledge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawPledgeParam.ProtoReflect.Descriptor instead.
func (*WithdrawPledgeParam) Descriptor() ([]byte, []int) {
	return file_nep5_pledge_proto_rawDescGZIP(), []int{2}
}

func (x *WithdrawPledgeParam) GetBeneficial() string {
	if x != nil {
		return x.Beneficial
	}
	return ""
}

func (x *WithdrawPledgeParam) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *WithdrawPledgeParam) GetPType() string {
	if x != nil {
		return x.PType
	}
	return ""
}

func (x *WithdrawPledgeParam) GetNep5TxId() string {
	if x != nil {
		return x.Nep5TxId
	}
	return ""
}

type NEP5PledgeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PType         int32  `protobuf:"varint,1,opt,name=pType,proto3" json:"pType,omitempty"`
	Amount        int64  `protobuf:"varint,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
	WithdrawTime  int64  `protobuf:"varint,3,opt,name=WithdrawTime,proto3" json:"WithdrawTime,omitempty"`
	Beneficial    string `protobuf:"bytes,4,opt,name=Beneficial,proto3" json:"Beneficial,omitempty"`
	PledgeAddress string `protobuf:"bytes,5,opt,name=PledgeAddress,proto3" json:"PledgeAddress,omitempty"`
	NEP5TxId      string `protobuf:"bytes,6,opt,name=NEP5TxId,proto3" json:"NEP5TxId,omitempty"`
}

func (x *NEP5PledgeInfo) Reset() {
	*x = NEP5PledgeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nep5_pledge_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NEP5PledgeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NEP5PledgeInfo) ProtoMessage() {}

func (x *NEP5PledgeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_nep5_pledge_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NEP5PledgeInfo.ProtoReflect.Descriptor instead.
func (*NEP5PledgeInfo) Descriptor() ([]byte, []int) {
	return file_nep5_pledge_proto_rawDescGZIP(), []int{3}
}

func (x *NEP5PledgeInfo) GetPType() int32 {
	if x != nil {
		return x.PType
	}
	return 0
}

func (x *NEP5PledgeInfo) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *NEP5PledgeInfo) GetWithdrawTime() int64 {
	if x != nil {
		return x.WithdrawTime
	}
	return 0
}

func (x *NEP5PledgeInfo) GetBeneficial() string {
	if x != nil {
		return x.Beneficial
	}
	return ""
}

func (x *NEP5PledgeInfo) GetPledgeAddress() string {
	if x != nil {
		return x.PledgeAddress
	}
	return ""
}

func (x *NEP5PledgeInfo) GetNEP5TxId() string {
	if x != nil {
		return x.NEP5TxId
	}
	return ""
}

type NEP5PledgeInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PledgeInfos []*NEP5PledgeInfo `protobuf:"bytes,1,rep,name=PledgeInfos,proto3" json:"PledgeInfos,omitempty"`
}

func (x *NEP5PledgeInfos) Reset() {
	*x = NEP5PledgeInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nep5_pledge_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NEP5PledgeInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NEP5PledgeInfos) ProtoMessage() {}

func (x *NEP5PledgeInfos) ProtoReflect() protoreflect.Message {
	mi := &file_nep5_pledge_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NEP5PledgeInfos.ProtoReflect.Descriptor instead.
func (*NEP5PledgeInfos) Descriptor() ([]byte, []int) {
	return file_nep5_pledge_proto_rawDescGZIP(), []int{4}
}

func (x *NEP5PledgeInfos) GetPledgeInfos() []*NEP5PledgeInfo {
	if x != nil {
		return x.PledgeInfos
	}
	return nil
}

type PledgeInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PledgeInfos  []*NEP5PledgeInfo `protobuf:"bytes,1,rep,name=PledgeInfos,proto3" json:"PledgeInfos,omitempty"`
	TotalAmounts int64             `protobuf:"varint,2,opt,name=totalAmounts,proto3" json:"totalAmounts,omitempty"`
}

func (x *PledgeInfos) Reset() {
	*x = PledgeInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nep5_pledge_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PledgeInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PledgeInfos) ProtoMessage() {}

func (x *PledgeInfos) ProtoReflect() protoreflect.Message {
	mi := &file_nep5_pledge_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PledgeInfos.ProtoReflect.Descriptor instead.
func (*PledgeInfos) Descriptor() ([]byte, []int) {
	return file_nep5_pledge_proto_rawDescGZIP(), []int{5}
}

func (x *PledgeInfos) GetPledgeInfos() []*NEP5PledgeInfo {
	if x != nil {
		return x.PledgeInfos
	}
	return nil
}

func (x *PledgeInfos) GetTotalAmounts() int64 {
	if x != nil {
		return x.TotalAmounts
	}
	return 0
}

var File_nep5_pledge_proto protoreflect.FileDescriptor

var file_nep5_pledge_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6e, 0x65, 0x70, 0x35, 0x5f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4f, 0x0a, 0x17, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x0b, 0x50, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x65, 0x70, 0x35, 0x54, 0x78, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x65, 0x70, 0x35, 0x54, 0x78, 0x49, 0x64, 0x22, 0x7f, 0x0a, 0x13, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x65, 0x70, 0x35, 0x54, 0x78, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x65, 0x70, 0x35, 0x54, 0x78, 0x49, 0x64, 0x22, 0xc4, 0x01, 0x0a, 0x0e, 0x4e,
	0x45, 0x50, 0x35, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x12,
	0x24, 0x0a, 0x0d, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x45, 0x50, 0x35, 0x54, 0x78, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x45, 0x50, 0x35, 0x54, 0x78, 0x49,
	0x64, 0x22, 0x4a, 0x0a, 0x0f, 0x4e, 0x45, 0x50, 0x35, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x45, 0x50, 0x35, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x6a, 0x0a,
	0x0b, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x37, 0x0a, 0x0b,
	0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x45, 0x50, 0x35, 0x50, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x32, 0xb3, 0x11, 0x0a, 0x0d, 0x4e, 0x45,
	0x50, 0x35, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x41, 0x50, 0x49, 0x12, 0x62, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x20, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x67,
	0x65, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x01, 0x2a, 0x12,
	0x5a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x22, 0x16, 0x2f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x65, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x21, 0x22, 0x1c, 0x2f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x50, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x3a,
	0x01, 0x2a, 0x12, 0x73, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x53, 0x65, 0x6e, 0x64,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x61, 0x73,
	0x68, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x26, 0x2f, 0x70,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x53, 0x65, 0x6e, 0x64,
	0x48, 0x61, 0x73, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0x7a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x22, 0x1d, 0x2f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x3a, 0x01, 0x2a, 0x12, 0x72, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x29, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x67, 0x65,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x69, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22,
	0x1e, 0x2f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x3a,
	0x01, 0x2a, 0x12, 0x77, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x53, 0x65,
	0x6e, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48,
	0x61, 0x73, 0x68, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x28,
	0x2f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79,
	0x53, 0x65, 0x6e, 0x64, 0x48, 0x61, 0x73, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0x69, 0x0a, 0x0f, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x45, 0x50, 0x35, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x70, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x3a, 0x01, 0x2a, 0x12, 0x75, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x42, 0x79, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x30, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x67, 0x65, 0x74,
	0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x42, 0x79, 0x50, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x80, 0x01,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x31, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x26, 0x2f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x67,
	0x65, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01, 0x2a,
	0x12, 0x7d, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x42, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2e, 0x22, 0x29, 0x2f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0x7b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c,
	0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22,
	0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2f, 0x67, 0x65, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x86, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22,
	0x21, 0x2f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x65, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x45, 0x50, 0x35, 0x50,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1a, 0x22, 0x15, 0x2f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x50,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x01, 0x2a, 0x12, 0x7c, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x57, 0x69, 0x74,
	0x68, 0x4e, 0x45, 0x50, 0x35, 0x54, 0x78, 0x49, 0x64, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x45,
	0x50, 0x35, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x67, 0x65,
	0x74, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x4e,
	0x45, 0x50, 0x35, 0x54, 0x78, 0x49, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x83, 0x01, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x57, 0x69, 0x74, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4e, 0x45, 0x50, 0x35, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22,
	0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2f, 0x67, 0x65, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x57, 0x69,
	0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x3a, 0x01, 0x2a,
	0x12, 0x67, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x45, 0x50, 0x35, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x70,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x01, 0x2a, 0x12, 0x74, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c,
	0x2f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x42,
	0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_nep5_pledge_proto_rawDescOnce sync.Once
	file_nep5_pledge_proto_rawDescData = file_nep5_pledge_proto_rawDesc
)

func file_nep5_pledge_proto_rawDescGZIP() []byte {
	file_nep5_pledge_proto_rawDescOnce.Do(func() {
		file_nep5_pledge_proto_rawDescData = protoimpl.X.CompressGZIP(file_nep5_pledge_proto_rawDescData)
	})
	return file_nep5_pledge_proto_rawDescData
}

var file_nep5_pledge_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_nep5_pledge_proto_goTypes = []interface{}{
	(*BeneficialPledgeRequest)(nil), // 0: proto.BeneficialPledgeRequest
	(*PledgeParam)(nil),             // 1: proto.PledgeParam
	(*WithdrawPledgeParam)(nil),     // 2: proto.WithdrawPledgeParam
	(*NEP5PledgeInfo)(nil),          // 3: proto.NEP5PledgeInfo
	(*NEP5PledgeInfos)(nil),         // 4: proto.NEP5PledgeInfos
	(*PledgeInfos)(nil),             // 5: proto.PledgeInfos
	(*types.StateBlock)(nil),        // 6: types.StateBlock
	(*types.Hash)(nil),              // 7: types.Hash
	(*wrappers.BytesValue)(nil),     // 8: google.protobuf.BytesValue
	(*types.Address)(nil),           // 9: types.Address
	(*empty.Empty)(nil),             // 10: google.protobuf.Empty
	(*wrappers.Int64Value)(nil),     // 11: google.protobuf.Int64Value
}
var file_nep5_pledge_proto_depIdxs = []int32{
	3,  // 0: proto.NEP5PledgeInfos.PledgeInfos:type_name -> proto.NEP5PledgeInfo
	3,  // 1: proto.PledgeInfos.PledgeInfos:type_name -> proto.NEP5PledgeInfo
	1,  // 2: proto.NEP5PledgeAPI.GetPledgeData:input_type -> proto.PledgeParam
	1,  // 3: proto.NEP5PledgeAPI.GetPledgeBlock:input_type -> proto.PledgeParam
	6,  // 4: proto.NEP5PledgeAPI.GetPledgeRewardBlock:input_type -> types.StateBlock
	7,  // 5: proto.NEP5PledgeAPI.GetPledgeRewardBlockBySendHash:input_type -> types.Hash
	2,  // 6: proto.NEP5PledgeAPI.GetWithdrawPledgeData:input_type -> proto.WithdrawPledgeParam
	2,  // 7: proto.NEP5PledgeAPI.GetWithdrawPledgeBlock:input_type -> proto.WithdrawPledgeParam
	6,  // 8: proto.NEP5PledgeAPI.GetWithdrawRewardBlock:input_type -> types.StateBlock
	7,  // 9: proto.NEP5PledgeAPI.GetWithdrawRewardBlockBySendHash:input_type -> types.Hash
	8,  // 10: proto.NEP5PledgeAPI.ParsePledgeInfo:input_type -> google.protobuf.BytesValue
	9,  // 11: proto.NEP5PledgeAPI.GetPledgeInfosByPledgeAddress:input_type -> types.Address
	9,  // 12: proto.NEP5PledgeAPI.GetPledgeBeneficialTotalAmount:input_type -> types.Address
	9,  // 13: proto.NEP5PledgeAPI.GetBeneficialPledgeInfosByAddress:input_type -> types.Address
	0,  // 14: proto.NEP5PledgeAPI.GetBeneficialPledgeInfos:input_type -> proto.BeneficialPledgeRequest
	0,  // 15: proto.NEP5PledgeAPI.GetPledgeBeneficialAmount:input_type -> proto.BeneficialPledgeRequest
	2,  // 16: proto.NEP5PledgeAPI.GetPledgeInfo:input_type -> proto.WithdrawPledgeParam
	2,  // 17: proto.NEP5PledgeAPI.GetPledgeInfoWithNEP5TxId:input_type -> proto.WithdrawPledgeParam
	2,  // 18: proto.NEP5PledgeAPI.GetPledgeInfoWithTimeExpired:input_type -> proto.WithdrawPledgeParam
	10, // 19: proto.NEP5PledgeAPI.GetAllPledgeInfo:input_type -> google.protobuf.Empty
	10, // 20: proto.NEP5PledgeAPI.GetTotalPledgeAmount:input_type -> google.protobuf.Empty
	8,  // 21: proto.NEP5PledgeAPI.GetPledgeData:output_type -> google.protobuf.BytesValue
	6,  // 22: proto.NEP5PledgeAPI.GetPledgeBlock:output_type -> types.StateBlock
	6,  // 23: proto.NEP5PledgeAPI.GetPledgeRewardBlock:output_type -> types.StateBlock
	6,  // 24: proto.NEP5PledgeAPI.GetPledgeRewardBlockBySendHash:output_type -> types.StateBlock
	8,  // 25: proto.NEP5PledgeAPI.GetWithdrawPledgeData:output_type -> google.protobuf.BytesValue
	6,  // 26: proto.NEP5PledgeAPI.GetWithdrawPledgeBlock:output_type -> types.StateBlock
	6,  // 27: proto.NEP5PledgeAPI.GetWithdrawRewardBlock:output_type -> types.StateBlock
	6,  // 28: proto.NEP5PledgeAPI.GetWithdrawRewardBlockBySendHash:output_type -> types.StateBlock
	3,  // 29: proto.NEP5PledgeAPI.ParsePledgeInfo:output_type -> proto.NEP5PledgeInfo
	5,  // 30: proto.NEP5PledgeAPI.GetPledgeInfosByPledgeAddress:output_type -> proto.PledgeInfos
	11, // 31: proto.NEP5PledgeAPI.GetPledgeBeneficialTotalAmount:output_type -> google.protobuf.Int64Value
	5,  // 32: proto.NEP5PledgeAPI.GetBeneficialPledgeInfosByAddress:output_type -> proto.PledgeInfos
	5,  // 33: proto.NEP5PledgeAPI.GetBeneficialPledgeInfos:output_type -> proto.PledgeInfos
	11, // 34: proto.NEP5PledgeAPI.GetPledgeBeneficialAmount:output_type -> google.protobuf.Int64Value
	4,  // 35: proto.NEP5PledgeAPI.GetPledgeInfo:output_type -> proto.NEP5PledgeInfos
	3,  // 36: proto.NEP5PledgeAPI.GetPledgeInfoWithNEP5TxId:output_type -> proto.NEP5PledgeInfo
	4,  // 37: proto.NEP5PledgeAPI.GetPledgeInfoWithTimeExpired:output_type -> proto.NEP5PledgeInfos
	4,  // 38: proto.NEP5PledgeAPI.GetAllPledgeInfo:output_type -> proto.NEP5PledgeInfos
	11, // 39: proto.NEP5PledgeAPI.GetTotalPledgeAmount:output_type -> google.protobuf.Int64Value
	21, // [21:40] is the sub-list for method output_type
	2,  // [2:21] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_nep5_pledge_proto_init() }
func file_nep5_pledge_proto_init() {
	if File_nep5_pledge_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nep5_pledge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeneficialPledgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nep5_pledge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PledgeParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nep5_pledge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawPledgeParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nep5_pledge_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NEP5PledgeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nep5_pledge_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NEP5PledgeInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nep5_pledge_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PledgeInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nep5_pledge_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nep5_pledge_proto_goTypes,
		DependencyIndexes: file_nep5_pledge_proto_depIdxs,
		MessageInfos:      file_nep5_pledge_proto_msgTypes,
	}.Build()
	File_nep5_pledge_proto = out.File
	file_nep5_pledge_proto_rawDesc = nil
	file_nep5_pledge_proto_goTypes = nil
	file_nep5_pledge_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NEP5PledgeAPIClient is the client API for NEP5PledgeAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NEP5PledgeAPIClient interface {
	GetPledgeData(ctx context.Context, in *PledgeParam, opts ...grpc.CallOption) (*wrappers.BytesValue, error)
	GetPledgeBlock(ctx context.Context, in *PledgeParam, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetPledgeRewardBlock(ctx context.Context, in *types.StateBlock, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetPledgeRewardBlockBySendHash(ctx context.Context, in *types.Hash, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetWithdrawPledgeData(ctx context.Context, in *WithdrawPledgeParam, opts ...grpc.CallOption) (*wrappers.BytesValue, error)
	GetWithdrawPledgeBlock(ctx context.Context, in *WithdrawPledgeParam, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetWithdrawRewardBlock(ctx context.Context, in *types.StateBlock, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetWithdrawRewardBlockBySendHash(ctx context.Context, in *types.Hash, opts ...grpc.CallOption) (*types.StateBlock, error)
	ParsePledgeInfo(ctx context.Context, in *wrappers.BytesValue, opts ...grpc.CallOption) (*NEP5PledgeInfo, error)
	GetPledgeInfosByPledgeAddress(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*PledgeInfos, error)
	GetPledgeBeneficialTotalAmount(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*wrappers.Int64Value, error)
	GetBeneficialPledgeInfosByAddress(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*PledgeInfos, error)
	GetBeneficialPledgeInfos(ctx context.Context, in *BeneficialPledgeRequest, opts ...grpc.CallOption) (*PledgeInfos, error)
	GetPledgeBeneficialAmount(ctx context.Context, in *BeneficialPledgeRequest, opts ...grpc.CallOption) (*wrappers.Int64Value, error)
	GetPledgeInfo(ctx context.Context, in *WithdrawPledgeParam, opts ...grpc.CallOption) (*NEP5PledgeInfos, error)
	GetPledgeInfoWithNEP5TxId(ctx context.Context, in *WithdrawPledgeParam, opts ...grpc.CallOption) (*NEP5PledgeInfo, error)
	GetPledgeInfoWithTimeExpired(ctx context.Context, in *WithdrawPledgeParam, opts ...grpc.CallOption) (*NEP5PledgeInfos, error)
	GetAllPledgeInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NEP5PledgeInfos, error)
	GetTotalPledgeAmount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.Int64Value, error)
}

type nEP5PledgeAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewNEP5PledgeAPIClient(cc grpc.ClientConnInterface) NEP5PledgeAPIClient {
	return &nEP5PledgeAPIClient{cc}
}

func (c *nEP5PledgeAPIClient) GetPledgeData(ctx context.Context, in *PledgeParam, opts ...grpc.CallOption) (*wrappers.BytesValue, error) {
	out := new(wrappers.BytesValue)
	err := c.cc.Invoke(ctx, "/proto.NEP5PledgeAPI/GetPledgeData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nEP5PledgeAPIClient) GetPledgeBlock(ctx context.Context, in *PledgeParam, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.NEP5PledgeAPI/GetPledgeBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nEP5PledgeAPIClient) GetPledgeRewardBlock(ctx context.Context, in *types.StateBlock, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.NEP5PledgeAPI/GetPledgeRewardBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nEP5PledgeAPIClient) GetPledgeRewardBlockBySendHash(ctx context.Context, in *types.Hash, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.NEP5PledgeAPI/GetPledgeRewardBlockBySendHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nEP5PledgeAPIClient) GetWithdrawPledgeData(ctx context.Context, in *WithdrawPledgeParam, opts ...grpc.CallOption) (*wrappers.BytesValue, error) {
	out := new(wrappers.BytesValue)
	err := c.cc.Invoke(ctx, "/proto.NEP5PledgeAPI/GetWithdrawPledgeData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nEP5PledgeAPIClient) GetWithdrawPledgeBlock(ctx context.Context, in *WithdrawPledgeParam, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.NEP5PledgeAPI/GetWithdrawPledgeBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nEP5PledgeAPIClient) GetWithdrawRewardBlock(ctx context.Context, in *types.StateBlock, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.NEP5PledgeAPI/GetWithdrawRewardBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nEP5PledgeAPIClient) GetWithdrawRewardBlockBySendHash(ctx context.Context, in *types.Hash, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.NEP5PledgeAPI/GetWithdrawRewardBlockBySendHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nEP5PledgeAPIClient) ParsePledgeInfo(ctx context.Context, in *wrappers.BytesValue, opts ...grpc.CallOption) (*NEP5PledgeInfo, error) {
	out := new(NEP5PledgeInfo)
	err := c.cc.Invoke(ctx, "/proto.NEP5PledgeAPI/ParsePledgeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nEP5PledgeAPIClient) GetPledgeInfosByPledgeAddress(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*PledgeInfos, error) {
	out := new(PledgeInfos)
	err := c.cc.Invoke(ctx, "/proto.NEP5PledgeAPI/GetPledgeInfosByPledgeAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nEP5PledgeAPIClient) GetPledgeBeneficialTotalAmount(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*wrappers.Int64Value, error) {
	out := new(wrappers.Int64Value)
	err := c.cc.Invoke(ctx, "/proto.NEP5PledgeAPI/GetPledgeBeneficialTotalAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nEP5PledgeAPIClient) GetBeneficialPledgeInfosByAddress(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*PledgeInfos, error) {
	out := new(PledgeInfos)
	err := c.cc.Invoke(ctx, "/proto.NEP5PledgeAPI/GetBeneficialPledgeInfosByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nEP5PledgeAPIClient) GetBeneficialPledgeInfos(ctx context.Context, in *BeneficialPledgeRequest, opts ...grpc.CallOption) (*PledgeInfos, error) {
	out := new(PledgeInfos)
	err := c.cc.Invoke(ctx, "/proto.NEP5PledgeAPI/GetBeneficialPledgeInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nEP5PledgeAPIClient) GetPledgeBeneficialAmount(ctx context.Context, in *BeneficialPledgeRequest, opts ...grpc.CallOption) (*wrappers.Int64Value, error) {
	out := new(wrappers.Int64Value)
	err := c.cc.Invoke(ctx, "/proto.NEP5PledgeAPI/GetPledgeBeneficialAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nEP5PledgeAPIClient) GetPledgeInfo(ctx context.Context, in *WithdrawPledgeParam, opts ...grpc.CallOption) (*NEP5PledgeInfos, error) {
	out := new(NEP5PledgeInfos)
	err := c.cc.Invoke(ctx, "/proto.NEP5PledgeAPI/GetPledgeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nEP5PledgeAPIClient) GetPledgeInfoWithNEP5TxId(ctx context.Context, in *WithdrawPledgeParam, opts ...grpc.CallOption) (*NEP5PledgeInfo, error) {
	out := new(NEP5PledgeInfo)
	err := c.cc.Invoke(ctx, "/proto.NEP5PledgeAPI/GetPledgeInfoWithNEP5TxId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nEP5PledgeAPIClient) GetPledgeInfoWithTimeExpired(ctx context.Context, in *WithdrawPledgeParam, opts ...grpc.CallOption) (*NEP5PledgeInfos, error) {
	out := new(NEP5PledgeInfos)
	err := c.cc.Invoke(ctx, "/proto.NEP5PledgeAPI/GetPledgeInfoWithTimeExpired", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nEP5PledgeAPIClient) GetAllPledgeInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NEP5PledgeInfos, error) {
	out := new(NEP5PledgeInfos)
	err := c.cc.Invoke(ctx, "/proto.NEP5PledgeAPI/GetAllPledgeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nEP5PledgeAPIClient) GetTotalPledgeAmount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.Int64Value, error) {
	out := new(wrappers.Int64Value)
	err := c.cc.Invoke(ctx, "/proto.NEP5PledgeAPI/GetTotalPledgeAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NEP5PledgeAPIServer is the server API for NEP5PledgeAPI service.
type NEP5PledgeAPIServer interface {
	GetPledgeData(context.Context, *PledgeParam) (*wrappers.BytesValue, error)
	GetPledgeBlock(context.Context, *PledgeParam) (*types.StateBlock, error)
	GetPledgeRewardBlock(context.Context, *types.StateBlock) (*types.StateBlock, error)
	GetPledgeRewardBlockBySendHash(context.Context, *types.Hash) (*types.StateBlock, error)
	GetWithdrawPledgeData(context.Context, *WithdrawPledgeParam) (*wrappers.BytesValue, error)
	GetWithdrawPledgeBlock(context.Context, *WithdrawPledgeParam) (*types.StateBlock, error)
	GetWithdrawRewardBlock(context.Context, *types.StateBlock) (*types.StateBlock, error)
	GetWithdrawRewardBlockBySendHash(context.Context, *types.Hash) (*types.StateBlock, error)
	ParsePledgeInfo(context.Context, *wrappers.BytesValue) (*NEP5PledgeInfo, error)
	GetPledgeInfosByPledgeAddress(context.Context, *types.Address) (*PledgeInfos, error)
	GetPledgeBeneficialTotalAmount(context.Context, *types.Address) (*wrappers.Int64Value, error)
	GetBeneficialPledgeInfosByAddress(context.Context, *types.Address) (*PledgeInfos, error)
	GetBeneficialPledgeInfos(context.Context, *BeneficialPledgeRequest) (*PledgeInfos, error)
	GetPledgeBeneficialAmount(context.Context, *BeneficialPledgeRequest) (*wrappers.Int64Value, error)
	GetPledgeInfo(context.Context, *WithdrawPledgeParam) (*NEP5PledgeInfos, error)
	GetPledgeInfoWithNEP5TxId(context.Context, *WithdrawPledgeParam) (*NEP5PledgeInfo, error)
	GetPledgeInfoWithTimeExpired(context.Context, *WithdrawPledgeParam) (*NEP5PledgeInfos, error)
	GetAllPledgeInfo(context.Context, *empty.Empty) (*NEP5PledgeInfos, error)
	GetTotalPledgeAmount(context.Context, *empty.Empty) (*wrappers.Int64Value, error)
}

// UnimplementedNEP5PledgeAPIServer can be embedded to have forward compatible implementations.
type UnimplementedNEP5PledgeAPIServer struct {
}

func (*UnimplementedNEP5PledgeAPIServer) GetPledgeData(context.Context, *PledgeParam) (*wrappers.BytesValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPledgeData not implemented")
}
func (*UnimplementedNEP5PledgeAPIServer) GetPledgeBlock(context.Context, *PledgeParam) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPledgeBlock not implemented")
}
func (*UnimplementedNEP5PledgeAPIServer) GetPledgeRewardBlock(context.Context, *types.StateBlock) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPledgeRewardBlock not implemented")
}
func (*UnimplementedNEP5PledgeAPIServer) GetPledgeRewardBlockBySendHash(context.Context, *types.Hash) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPledgeRewardBlockBySendHash not implemented")
}
func (*UnimplementedNEP5PledgeAPIServer) GetWithdrawPledgeData(context.Context, *WithdrawPledgeParam) (*wrappers.BytesValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawPledgeData not implemented")
}
func (*UnimplementedNEP5PledgeAPIServer) GetWithdrawPledgeBlock(context.Context, *WithdrawPledgeParam) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawPledgeBlock not implemented")
}
func (*UnimplementedNEP5PledgeAPIServer) GetWithdrawRewardBlock(context.Context, *types.StateBlock) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawRewardBlock not implemented")
}
func (*UnimplementedNEP5PledgeAPIServer) GetWithdrawRewardBlockBySendHash(context.Context, *types.Hash) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawRewardBlockBySendHash not implemented")
}
func (*UnimplementedNEP5PledgeAPIServer) ParsePledgeInfo(context.Context, *wrappers.BytesValue) (*NEP5PledgeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParsePledgeInfo not implemented")
}
func (*UnimplementedNEP5PledgeAPIServer) GetPledgeInfosByPledgeAddress(context.Context, *types.Address) (*PledgeInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPledgeInfosByPledgeAddress not implemented")
}
func (*UnimplementedNEP5PledgeAPIServer) GetPledgeBeneficialTotalAmount(context.Context, *types.Address) (*wrappers.Int64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPledgeBeneficialTotalAmount not implemented")
}
func (*UnimplementedNEP5PledgeAPIServer) GetBeneficialPledgeInfosByAddress(context.Context, *types.Address) (*PledgeInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeneficialPledgeInfosByAddress not implemented")
}
func (*UnimplementedNEP5PledgeAPIServer) GetBeneficialPledgeInfos(context.Context, *BeneficialPledgeRequest) (*PledgeInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeneficialPledgeInfos not implemented")
}
func (*UnimplementedNEP5PledgeAPIServer) GetPledgeBeneficialAmount(context.Context, *BeneficialPledgeRequest) (*wrappers.Int64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPledgeBeneficialAmount not implemented")
}
func (*UnimplementedNEP5PledgeAPIServer) GetPledgeInfo(context.Context, *WithdrawPledgeParam) (*NEP5PledgeInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPledgeInfo not implemented")
}
func (*UnimplementedNEP5PledgeAPIServer) GetPledgeInfoWithNEP5TxId(context.Context, *WithdrawPledgeParam) (*NEP5PledgeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPledgeInfoWithNEP5TxId not implemented")
}
func (*UnimplementedNEP5PledgeAPIServer) GetPledgeInfoWithTimeExpired(context.Context, *WithdrawPledgeParam) (*NEP5PledgeInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPledgeInfoWithTimeExpired not implemented")
}
func (*UnimplementedNEP5PledgeAPIServer) GetAllPledgeInfo(context.Context, *empty.Empty) (*NEP5PledgeInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPledgeInfo not implemented")
}
func (*UnimplementedNEP5PledgeAPIServer) GetTotalPledgeAmount(context.Context, *empty.Empty) (*wrappers.Int64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalPledgeAmount not implemented")
}

func RegisterNEP5PledgeAPIServer(s *grpc.Server, srv NEP5PledgeAPIServer) {
	s.RegisterService(&_NEP5PledgeAPI_serviceDesc, srv)
}

func _NEP5PledgeAPI_GetPledgeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PledgeParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NEP5PledgeAPIServer).GetPledgeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NEP5PledgeAPI/GetPledgeData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NEP5PledgeAPIServer).GetPledgeData(ctx, req.(*PledgeParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _NEP5PledgeAPI_GetPledgeBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PledgeParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NEP5PledgeAPIServer).GetPledgeBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NEP5PledgeAPI/GetPledgeBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NEP5PledgeAPIServer).GetPledgeBlock(ctx, req.(*PledgeParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _NEP5PledgeAPI_GetPledgeRewardBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.StateBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NEP5PledgeAPIServer).GetPledgeRewardBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NEP5PledgeAPI/GetPledgeRewardBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NEP5PledgeAPIServer).GetPledgeRewardBlock(ctx, req.(*types.StateBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _NEP5PledgeAPI_GetPledgeRewardBlockBySendHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NEP5PledgeAPIServer).GetPledgeRewardBlockBySendHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NEP5PledgeAPI/GetPledgeRewardBlockBySendHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NEP5PledgeAPIServer).GetPledgeRewardBlockBySendHash(ctx, req.(*types.Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _NEP5PledgeAPI_GetWithdrawPledgeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawPledgeParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NEP5PledgeAPIServer).GetWithdrawPledgeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NEP5PledgeAPI/GetWithdrawPledgeData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NEP5PledgeAPIServer).GetWithdrawPledgeData(ctx, req.(*WithdrawPledgeParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _NEP5PledgeAPI_GetWithdrawPledgeBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawPledgeParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NEP5PledgeAPIServer).GetWithdrawPledgeBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NEP5PledgeAPI/GetWithdrawPledgeBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NEP5PledgeAPIServer).GetWithdrawPledgeBlock(ctx, req.(*WithdrawPledgeParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _NEP5PledgeAPI_GetWithdrawRewardBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.StateBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NEP5PledgeAPIServer).GetWithdrawRewardBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NEP5PledgeAPI/GetWithdrawRewardBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NEP5PledgeAPIServer).GetWithdrawRewardBlock(ctx, req.(*types.StateBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _NEP5PledgeAPI_GetWithdrawRewardBlockBySendHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NEP5PledgeAPIServer).GetWithdrawRewardBlockBySendHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NEP5PledgeAPI/GetWithdrawRewardBlockBySendHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NEP5PledgeAPIServer).GetWithdrawRewardBlockBySendHash(ctx, req.(*types.Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _NEP5PledgeAPI_ParsePledgeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.BytesValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NEP5PledgeAPIServer).ParsePledgeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NEP5PledgeAPI/ParsePledgeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NEP5PledgeAPIServer).ParsePledgeInfo(ctx, req.(*wrappers.BytesValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _NEP5PledgeAPI_GetPledgeInfosByPledgeAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NEP5PledgeAPIServer).GetPledgeInfosByPledgeAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NEP5PledgeAPI/GetPledgeInfosByPledgeAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NEP5PledgeAPIServer).GetPledgeInfosByPledgeAddress(ctx, req.(*types.Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _NEP5PledgeAPI_GetPledgeBeneficialTotalAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NEP5PledgeAPIServer).GetPledgeBeneficialTotalAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NEP5PledgeAPI/GetPledgeBeneficialTotalAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NEP5PledgeAPIServer).GetPledgeBeneficialTotalAmount(ctx, req.(*types.Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _NEP5PledgeAPI_GetBeneficialPledgeInfosByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NEP5PledgeAPIServer).GetBeneficialPledgeInfosByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NEP5PledgeAPI/GetBeneficialPledgeInfosByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NEP5PledgeAPIServer).GetBeneficialPledgeInfosByAddress(ctx, req.(*types.Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _NEP5PledgeAPI_GetBeneficialPledgeInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeneficialPledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NEP5PledgeAPIServer).GetBeneficialPledgeInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NEP5PledgeAPI/GetBeneficialPledgeInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NEP5PledgeAPIServer).GetBeneficialPledgeInfos(ctx, req.(*BeneficialPledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NEP5PledgeAPI_GetPledgeBeneficialAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeneficialPledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NEP5PledgeAPIServer).GetPledgeBeneficialAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NEP5PledgeAPI/GetPledgeBeneficialAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NEP5PledgeAPIServer).GetPledgeBeneficialAmount(ctx, req.(*BeneficialPledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NEP5PledgeAPI_GetPledgeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawPledgeParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NEP5PledgeAPIServer).GetPledgeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NEP5PledgeAPI/GetPledgeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NEP5PledgeAPIServer).GetPledgeInfo(ctx, req.(*WithdrawPledgeParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _NEP5PledgeAPI_GetPledgeInfoWithNEP5TxId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawPledgeParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NEP5PledgeAPIServer).GetPledgeInfoWithNEP5TxId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NEP5PledgeAPI/GetPledgeInfoWithNEP5TxId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NEP5PledgeAPIServer).GetPledgeInfoWithNEP5TxId(ctx, req.(*WithdrawPledgeParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _NEP5PledgeAPI_GetPledgeInfoWithTimeExpired_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawPledgeParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NEP5PledgeAPIServer).GetPledgeInfoWithTimeExpired(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NEP5PledgeAPI/GetPledgeInfoWithTimeExpired",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NEP5PledgeAPIServer).GetPledgeInfoWithTimeExpired(ctx, req.(*WithdrawPledgeParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _NEP5PledgeAPI_GetAllPledgeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NEP5PledgeAPIServer).GetAllPledgeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NEP5PledgeAPI/GetAllPledgeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NEP5PledgeAPIServer).GetAllPledgeInfo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NEP5PledgeAPI_GetTotalPledgeAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NEP5PledgeAPIServer).GetTotalPledgeAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NEP5PledgeAPI/GetTotalPledgeAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NEP5PledgeAPIServer).GetTotalPledgeAmount(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _NEP5PledgeAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NEP5PledgeAPI",
	HandlerType: (*NEP5PledgeAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPledgeData",
			Handler:    _NEP5PledgeAPI_GetPledgeData_Handler,
		},
		{
			MethodName: "GetPledgeBlock",
			Handler:    _NEP5PledgeAPI_GetPledgeBlock_Handler,
		},
		{
			MethodName: "GetPledgeRewardBlock",
			Handler:    _NEP5PledgeAPI_GetPledgeRewardBlock_Handler,
		},
		{
			MethodName: "GetPledgeRewardBlockBySendHash",
			Handler:    _NEP5PledgeAPI_GetPledgeRewardBlockBySendHash_Handler,
		},
		{
			MethodName: "GetWithdrawPledgeData",
			Handler:    _NEP5PledgeAPI_GetWithdrawPledgeData_Handler,
		},
		{
			MethodName: "GetWithdrawPledgeBlock",
			Handler:    _NEP5PledgeAPI_GetWithdrawPledgeBlock_Handler,
		},
		{
			MethodName: "GetWithdrawRewardBlock",
			Handler:    _NEP5PledgeAPI_GetWithdrawRewardBlock_Handler,
		},
		{
			MethodName: "GetWithdrawRewardBlockBySendHash",
			Handler:    _NEP5PledgeAPI_GetWithdrawRewardBlockBySendHash_Handler,
		},
		{
			MethodName: "ParsePledgeInfo",
			Handler:    _NEP5PledgeAPI_ParsePledgeInfo_Handler,
		},
		{
			MethodName: "GetPledgeInfosByPledgeAddress",
			Handler:    _NEP5PledgeAPI_GetPledgeInfosByPledgeAddress_Handler,
		},
		{
			MethodName: "GetPledgeBeneficialTotalAmount",
			Handler:    _NEP5PledgeAPI_GetPledgeBeneficialTotalAmount_Handler,
		},
		{
			MethodName: "GetBeneficialPledgeInfosByAddress",
			Handler:    _NEP5PledgeAPI_GetBeneficialPledgeInfosByAddress_Handler,
		},
		{
			MethodName: "GetBeneficialPledgeInfos",
			Handler:    _NEP5PledgeAPI_GetBeneficialPledgeInfos_Handler,
		},
		{
			MethodName: "GetPledgeBeneficialAmount",
			Handler:    _NEP5PledgeAPI_GetPledgeBeneficialAmount_Handler,
		},
		{
			MethodName: "GetPledgeInfo",
			Handler:    _NEP5PledgeAPI_GetPledgeInfo_Handler,
		},
		{
			MethodName: "GetPledgeInfoWithNEP5TxId",
			Handler:    _NEP5PledgeAPI_GetPledgeInfoWithNEP5TxId_Handler,
		},
		{
			MethodName: "GetPledgeInfoWithTimeExpired",
			Handler:    _NEP5PledgeAPI_GetPledgeInfoWithTimeExpired_Handler,
		},
		{
			MethodName: "GetAllPledgeInfo",
			Handler:    _NEP5PledgeAPI_GetAllPledgeInfo_Handler,
		},
		{
			MethodName: "GetTotalPledgeAmount",
			Handler:    _NEP5PledgeAPI_GetTotalPledgeAmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nep5_pledge.proto",
}
