// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.7.1
// source: publicKeyDistribution.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	types "github.com/qlcchain/go-qlc/rpc/grpc/proto/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type VerifierRegParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Id      string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Key     string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *VerifierRegParam) Reset() {
	*x = VerifierRegParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicKeyDistribution_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifierRegParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifierRegParam) ProtoMessage() {}

func (x *VerifierRegParam) ProtoReflect() protoreflect.Message {
	mi := &file_publicKeyDistribution_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifierRegParam.ProtoReflect.Descriptor instead.
func (*VerifierRegParam) Descriptor() ([]byte, []int) {
	return file_publicKeyDistribution_proto_rawDescGZIP(), []int{0}
}

func (x *VerifierRegParam) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *VerifierRegParam) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *VerifierRegParam) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VerifierRegParam) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type VerifierRegParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params []*VerifierRegParam `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *VerifierRegParams) Reset() {
	*x = VerifierRegParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicKeyDistribution_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifierRegParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifierRegParams) ProtoMessage() {}

func (x *VerifierRegParams) ProtoReflect() protoreflect.Message {
	mi := &file_publicKeyDistribution_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifierRegParams.ProtoReflect.Descriptor instead.
func (*VerifierRegParams) Descriptor() ([]byte, []int) {
	return file_publicKeyDistribution_proto_rawDescGZIP(), []int{1}
}

func (x *VerifierRegParams) GetParams() []*VerifierRegParam {
	if x != nil {
		return x.Params
	}
	return nil
}

type VerifierUnRegParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *VerifierUnRegParam) Reset() {
	*x = VerifierUnRegParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicKeyDistribution_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifierUnRegParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifierUnRegParam) ProtoMessage() {}

func (x *VerifierUnRegParam) ProtoReflect() protoreflect.Message {
	mi := &file_publicKeyDistribution_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifierUnRegParam.ProtoReflect.Descriptor instead.
func (*VerifierUnRegParam) Descriptor() ([]byte, []int) {
	return file_publicKeyDistribution_proto_rawDescGZIP(), []int{2}
}

func (x *VerifierUnRegParam) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *VerifierUnRegParam) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type VerifierStateByBlockHeightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height  uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *VerifierStateByBlockHeightRequest) Reset() {
	*x = VerifierStateByBlockHeightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicKeyDistribution_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifierStateByBlockHeightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifierStateByBlockHeightRequest) ProtoMessage() {}

func (x *VerifierStateByBlockHeightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publicKeyDistribution_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifierStateByBlockHeightRequest.ProtoReflect.Descriptor instead.
func (*VerifierStateByBlockHeightRequest) Descriptor() ([]byte, []int) {
	return file_publicKeyDistribution_proto_rawDescGZIP(), []int{3}
}

func (x *VerifierStateByBlockHeightRequest) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *VerifierStateByBlockHeightRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type PKDVerifierStateList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerifierNum  int32                              `protobuf:"varint,1,opt,name=verifierNum,proto3" json:"verifierNum,omitempty"`
	AllVerifiers map[string]*types.PovVerifierState `protobuf:"bytes,2,rep,name=allVerifiers,proto3" json:"allVerifiers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PKDVerifierStateList) Reset() {
	*x = PKDVerifierStateList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicKeyDistribution_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKDVerifierStateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKDVerifierStateList) ProtoMessage() {}

func (x *PKDVerifierStateList) ProtoReflect() protoreflect.Message {
	mi := &file_publicKeyDistribution_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKDVerifierStateList.ProtoReflect.Descriptor instead.
func (*PKDVerifierStateList) Descriptor() ([]byte, []int) {
	return file_publicKeyDistribution_proto_rawDescGZIP(), []int{4}
}

func (x *PKDVerifierStateList) GetVerifierNum() int32 {
	if x != nil {
		return x.VerifierNum
	}
	return 0
}

func (x *PKDVerifierStateList) GetAllVerifiers() map[string]*types.PovVerifierState {
	if x != nil {
		return x.AllVerifiers
	}
	return nil
}

type PublishParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account   string   `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Type      string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Id        string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	PubKey    string   `protobuf:"bytes,4,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	KeyType   string   `protobuf:"bytes,5,opt,name=keyType,proto3" json:"keyType,omitempty"`
	Fee       int64    `protobuf:"varint,6,opt,name=fee,proto3" json:"fee,omitempty"`
	Verifiers []string `protobuf:"bytes,7,rep,name=verifiers,proto3" json:"verifiers,omitempty"`
	Codes     []string `protobuf:"bytes,8,rep,name=codes,proto3" json:"codes,omitempty"`
	Hash      string   `protobuf:"bytes,9,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *PublishParam) Reset() {
	*x = PublishParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicKeyDistribution_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishParam) ProtoMessage() {}

func (x *PublishParam) ProtoReflect() protoreflect.Message {
	mi := &file_publicKeyDistribution_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishParam.ProtoReflect.Descriptor instead.
func (*PublishParam) Descriptor() ([]byte, []int) {
	return file_publicKeyDistribution_proto_rawDescGZIP(), []int{5}
}

func (x *PublishParam) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *PublishParam) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PublishParam) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PublishParam) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *PublishParam) GetKeyType() string {
	if x != nil {
		return x.KeyType
	}
	return ""
}

func (x *PublishParam) GetFee() int64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *PublishParam) GetVerifiers() []string {
	if x != nil {
		return x.Verifiers
	}
	return nil
}

func (x *PublishParam) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

func (x *PublishParam) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type PublishInfoState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//    PublishParam    publishParam = 1;
	Account   string                 `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Type      string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Id        string                 `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	PubKey    string                 `protobuf:"bytes,4,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	KeyType   string                 `protobuf:"bytes,5,opt,name=keyType,proto3" json:"keyType,omitempty"`
	Fee       int64                  `protobuf:"varint,6,opt,name=fee,proto3" json:"fee,omitempty"`
	Verifiers []string               `protobuf:"bytes,7,rep,name=verifiers,proto3" json:"verifiers,omitempty"`
	Codes     []string               `protobuf:"bytes,8,rep,name=codes,proto3" json:"codes,omitempty"`
	Hash      string                 `protobuf:"bytes,9,opt,name=hash,proto3" json:"hash,omitempty"`
	State     *types.PovPublishState `protobuf:"bytes,10,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *PublishInfoState) Reset() {
	*x = PublishInfoState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicKeyDistribution_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishInfoState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishInfoState) ProtoMessage() {}

func (x *PublishInfoState) ProtoReflect() protoreflect.Message {
	mi := &file_publicKeyDistribution_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishInfoState.ProtoReflect.Descriptor instead.
func (*PublishInfoState) Descriptor() ([]byte, []int) {
	return file_publicKeyDistribution_proto_rawDescGZIP(), []int{6}
}

func (x *PublishInfoState) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *PublishInfoState) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PublishInfoState) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PublishInfoState) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *PublishInfoState) GetKeyType() string {
	if x != nil {
		return x.KeyType
	}
	return ""
}

func (x *PublishInfoState) GetFee() int64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *PublishInfoState) GetVerifiers() []string {
	if x != nil {
		return x.Verifiers
	}
	return nil
}

func (x *PublishInfoState) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

func (x *PublishInfoState) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *PublishInfoState) GetState() *types.PovPublishState {
	if x != nil {
		return x.State
	}
	return nil
}

type PublishInfoStates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	States []*PublishInfoState `protobuf:"bytes,1,rep,name=states,proto3" json:"states,omitempty"`
}

func (x *PublishInfoStates) Reset() {
	*x = PublishInfoStates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicKeyDistribution_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishInfoStates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishInfoStates) ProtoMessage() {}

func (x *PublishInfoStates) ProtoReflect() protoreflect.Message {
	mi := &file_publicKeyDistribution_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishInfoStates.ProtoReflect.Descriptor instead.
func (*PublishInfoStates) Descriptor() ([]byte, []int) {
	return file_publicKeyDistribution_proto_rawDescGZIP(), []int{7}
}

func (x *PublishInfoStates) GetStates() []*PublishInfoState {
	if x != nil {
		return x.States
	}
	return nil
}

type UnPublishParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account string `protobuf:"bytes,1,opt,name=Account,proto3" json:"Account,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Id      string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	PubKey  string `protobuf:"bytes,4,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	KeyType string `protobuf:"bytes,5,opt,name=keyType,proto3" json:"keyType,omitempty"`
	Hash    string `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *UnPublishParam) Reset() {
	*x = UnPublishParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicKeyDistribution_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnPublishParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnPublishParam) ProtoMessage() {}

func (x *UnPublishParam) ProtoReflect() protoreflect.Message {
	mi := &file_publicKeyDistribution_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnPublishParam.ProtoReflect.Descriptor instead.
func (*UnPublishParam) Descriptor() ([]byte, []int) {
	return file_publicKeyDistribution_proto_rawDescGZIP(), []int{8}
}

func (x *UnPublishParam) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *UnPublishParam) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UnPublishParam) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UnPublishParam) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *UnPublishParam) GetKeyType() string {
	if x != nil {
		return x.KeyType
	}
	return ""
}

func (x *UnPublishParam) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type VerifierContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	PubKey  string `protobuf:"bytes,2,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Code    string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Hash    string `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *VerifierContent) Reset() {
	*x = VerifierContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicKeyDistribution_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifierContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifierContent) ProtoMessage() {}

func (x *VerifierContent) ProtoReflect() protoreflect.Message {
	mi := &file_publicKeyDistribution_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifierContent.ProtoReflect.Descriptor instead.
func (*VerifierContent) Descriptor() ([]byte, []int) {
	return file_publicKeyDistribution_proto_rawDescGZIP(), []int{9}
}

func (x *VerifierContent) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *VerifierContent) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *VerifierContent) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *VerifierContent) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type PublishRet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block     *types.StateBlock           `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	Verifiers map[string]*VerifierContent `protobuf:"bytes,2,rep,name=verifiers,proto3" json:"verifiers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PublishRet) Reset() {
	*x = PublishRet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicKeyDistribution_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishRet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishRet) ProtoMessage() {}

func (x *PublishRet) ProtoReflect() protoreflect.Message {
	mi := &file_publicKeyDistribution_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishRet.ProtoReflect.Descriptor instead.
func (*PublishRet) Descriptor() ([]byte, []int) {
	return file_publicKeyDistribution_proto_rawDescGZIP(), []int{10}
}

func (x *PublishRet) GetBlock() *types.StateBlock {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *PublishRet) GetVerifiers() map[string]*VerifierContent {
	if x != nil {
		return x.Verifiers
	}
	return nil
}

type OracleParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Id      string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	KeyType string `protobuf:"bytes,4,opt,name=keyType,proto3" json:"keyType,omitempty"`
	PubKey  string `protobuf:"bytes,5,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Code    string `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
	Hash    string `protobuf:"bytes,7,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *OracleParam) Reset() {
	*x = OracleParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicKeyDistribution_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleParam) ProtoMessage() {}

func (x *OracleParam) ProtoReflect() protoreflect.Message {
	mi := &file_publicKeyDistribution_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleParam.ProtoReflect.Descriptor instead.
func (*OracleParam) Descriptor() ([]byte, []int) {
	return file_publicKeyDistribution_proto_rawDescGZIP(), []int{11}
}

func (x *OracleParam) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *OracleParam) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OracleParam) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OracleParam) GetKeyType() string {
	if x != nil {
		return x.KeyType
	}
	return ""
}

func (x *OracleParam) GetPubKey() string {
	if x != nil {
		return x.PubKey
	}
	return ""
}

func (x *OracleParam) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *OracleParam) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type OracleParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params []*OracleParam `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *OracleParams) Reset() {
	*x = OracleParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicKeyDistribution_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleParams) ProtoMessage() {}

func (x *OracleParams) ProtoReflect() protoreflect.Message {
	mi := &file_publicKeyDistribution_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleParams.ProtoReflect.Descriptor instead.
func (*OracleParams) Descriptor() ([]byte, []int) {
	return file_publicKeyDistribution_proto_rawDescGZIP(), []int{12}
}

func (x *OracleParams) GetParams() []*OracleParam {
	if x != nil {
		return x.Params
	}
	return nil
}

type PKDRewardParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account      string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Beneficial   string `protobuf:"bytes,2,opt,name=beneficial,proto3" json:"beneficial,omitempty"`
	EndHeight    uint64 `protobuf:"varint,3,opt,name=endHeight,proto3" json:"endHeight,omitempty"`
	RewardAmount int64  `protobuf:"varint,4,opt,name=rewardAmount,proto3" json:"rewardAmount,omitempty"`
}

func (x *PKDRewardParam) Reset() {
	*x = PKDRewardParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicKeyDistribution_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKDRewardParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKDRewardParam) ProtoMessage() {}

func (x *PKDRewardParam) ProtoReflect() protoreflect.Message {
	mi := &file_publicKeyDistribution_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKDRewardParam.ProtoReflect.Descriptor instead.
func (*PKDRewardParam) Descriptor() ([]byte, []int) {
	return file_publicKeyDistribution_proto_rawDescGZIP(), []int{13}
}

func (x *PKDRewardParam) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *PKDRewardParam) GetBeneficial() string {
	if x != nil {
		return x.Beneficial
	}
	return ""
}

func (x *PKDRewardParam) GetEndHeight() uint64 {
	if x != nil {
		return x.EndHeight
	}
	return 0
}

func (x *PKDRewardParam) GetRewardAmount() int64 {
	if x != nil {
		return x.RewardAmount
	}
	return 0
}

type PKDHistoryRewardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastEndHeight  uint64 `protobuf:"varint,1,opt,name=lastEndHeight,proto3" json:"lastEndHeight,omitempty"`
	LastBeneficial string `protobuf:"bytes,2,opt,name=lastBeneficial,proto3" json:"lastBeneficial,omitempty"`
	LastRewardTime int64  `protobuf:"varint,3,opt,name=lastRewardTime,proto3" json:"lastRewardTime,omitempty"`
	RewardAmount   int64  `protobuf:"varint,4,opt,name=rewardAmount,proto3" json:"rewardAmount,omitempty"`
}

func (x *PKDHistoryRewardInfo) Reset() {
	*x = PKDHistoryRewardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicKeyDistribution_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKDHistoryRewardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKDHistoryRewardInfo) ProtoMessage() {}

func (x *PKDHistoryRewardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_publicKeyDistribution_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKDHistoryRewardInfo.ProtoReflect.Descriptor instead.
func (*PKDHistoryRewardInfo) Descriptor() ([]byte, []int) {
	return file_publicKeyDistribution_proto_rawDescGZIP(), []int{14}
}

func (x *PKDHistoryRewardInfo) GetLastEndHeight() uint64 {
	if x != nil {
		return x.LastEndHeight
	}
	return 0
}

func (x *PKDHistoryRewardInfo) GetLastBeneficial() string {
	if x != nil {
		return x.LastBeneficial
	}
	return ""
}

func (x *PKDHistoryRewardInfo) GetLastRewardTime() int64 {
	if x != nil {
		return x.LastRewardTime
	}
	return 0
}

func (x *PKDHistoryRewardInfo) GetRewardAmount() int64 {
	if x != nil {
		return x.RewardAmount
	}
	return 0
}

type PKDAvailRewardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastEndHeight     uint64 `protobuf:"varint,1,opt,name=LastEndHeight,proto3" json:"LastEndHeight,omitempty"`
	LatestBlockHeight uint64 `protobuf:"varint,2,opt,name=LatestBlockHeight,proto3" json:"LatestBlockHeight,omitempty"`
	NodeRewardHeight  uint64 `protobuf:"varint,3,opt,name=NodeRewardHeight,proto3" json:"NodeRewardHeight,omitempty"`
	AvailEndHeight    uint64 `protobuf:"varint,4,opt,name=AvailEndHeight,proto3" json:"AvailEndHeight,omitempty"`
	AvailRewardAmount int64  `protobuf:"varint,5,opt,name=AvailRewardAmount,proto3" json:"AvailRewardAmount,omitempty"`
	NeedCallReward    bool   `protobuf:"varint,6,opt,name=NeedCallReward,proto3" json:"NeedCallReward,omitempty"`
}

func (x *PKDAvailRewardInfo) Reset() {
	*x = PKDAvailRewardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicKeyDistribution_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PKDAvailRewardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKDAvailRewardInfo) ProtoMessage() {}

func (x *PKDAvailRewardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_publicKeyDistribution_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKDAvailRewardInfo.ProtoReflect.Descriptor instead.
func (*PKDAvailRewardInfo) Descriptor() ([]byte, []int) {
	return file_publicKeyDistribution_proto_rawDescGZIP(), []int{15}
}

func (x *PKDAvailRewardInfo) GetLastEndHeight() uint64 {
	if x != nil {
		return x.LastEndHeight
	}
	return 0
}

func (x *PKDAvailRewardInfo) GetLatestBlockHeight() uint64 {
	if x != nil {
		return x.LatestBlockHeight
	}
	return 0
}

func (x *PKDAvailRewardInfo) GetNodeRewardHeight() uint64 {
	if x != nil {
		return x.NodeRewardHeight
	}
	return 0
}

func (x *PKDAvailRewardInfo) GetAvailEndHeight() uint64 {
	if x != nil {
		return x.AvailEndHeight
	}
	return 0
}

func (x *PKDAvailRewardInfo) GetAvailRewardAmount() int64 {
	if x != nil {
		return x.AvailRewardAmount
	}
	return 0
}

func (x *PKDAvailRewardInfo) GetNeedCallReward() bool {
	if x != nil {
		return x.NeedCallReward
	}
	return false
}

type TypeAndIDParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PType string `protobuf:"bytes,1,opt,name=pType,proto3" json:"pType,omitempty"`
	PID   string `protobuf:"bytes,2,opt,name=pID,proto3" json:"pID,omitempty"`
}

func (x *TypeAndIDParam) Reset() {
	*x = TypeAndIDParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicKeyDistribution_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeAndIDParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeAndIDParam) ProtoMessage() {}

func (x *TypeAndIDParam) ProtoReflect() protoreflect.Message {
	mi := &file_publicKeyDistribution_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeAndIDParam.ProtoReflect.Descriptor instead.
func (*TypeAndIDParam) Descriptor() ([]byte, []int) {
	return file_publicKeyDistribution_proto_rawDescGZIP(), []int{16}
}

func (x *TypeAndIDParam) GetPType() string {
	if x != nil {
		return x.PType
	}
	return ""
}

func (x *TypeAndIDParam) GetPID() string {
	if x != nil {
		return x.PID
	}
	return ""
}

type AccountAndTypeParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PType   string `protobuf:"bytes,1,opt,name=pType,proto3" json:"pType,omitempty"`
	Account string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *AccountAndTypeParam) Reset() {
	*x = AccountAndTypeParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicKeyDistribution_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountAndTypeParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountAndTypeParam) ProtoMessage() {}

func (x *AccountAndTypeParam) ProtoReflect() protoreflect.Message {
	mi := &file_publicKeyDistribution_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountAndTypeParam.ProtoReflect.Descriptor instead.
func (*AccountAndTypeParam) Descriptor() ([]byte, []int) {
	return file_publicKeyDistribution_proto_rawDescGZIP(), []int{17}
}

func (x *AccountAndTypeParam) GetPType() string {
	if x != nil {
		return x.PType
	}
	return ""
}

func (x *AccountAndTypeParam) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type VerifierHeartBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account string   `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	VTypes  []string `protobuf:"bytes,2,rep,name=vTypes,proto3" json:"vTypes,omitempty"`
}

func (x *VerifierHeartBlockRequest) Reset() {
	*x = VerifierHeartBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publicKeyDistribution_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifierHeartBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifierHeartBlockRequest) ProtoMessage() {}

func (x *VerifierHeartBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publicKeyDistribution_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifierHeartBlockRequest.ProtoReflect.Descriptor instead.
func (*VerifierHeartBlockRequest) Descriptor() ([]byte, []int) {
	return file_publicKeyDistribution_proto_rawDescGZIP(), []int{18}
}

func (x *VerifierHeartBlockRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *VerifierHeartBlockRequest) GetVTypes() []string {
	if x != nil {
		return x.VTypes
	}
	return nil
}

var File_publicKeyDistribution_proto protoreflect.FileDescriptor

var file_publicKeyDistribution_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x62, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x65, 0x67,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x44, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x65, 0x67, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x42, 0x0a, 0x12, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x55, 0x6e, 0x52, 0x65, 0x67, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x55, 0x0a, 0x21, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x14, 0x50, 0x4b, 0x44, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x12, 0x51, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x4b, 0x44, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x6c, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x1a, 0x58, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x50, 0x6f, 0x76, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd8,
	0x01, 0x0a, 0x0c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x66, 0x65,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x8a, 0x02, 0x0a, 0x10, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x66, 0x65, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x50, 0x6f, 0x76, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x44, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x94, 0x01, 0x0a,
	0x0e, 0x55, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x22, 0x6b, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x22, 0xcb, 0x01, 0x0a, 0x0a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x74, 0x12,
	0x27, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3e, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x74, 0x2e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x1a, 0x54, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa5,
	0x01, 0x0a, 0x0b, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x3a, 0x0a, 0x0c, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x0e, 0x50, 0x4b, 0x44, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xb0, 0x01, 0x0a, 0x14, 0x50, 0x4b, 0x44, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x45, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x92, 0x02, 0x0a, 0x12, 0x50, 0x4b, 0x44, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x4c,
	0x61, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x2c, 0x0a, 0x11, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x64, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x65, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x4e, 0x65, 0x65, 0x64, 0x43,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x38, 0x0a, 0x0e, 0x54, 0x79, 0x70,
	0x65, 0x41, 0x6e, 0x64, 0x49, 0x44, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x70, 0x49, 0x44, 0x22, 0x45, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4d, 0x0a, 0x19, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x54, 0x79, 0x70, 0x65, 0x73, 0x32, 0xd4, 0x18, 0x0a, 0x18, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x50, 0x49, 0x12, 0x78, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x65, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x11, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x30,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x70, 0x6b, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x7e, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x55,
	0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x55,
	0x6e, 0x52, 0x65, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x32, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x70, 0x6b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x6c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x65, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f,
	0x70, 0x6b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x69,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x42, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x65, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x2a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x70, 0x6b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x69, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24,
	0x12, 0x22, 0x2f, 0x70, 0x6b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x12, 0x70, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x73, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x65,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12,
	0x25, 0x2f, 0x70, 0x6b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x67, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x42, 0x79, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x99, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x76, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x70, 0x6b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x8a, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x4b, 0x44, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x70,
	0x6b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x65, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x74, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x24, 0x22, 0x1f, 0x2f, 0x70, 0x6b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x6b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f,
	0x70, 0x6b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67,
	0x65, 0x74, 0x55, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x3a, 0x01, 0x2a, 0x12, 0x75, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6e, 0x64, 0x49, 0x44, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x2c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x70, 0x6b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x42,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x70, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6e, 0x64,
	0x49, 0x44, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x70, 0x6b, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x6f, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x42,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x2d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x70, 0x6b, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x90, 0x01,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12,
	0x2f, 0x2f, 0x70, 0x6b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x67, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x5f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x20, 0x12, 0x1e, 0x2f, 0x70, 0x6b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x68, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x2c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x70, 0x6b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x78, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x42, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x41, 0x6e, 0x64, 0x49, 0x44, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x6e, 0x64, 0x49, 0x44, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x70,
	0x6b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65,
	0x74, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x42, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x89, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x30, 0x12, 0x2e, 0x2f, 0x70, 0x6b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x66, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x2c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x70, 0x6b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x5d, 0x0a, 0x0e, 0x50, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x4b, 0x44, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x70, 0x6b, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x61, 0x0a, 0x10, 0x55, 0x6e, 0x70, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x4b, 0x44, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x70, 0x6b, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x6e, 0x70, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x6a, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x4b, 0x44, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x2a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x70, 0x6b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65,
	0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x69, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x11, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x70, 0x6b,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x3a,
	0x01, 0x2a, 0x12, 0x74, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x63, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a,
	0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x70, 0x6b, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79,
	0x53, 0x65, 0x6e, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x69, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x4b, 0x44, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x12, 0x20, 0x2f, 0x70, 0x6b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x6b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x4b, 0x44, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x70,
	0x6b, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65,
	0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x7e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x30,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x70, 0x6b, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a,
	0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_publicKeyDistribution_proto_rawDescOnce sync.Once
	file_publicKeyDistribution_proto_rawDescData = file_publicKeyDistribution_proto_rawDesc
)

func file_publicKeyDistribution_proto_rawDescGZIP() []byte {
	file_publicKeyDistribution_proto_rawDescOnce.Do(func() {
		file_publicKeyDistribution_proto_rawDescData = protoimpl.X.CompressGZIP(file_publicKeyDistribution_proto_rawDescData)
	})
	return file_publicKeyDistribution_proto_rawDescData
}

var file_publicKeyDistribution_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_publicKeyDistribution_proto_goTypes = []interface{}{
	(*VerifierRegParam)(nil),                  // 0: proto.VerifierRegParam
	(*VerifierRegParams)(nil),                 // 1: proto.VerifierRegParams
	(*VerifierUnRegParam)(nil),                // 2: proto.VerifierUnRegParam
	(*VerifierStateByBlockHeightRequest)(nil), // 3: proto.VerifierStateByBlockHeightRequest
	(*PKDVerifierStateList)(nil),              // 4: proto.PKDVerifierStateList
	(*PublishParam)(nil),                      // 5: proto.PublishParam
	(*PublishInfoState)(nil),                  // 6: proto.PublishInfoState
	(*PublishInfoStates)(nil),                 // 7: proto.PublishInfoStates
	(*UnPublishParam)(nil),                    // 8: proto.UnPublishParam
	(*VerifierContent)(nil),                   // 9: proto.VerifierContent
	(*PublishRet)(nil),                        // 10: proto.PublishRet
	(*OracleParam)(nil),                       // 11: proto.OracleParam
	(*OracleParams)(nil),                      // 12: proto.OracleParams
	(*PKDRewardParam)(nil),                    // 13: proto.PKDRewardParam
	(*PKDHistoryRewardInfo)(nil),              // 14: proto.PKDHistoryRewardInfo
	(*PKDAvailRewardInfo)(nil),                // 15: proto.PKDAvailRewardInfo
	(*TypeAndIDParam)(nil),                    // 16: proto.TypeAndIDParam
	(*AccountAndTypeParam)(nil),               // 17: proto.AccountAndTypeParam
	(*VerifierHeartBlockRequest)(nil),         // 18: proto.VerifierHeartBlockRequest
	nil,                                       // 19: proto.PKDVerifierStateList.AllVerifiersEntry
	nil,                                       // 20: proto.PublishRet.VerifiersEntry
	(*types.PovPublishState)(nil),             // 21: types.PovPublishState
	(*types.StateBlock)(nil),                  // 22: types.StateBlock
	(*types.PovVerifierState)(nil),            // 23: types.PovVerifierState
	(*empty.Empty)(nil),                       // 24: google.protobuf.Empty
	(*String)(nil),                            // 25: proto.String
	(*types.Address)(nil),                     // 26: types.Address
	(*UInt64)(nil),                            // 27: proto.UInt64
	(*types.Hash)(nil),                        // 28: types.Hash
	(*Bytes)(nil),                             // 29: proto.Bytes
}
var file_publicKeyDistribution_proto_depIdxs = []int32{
	0,  // 0: proto.VerifierRegParams.params:type_name -> proto.VerifierRegParam
	19, // 1: proto.PKDVerifierStateList.allVerifiers:type_name -> proto.PKDVerifierStateList.AllVerifiersEntry
	21, // 2: proto.PublishInfoState.state:type_name -> types.PovPublishState
	6,  // 3: proto.PublishInfoStates.states:type_name -> proto.PublishInfoState
	22, // 4: proto.PublishRet.block:type_name -> types.StateBlock
	20, // 5: proto.PublishRet.verifiers:type_name -> proto.PublishRet.VerifiersEntry
	11, // 6: proto.OracleParams.params:type_name -> proto.OracleParam
	23, // 7: proto.PKDVerifierStateList.AllVerifiersEntry.value:type_name -> types.PovVerifierState
	9,  // 8: proto.PublishRet.VerifiersEntry.value:type_name -> proto.VerifierContent
	0,  // 9: proto.PublicKeyDistributionAPI.GetVerifierRegisterBlock:input_type -> proto.VerifierRegParam
	2,  // 10: proto.PublicKeyDistributionAPI.GetVerifierUnregisterBlock:input_type -> proto.VerifierUnRegParam
	24, // 11: proto.PublicKeyDistributionAPI.GetAllVerifiers:input_type -> google.protobuf.Empty
	25, // 12: proto.PublicKeyDistributionAPI.GetVerifiersByType:input_type -> proto.String
	25, // 13: proto.PublicKeyDistributionAPI.GetActiveVerifiers:input_type -> proto.String
	26, // 14: proto.PublicKeyDistributionAPI.GetVerifiersByAccount:input_type -> types.Address
	3,  // 15: proto.PublicKeyDistributionAPI.GetVerifierStateByBlockHeight:input_type -> proto.VerifierStateByBlockHeightRequest
	27, // 16: proto.PublicKeyDistributionAPI.GetAllVerifierStatesByBlockHeight:input_type -> proto.UInt64
	5,  // 17: proto.PublicKeyDistributionAPI.GetPublishBlock:input_type -> proto.PublishParam
	8,  // 18: proto.PublicKeyDistributionAPI.GetUnPublishBlock:input_type -> proto.UnPublishParam
	16, // 19: proto.PublicKeyDistributionAPI.GetPubKeyByTypeAndID:input_type -> proto.TypeAndIDParam
	16, // 20: proto.PublicKeyDistributionAPI.GetRecommendPubKey:input_type -> proto.TypeAndIDParam
	25, // 21: proto.PublicKeyDistributionAPI.GetPublishInfosByType:input_type -> proto.String
	17, // 22: proto.PublicKeyDistributionAPI.GetPublishInfosByAccountAndType:input_type -> proto.AccountAndTypeParam
	11, // 23: proto.PublicKeyDistributionAPI.GetOracleBlock:input_type -> proto.OracleParam
	25, // 24: proto.PublicKeyDistributionAPI.GetOracleInfosByType:input_type -> proto.String
	16, // 25: proto.PublicKeyDistributionAPI.GetOracleInfosByTypeAndID:input_type -> proto.TypeAndIDParam
	17, // 26: proto.PublicKeyDistributionAPI.GetOracleInfosByAccountAndType:input_type -> proto.AccountAndTypeParam
	28, // 27: proto.PublicKeyDistributionAPI.GetOracleInfosByHash:input_type -> types.Hash
	13, // 28: proto.PublicKeyDistributionAPI.PackRewardData:input_type -> proto.PKDRewardParam
	29, // 29: proto.PublicKeyDistributionAPI.UnpackRewardData:input_type -> proto.Bytes
	13, // 30: proto.PublicKeyDistributionAPI.GetRewardSendBlock:input_type -> proto.PKDRewardParam
	22, // 31: proto.PublicKeyDistributionAPI.GetRewardRecvBlock:input_type -> types.StateBlock
	28, // 32: proto.PublicKeyDistributionAPI.GetRewardRecvBlockBySendHash:input_type -> types.Hash
	26, // 33: proto.PublicKeyDistributionAPI.GetRewardHistory:input_type -> types.Address
	26, // 34: proto.PublicKeyDistributionAPI.GetAvailRewardInfo:input_type -> types.Address
	18, // 35: proto.PublicKeyDistributionAPI.GetVerifierHeartBlock:input_type -> proto.VerifierHeartBlockRequest
	22, // 36: proto.PublicKeyDistributionAPI.GetVerifierRegisterBlock:output_type -> types.StateBlock
	22, // 37: proto.PublicKeyDistributionAPI.GetVerifierUnregisterBlock:output_type -> types.StateBlock
	1,  // 38: proto.PublicKeyDistributionAPI.GetAllVerifiers:output_type -> proto.VerifierRegParams
	1,  // 39: proto.PublicKeyDistributionAPI.GetVerifiersByType:output_type -> proto.VerifierRegParams
	1,  // 40: proto.PublicKeyDistributionAPI.GetActiveVerifiers:output_type -> proto.VerifierRegParams
	1,  // 41: proto.PublicKeyDistributionAPI.GetVerifiersByAccount:output_type -> proto.VerifierRegParams
	23, // 42: proto.PublicKeyDistributionAPI.GetVerifierStateByBlockHeight:output_type -> types.PovVerifierState
	4,  // 43: proto.PublicKeyDistributionAPI.GetAllVerifierStatesByBlockHeight:output_type -> proto.PKDVerifierStateList
	10, // 44: proto.PublicKeyDistributionAPI.GetPublishBlock:output_type -> proto.PublishRet
	22, // 45: proto.PublicKeyDistributionAPI.GetUnPublishBlock:output_type -> types.StateBlock
	7,  // 46: proto.PublicKeyDistributionAPI.GetPubKeyByTypeAndID:output_type -> proto.PublishInfoStates
	6,  // 47: proto.PublicKeyDistributionAPI.GetRecommendPubKey:output_type -> proto.PublishInfoState
	7,  // 48: proto.PublicKeyDistributionAPI.GetPublishInfosByType:output_type -> proto.PublishInfoStates
	7,  // 49: proto.PublicKeyDistributionAPI.GetPublishInfosByAccountAndType:output_type -> proto.PublishInfoStates
	22, // 50: proto.PublicKeyDistributionAPI.GetOracleBlock:output_type -> types.StateBlock
	12, // 51: proto.PublicKeyDistributionAPI.GetOracleInfosByType:output_type -> proto.OracleParams
	12, // 52: proto.PublicKeyDistributionAPI.GetOracleInfosByTypeAndID:output_type -> proto.OracleParams
	12, // 53: proto.PublicKeyDistributionAPI.GetOracleInfosByAccountAndType:output_type -> proto.OracleParams
	12, // 54: proto.PublicKeyDistributionAPI.GetOracleInfosByHash:output_type -> proto.OracleParams
	29, // 55: proto.PublicKeyDistributionAPI.PackRewardData:output_type -> proto.Bytes
	13, // 56: proto.PublicKeyDistributionAPI.UnpackRewardData:output_type -> proto.PKDRewardParam
	22, // 57: proto.PublicKeyDistributionAPI.GetRewardSendBlock:output_type -> types.StateBlock
	22, // 58: proto.PublicKeyDistributionAPI.GetRewardRecvBlock:output_type -> types.StateBlock
	22, // 59: proto.PublicKeyDistributionAPI.GetRewardRecvBlockBySendHash:output_type -> types.StateBlock
	14, // 60: proto.PublicKeyDistributionAPI.GetRewardHistory:output_type -> proto.PKDHistoryRewardInfo
	15, // 61: proto.PublicKeyDistributionAPI.GetAvailRewardInfo:output_type -> proto.PKDAvailRewardInfo
	22, // 62: proto.PublicKeyDistributionAPI.GetVerifierHeartBlock:output_type -> types.StateBlock
	36, // [36:63] is the sub-list for method output_type
	9,  // [9:36] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_publicKeyDistribution_proto_init() }
func file_publicKeyDistribution_proto_init() {
	if File_publicKeyDistribution_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_publicKeyDistribution_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifierRegParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicKeyDistribution_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifierRegParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicKeyDistribution_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifierUnRegParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicKeyDistribution_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifierStateByBlockHeightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicKeyDistribution_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKDVerifierStateList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicKeyDistribution_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicKeyDistribution_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishInfoState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicKeyDistribution_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishInfoStates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicKeyDistribution_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnPublishParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicKeyDistribution_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifierContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicKeyDistribution_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishRet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicKeyDistribution_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicKeyDistribution_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicKeyDistribution_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKDRewardParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicKeyDistribution_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKDHistoryRewardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicKeyDistribution_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PKDAvailRewardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicKeyDistribution_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeAndIDParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicKeyDistribution_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountAndTypeParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publicKeyDistribution_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifierHeartBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_publicKeyDistribution_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_publicKeyDistribution_proto_goTypes,
		DependencyIndexes: file_publicKeyDistribution_proto_depIdxs,
		MessageInfos:      file_publicKeyDistribution_proto_msgTypes,
	}.Build()
	File_publicKeyDistribution_proto = out.File
	file_publicKeyDistribution_proto_rawDesc = nil
	file_publicKeyDistribution_proto_goTypes = nil
	file_publicKeyDistribution_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PublicKeyDistributionAPIClient is the client API for PublicKeyDistributionAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicKeyDistributionAPIClient interface {
	GetVerifierRegisterBlock(ctx context.Context, in *VerifierRegParam, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetVerifierUnregisterBlock(ctx context.Context, in *VerifierUnRegParam, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetAllVerifiers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VerifierRegParams, error)
	GetVerifiersByType(ctx context.Context, in *String, opts ...grpc.CallOption) (*VerifierRegParams, error)
	GetActiveVerifiers(ctx context.Context, in *String, opts ...grpc.CallOption) (*VerifierRegParams, error)
	GetVerifiersByAccount(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*VerifierRegParams, error)
	GetVerifierStateByBlockHeight(ctx context.Context, in *VerifierStateByBlockHeightRequest, opts ...grpc.CallOption) (*types.PovVerifierState, error)
	GetAllVerifierStatesByBlockHeight(ctx context.Context, in *UInt64, opts ...grpc.CallOption) (*PKDVerifierStateList, error)
	GetPublishBlock(ctx context.Context, in *PublishParam, opts ...grpc.CallOption) (*PublishRet, error)
	GetUnPublishBlock(ctx context.Context, in *UnPublishParam, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetPubKeyByTypeAndID(ctx context.Context, in *TypeAndIDParam, opts ...grpc.CallOption) (*PublishInfoStates, error)
	GetRecommendPubKey(ctx context.Context, in *TypeAndIDParam, opts ...grpc.CallOption) (*PublishInfoState, error)
	GetPublishInfosByType(ctx context.Context, in *String, opts ...grpc.CallOption) (*PublishInfoStates, error)
	GetPublishInfosByAccountAndType(ctx context.Context, in *AccountAndTypeParam, opts ...grpc.CallOption) (*PublishInfoStates, error)
	GetOracleBlock(ctx context.Context, in *OracleParam, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetOracleInfosByType(ctx context.Context, in *String, opts ...grpc.CallOption) (*OracleParams, error)
	GetOracleInfosByTypeAndID(ctx context.Context, in *TypeAndIDParam, opts ...grpc.CallOption) (*OracleParams, error)
	GetOracleInfosByAccountAndType(ctx context.Context, in *AccountAndTypeParam, opts ...grpc.CallOption) (*OracleParams, error)
	GetOracleInfosByHash(ctx context.Context, in *types.Hash, opts ...grpc.CallOption) (*OracleParams, error)
	PackRewardData(ctx context.Context, in *PKDRewardParam, opts ...grpc.CallOption) (*Bytes, error)
	UnpackRewardData(ctx context.Context, in *Bytes, opts ...grpc.CallOption) (*PKDRewardParam, error)
	GetRewardSendBlock(ctx context.Context, in *PKDRewardParam, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetRewardRecvBlock(ctx context.Context, in *types.StateBlock, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetRewardRecvBlockBySendHash(ctx context.Context, in *types.Hash, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetRewardHistory(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*PKDHistoryRewardInfo, error)
	GetAvailRewardInfo(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*PKDAvailRewardInfo, error)
	GetVerifierHeartBlock(ctx context.Context, in *VerifierHeartBlockRequest, opts ...grpc.CallOption) (*types.StateBlock, error)
}

type publicKeyDistributionAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicKeyDistributionAPIClient(cc grpc.ClientConnInterface) PublicKeyDistributionAPIClient {
	return &publicKeyDistributionAPIClient{cc}
}

func (c *publicKeyDistributionAPIClient) GetVerifierRegisterBlock(ctx context.Context, in *VerifierRegParam, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.PublicKeyDistributionAPI/GetVerifierRegisterBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicKeyDistributionAPIClient) GetVerifierUnregisterBlock(ctx context.Context, in *VerifierUnRegParam, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.PublicKeyDistributionAPI/GetVerifierUnregisterBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicKeyDistributionAPIClient) GetAllVerifiers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VerifierRegParams, error) {
	out := new(VerifierRegParams)
	err := c.cc.Invoke(ctx, "/proto.PublicKeyDistributionAPI/GetAllVerifiers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicKeyDistributionAPIClient) GetVerifiersByType(ctx context.Context, in *String, opts ...grpc.CallOption) (*VerifierRegParams, error) {
	out := new(VerifierRegParams)
	err := c.cc.Invoke(ctx, "/proto.PublicKeyDistributionAPI/GetVerifiersByType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicKeyDistributionAPIClient) GetActiveVerifiers(ctx context.Context, in *String, opts ...grpc.CallOption) (*VerifierRegParams, error) {
	out := new(VerifierRegParams)
	err := c.cc.Invoke(ctx, "/proto.PublicKeyDistributionAPI/GetActiveVerifiers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicKeyDistributionAPIClient) GetVerifiersByAccount(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*VerifierRegParams, error) {
	out := new(VerifierRegParams)
	err := c.cc.Invoke(ctx, "/proto.PublicKeyDistributionAPI/GetVerifiersByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicKeyDistributionAPIClient) GetVerifierStateByBlockHeight(ctx context.Context, in *VerifierStateByBlockHeightRequest, opts ...grpc.CallOption) (*types.PovVerifierState, error) {
	out := new(types.PovVerifierState)
	err := c.cc.Invoke(ctx, "/proto.PublicKeyDistributionAPI/GetVerifierStateByBlockHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicKeyDistributionAPIClient) GetAllVerifierStatesByBlockHeight(ctx context.Context, in *UInt64, opts ...grpc.CallOption) (*PKDVerifierStateList, error) {
	out := new(PKDVerifierStateList)
	err := c.cc.Invoke(ctx, "/proto.PublicKeyDistributionAPI/GetAllVerifierStatesByBlockHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicKeyDistributionAPIClient) GetPublishBlock(ctx context.Context, in *PublishParam, opts ...grpc.CallOption) (*PublishRet, error) {
	out := new(PublishRet)
	err := c.cc.Invoke(ctx, "/proto.PublicKeyDistributionAPI/GetPublishBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicKeyDistributionAPIClient) GetUnPublishBlock(ctx context.Context, in *UnPublishParam, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.PublicKeyDistributionAPI/GetUnPublishBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicKeyDistributionAPIClient) GetPubKeyByTypeAndID(ctx context.Context, in *TypeAndIDParam, opts ...grpc.CallOption) (*PublishInfoStates, error) {
	out := new(PublishInfoStates)
	err := c.cc.Invoke(ctx, "/proto.PublicKeyDistributionAPI/GetPubKeyByTypeAndID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicKeyDistributionAPIClient) GetRecommendPubKey(ctx context.Context, in *TypeAndIDParam, opts ...grpc.CallOption) (*PublishInfoState, error) {
	out := new(PublishInfoState)
	err := c.cc.Invoke(ctx, "/proto.PublicKeyDistributionAPI/GetRecommendPubKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicKeyDistributionAPIClient) GetPublishInfosByType(ctx context.Context, in *String, opts ...grpc.CallOption) (*PublishInfoStates, error) {
	out := new(PublishInfoStates)
	err := c.cc.Invoke(ctx, "/proto.PublicKeyDistributionAPI/GetPublishInfosByType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicKeyDistributionAPIClient) GetPublishInfosByAccountAndType(ctx context.Context, in *AccountAndTypeParam, opts ...grpc.CallOption) (*PublishInfoStates, error) {
	out := new(PublishInfoStates)
	err := c.cc.Invoke(ctx, "/proto.PublicKeyDistributionAPI/GetPublishInfosByAccountAndType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicKeyDistributionAPIClient) GetOracleBlock(ctx context.Context, in *OracleParam, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.PublicKeyDistributionAPI/GetOracleBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicKeyDistributionAPIClient) GetOracleInfosByType(ctx context.Context, in *String, opts ...grpc.CallOption) (*OracleParams, error) {
	out := new(OracleParams)
	err := c.cc.Invoke(ctx, "/proto.PublicKeyDistributionAPI/GetOracleInfosByType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicKeyDistributionAPIClient) GetOracleInfosByTypeAndID(ctx context.Context, in *TypeAndIDParam, opts ...grpc.CallOption) (*OracleParams, error) {
	out := new(OracleParams)
	err := c.cc.Invoke(ctx, "/proto.PublicKeyDistributionAPI/GetOracleInfosByTypeAndID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicKeyDistributionAPIClient) GetOracleInfosByAccountAndType(ctx context.Context, in *AccountAndTypeParam, opts ...grpc.CallOption) (*OracleParams, error) {
	out := new(OracleParams)
	err := c.cc.Invoke(ctx, "/proto.PublicKeyDistributionAPI/GetOracleInfosByAccountAndType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicKeyDistributionAPIClient) GetOracleInfosByHash(ctx context.Context, in *types.Hash, opts ...grpc.CallOption) (*OracleParams, error) {
	out := new(OracleParams)
	err := c.cc.Invoke(ctx, "/proto.PublicKeyDistributionAPI/GetOracleInfosByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicKeyDistributionAPIClient) PackRewardData(ctx context.Context, in *PKDRewardParam, opts ...grpc.CallOption) (*Bytes, error) {
	out := new(Bytes)
	err := c.cc.Invoke(ctx, "/proto.PublicKeyDistributionAPI/PackRewardData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicKeyDistributionAPIClient) UnpackRewardData(ctx context.Context, in *Bytes, opts ...grpc.CallOption) (*PKDRewardParam, error) {
	out := new(PKDRewardParam)
	err := c.cc.Invoke(ctx, "/proto.PublicKeyDistributionAPI/UnpackRewardData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicKeyDistributionAPIClient) GetRewardSendBlock(ctx context.Context, in *PKDRewardParam, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.PublicKeyDistributionAPI/GetRewardSendBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicKeyDistributionAPIClient) GetRewardRecvBlock(ctx context.Context, in *types.StateBlock, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.PublicKeyDistributionAPI/GetRewardRecvBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicKeyDistributionAPIClient) GetRewardRecvBlockBySendHash(ctx context.Context, in *types.Hash, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.PublicKeyDistributionAPI/GetRewardRecvBlockBySendHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicKeyDistributionAPIClient) GetRewardHistory(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*PKDHistoryRewardInfo, error) {
	out := new(PKDHistoryRewardInfo)
	err := c.cc.Invoke(ctx, "/proto.PublicKeyDistributionAPI/GetRewardHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicKeyDistributionAPIClient) GetAvailRewardInfo(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*PKDAvailRewardInfo, error) {
	out := new(PKDAvailRewardInfo)
	err := c.cc.Invoke(ctx, "/proto.PublicKeyDistributionAPI/GetAvailRewardInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicKeyDistributionAPIClient) GetVerifierHeartBlock(ctx context.Context, in *VerifierHeartBlockRequest, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.PublicKeyDistributionAPI/GetVerifierHeartBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicKeyDistributionAPIServer is the server API for PublicKeyDistributionAPI service.
type PublicKeyDistributionAPIServer interface {
	GetVerifierRegisterBlock(context.Context, *VerifierRegParam) (*types.StateBlock, error)
	GetVerifierUnregisterBlock(context.Context, *VerifierUnRegParam) (*types.StateBlock, error)
	GetAllVerifiers(context.Context, *empty.Empty) (*VerifierRegParams, error)
	GetVerifiersByType(context.Context, *String) (*VerifierRegParams, error)
	GetActiveVerifiers(context.Context, *String) (*VerifierRegParams, error)
	GetVerifiersByAccount(context.Context, *types.Address) (*VerifierRegParams, error)
	GetVerifierStateByBlockHeight(context.Context, *VerifierStateByBlockHeightRequest) (*types.PovVerifierState, error)
	GetAllVerifierStatesByBlockHeight(context.Context, *UInt64) (*PKDVerifierStateList, error)
	GetPublishBlock(context.Context, *PublishParam) (*PublishRet, error)
	GetUnPublishBlock(context.Context, *UnPublishParam) (*types.StateBlock, error)
	GetPubKeyByTypeAndID(context.Context, *TypeAndIDParam) (*PublishInfoStates, error)
	GetRecommendPubKey(context.Context, *TypeAndIDParam) (*PublishInfoState, error)
	GetPublishInfosByType(context.Context, *String) (*PublishInfoStates, error)
	GetPublishInfosByAccountAndType(context.Context, *AccountAndTypeParam) (*PublishInfoStates, error)
	GetOracleBlock(context.Context, *OracleParam) (*types.StateBlock, error)
	GetOracleInfosByType(context.Context, *String) (*OracleParams, error)
	GetOracleInfosByTypeAndID(context.Context, *TypeAndIDParam) (*OracleParams, error)
	GetOracleInfosByAccountAndType(context.Context, *AccountAndTypeParam) (*OracleParams, error)
	GetOracleInfosByHash(context.Context, *types.Hash) (*OracleParams, error)
	PackRewardData(context.Context, *PKDRewardParam) (*Bytes, error)
	UnpackRewardData(context.Context, *Bytes) (*PKDRewardParam, error)
	GetRewardSendBlock(context.Context, *PKDRewardParam) (*types.StateBlock, error)
	GetRewardRecvBlock(context.Context, *types.StateBlock) (*types.StateBlock, error)
	GetRewardRecvBlockBySendHash(context.Context, *types.Hash) (*types.StateBlock, error)
	GetRewardHistory(context.Context, *types.Address) (*PKDHistoryRewardInfo, error)
	GetAvailRewardInfo(context.Context, *types.Address) (*PKDAvailRewardInfo, error)
	GetVerifierHeartBlock(context.Context, *VerifierHeartBlockRequest) (*types.StateBlock, error)
}

// UnimplementedPublicKeyDistributionAPIServer can be embedded to have forward compatible implementations.
type UnimplementedPublicKeyDistributionAPIServer struct {
}

func (*UnimplementedPublicKeyDistributionAPIServer) GetVerifierRegisterBlock(context.Context, *VerifierRegParam) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVerifierRegisterBlock not implemented")
}
func (*UnimplementedPublicKeyDistributionAPIServer) GetVerifierUnregisterBlock(context.Context, *VerifierUnRegParam) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVerifierUnregisterBlock not implemented")
}
func (*UnimplementedPublicKeyDistributionAPIServer) GetAllVerifiers(context.Context, *empty.Empty) (*VerifierRegParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllVerifiers not implemented")
}
func (*UnimplementedPublicKeyDistributionAPIServer) GetVerifiersByType(context.Context, *String) (*VerifierRegParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVerifiersByType not implemented")
}
func (*UnimplementedPublicKeyDistributionAPIServer) GetActiveVerifiers(context.Context, *String) (*VerifierRegParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveVerifiers not implemented")
}
func (*UnimplementedPublicKeyDistributionAPIServer) GetVerifiersByAccount(context.Context, *types.Address) (*VerifierRegParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVerifiersByAccount not implemented")
}
func (*UnimplementedPublicKeyDistributionAPIServer) GetVerifierStateByBlockHeight(context.Context, *VerifierStateByBlockHeightRequest) (*types.PovVerifierState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVerifierStateByBlockHeight not implemented")
}
func (*UnimplementedPublicKeyDistributionAPIServer) GetAllVerifierStatesByBlockHeight(context.Context, *UInt64) (*PKDVerifierStateList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllVerifierStatesByBlockHeight not implemented")
}
func (*UnimplementedPublicKeyDistributionAPIServer) GetPublishBlock(context.Context, *PublishParam) (*PublishRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishBlock not implemented")
}
func (*UnimplementedPublicKeyDistributionAPIServer) GetUnPublishBlock(context.Context, *UnPublishParam) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnPublishBlock not implemented")
}
func (*UnimplementedPublicKeyDistributionAPIServer) GetPubKeyByTypeAndID(context.Context, *TypeAndIDParam) (*PublishInfoStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPubKeyByTypeAndID not implemented")
}
func (*UnimplementedPublicKeyDistributionAPIServer) GetRecommendPubKey(context.Context, *TypeAndIDParam) (*PublishInfoState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendPubKey not implemented")
}
func (*UnimplementedPublicKeyDistributionAPIServer) GetPublishInfosByType(context.Context, *String) (*PublishInfoStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishInfosByType not implemented")
}
func (*UnimplementedPublicKeyDistributionAPIServer) GetPublishInfosByAccountAndType(context.Context, *AccountAndTypeParam) (*PublishInfoStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublishInfosByAccountAndType not implemented")
}
func (*UnimplementedPublicKeyDistributionAPIServer) GetOracleBlock(context.Context, *OracleParam) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOracleBlock not implemented")
}
func (*UnimplementedPublicKeyDistributionAPIServer) GetOracleInfosByType(context.Context, *String) (*OracleParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOracleInfosByType not implemented")
}
func (*UnimplementedPublicKeyDistributionAPIServer) GetOracleInfosByTypeAndID(context.Context, *TypeAndIDParam) (*OracleParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOracleInfosByTypeAndID not implemented")
}
func (*UnimplementedPublicKeyDistributionAPIServer) GetOracleInfosByAccountAndType(context.Context, *AccountAndTypeParam) (*OracleParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOracleInfosByAccountAndType not implemented")
}
func (*UnimplementedPublicKeyDistributionAPIServer) GetOracleInfosByHash(context.Context, *types.Hash) (*OracleParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOracleInfosByHash not implemented")
}
func (*UnimplementedPublicKeyDistributionAPIServer) PackRewardData(context.Context, *PKDRewardParam) (*Bytes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PackRewardData not implemented")
}
func (*UnimplementedPublicKeyDistributionAPIServer) UnpackRewardData(context.Context, *Bytes) (*PKDRewardParam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpackRewardData not implemented")
}
func (*UnimplementedPublicKeyDistributionAPIServer) GetRewardSendBlock(context.Context, *PKDRewardParam) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardSendBlock not implemented")
}
func (*UnimplementedPublicKeyDistributionAPIServer) GetRewardRecvBlock(context.Context, *types.StateBlock) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardRecvBlock not implemented")
}
func (*UnimplementedPublicKeyDistributionAPIServer) GetRewardRecvBlockBySendHash(context.Context, *types.Hash) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardRecvBlockBySendHash not implemented")
}
func (*UnimplementedPublicKeyDistributionAPIServer) GetRewardHistory(context.Context, *types.Address) (*PKDHistoryRewardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardHistory not implemented")
}
func (*UnimplementedPublicKeyDistributionAPIServer) GetAvailRewardInfo(context.Context, *types.Address) (*PKDAvailRewardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailRewardInfo not implemented")
}
func (*UnimplementedPublicKeyDistributionAPIServer) GetVerifierHeartBlock(context.Context, *VerifierHeartBlockRequest) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVerifierHeartBlock not implemented")
}

func RegisterPublicKeyDistributionAPIServer(s *grpc.Server, srv PublicKeyDistributionAPIServer) {
	s.RegisterService(&_PublicKeyDistributionAPI_serviceDesc, srv)
}

func _PublicKeyDistributionAPI_GetVerifierRegisterBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifierRegParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicKeyDistributionAPIServer).GetVerifierRegisterBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublicKeyDistributionAPI/GetVerifierRegisterBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicKeyDistributionAPIServer).GetVerifierRegisterBlock(ctx, req.(*VerifierRegParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicKeyDistributionAPI_GetVerifierUnregisterBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifierUnRegParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicKeyDistributionAPIServer).GetVerifierUnregisterBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublicKeyDistributionAPI/GetVerifierUnregisterBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicKeyDistributionAPIServer).GetVerifierUnregisterBlock(ctx, req.(*VerifierUnRegParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicKeyDistributionAPI_GetAllVerifiers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicKeyDistributionAPIServer).GetAllVerifiers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublicKeyDistributionAPI/GetAllVerifiers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicKeyDistributionAPIServer).GetAllVerifiers(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicKeyDistributionAPI_GetVerifiersByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicKeyDistributionAPIServer).GetVerifiersByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublicKeyDistributionAPI/GetVerifiersByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicKeyDistributionAPIServer).GetVerifiersByType(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicKeyDistributionAPI_GetActiveVerifiers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicKeyDistributionAPIServer).GetActiveVerifiers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublicKeyDistributionAPI/GetActiveVerifiers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicKeyDistributionAPIServer).GetActiveVerifiers(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicKeyDistributionAPI_GetVerifiersByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicKeyDistributionAPIServer).GetVerifiersByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublicKeyDistributionAPI/GetVerifiersByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicKeyDistributionAPIServer).GetVerifiersByAccount(ctx, req.(*types.Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicKeyDistributionAPI_GetVerifierStateByBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifierStateByBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicKeyDistributionAPIServer).GetVerifierStateByBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublicKeyDistributionAPI/GetVerifierStateByBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicKeyDistributionAPIServer).GetVerifierStateByBlockHeight(ctx, req.(*VerifierStateByBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicKeyDistributionAPI_GetAllVerifierStatesByBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UInt64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicKeyDistributionAPIServer).GetAllVerifierStatesByBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublicKeyDistributionAPI/GetAllVerifierStatesByBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicKeyDistributionAPIServer).GetAllVerifierStatesByBlockHeight(ctx, req.(*UInt64))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicKeyDistributionAPI_GetPublishBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicKeyDistributionAPIServer).GetPublishBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublicKeyDistributionAPI/GetPublishBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicKeyDistributionAPIServer).GetPublishBlock(ctx, req.(*PublishParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicKeyDistributionAPI_GetUnPublishBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnPublishParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicKeyDistributionAPIServer).GetUnPublishBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublicKeyDistributionAPI/GetUnPublishBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicKeyDistributionAPIServer).GetUnPublishBlock(ctx, req.(*UnPublishParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicKeyDistributionAPI_GetPubKeyByTypeAndID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypeAndIDParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicKeyDistributionAPIServer).GetPubKeyByTypeAndID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublicKeyDistributionAPI/GetPubKeyByTypeAndID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicKeyDistributionAPIServer).GetPubKeyByTypeAndID(ctx, req.(*TypeAndIDParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicKeyDistributionAPI_GetRecommendPubKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypeAndIDParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicKeyDistributionAPIServer).GetRecommendPubKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublicKeyDistributionAPI/GetRecommendPubKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicKeyDistributionAPIServer).GetRecommendPubKey(ctx, req.(*TypeAndIDParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicKeyDistributionAPI_GetPublishInfosByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicKeyDistributionAPIServer).GetPublishInfosByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublicKeyDistributionAPI/GetPublishInfosByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicKeyDistributionAPIServer).GetPublishInfosByType(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicKeyDistributionAPI_GetPublishInfosByAccountAndType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountAndTypeParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicKeyDistributionAPIServer).GetPublishInfosByAccountAndType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublicKeyDistributionAPI/GetPublishInfosByAccountAndType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicKeyDistributionAPIServer).GetPublishInfosByAccountAndType(ctx, req.(*AccountAndTypeParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicKeyDistributionAPI_GetOracleBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OracleParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicKeyDistributionAPIServer).GetOracleBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublicKeyDistributionAPI/GetOracleBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicKeyDistributionAPIServer).GetOracleBlock(ctx, req.(*OracleParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicKeyDistributionAPI_GetOracleInfosByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicKeyDistributionAPIServer).GetOracleInfosByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublicKeyDistributionAPI/GetOracleInfosByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicKeyDistributionAPIServer).GetOracleInfosByType(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicKeyDistributionAPI_GetOracleInfosByTypeAndID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypeAndIDParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicKeyDistributionAPIServer).GetOracleInfosByTypeAndID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublicKeyDistributionAPI/GetOracleInfosByTypeAndID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicKeyDistributionAPIServer).GetOracleInfosByTypeAndID(ctx, req.(*TypeAndIDParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicKeyDistributionAPI_GetOracleInfosByAccountAndType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountAndTypeParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicKeyDistributionAPIServer).GetOracleInfosByAccountAndType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublicKeyDistributionAPI/GetOracleInfosByAccountAndType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicKeyDistributionAPIServer).GetOracleInfosByAccountAndType(ctx, req.(*AccountAndTypeParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicKeyDistributionAPI_GetOracleInfosByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicKeyDistributionAPIServer).GetOracleInfosByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublicKeyDistributionAPI/GetOracleInfosByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicKeyDistributionAPIServer).GetOracleInfosByHash(ctx, req.(*types.Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicKeyDistributionAPI_PackRewardData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PKDRewardParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicKeyDistributionAPIServer).PackRewardData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublicKeyDistributionAPI/PackRewardData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicKeyDistributionAPIServer).PackRewardData(ctx, req.(*PKDRewardParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicKeyDistributionAPI_UnpackRewardData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bytes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicKeyDistributionAPIServer).UnpackRewardData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublicKeyDistributionAPI/UnpackRewardData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicKeyDistributionAPIServer).UnpackRewardData(ctx, req.(*Bytes))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicKeyDistributionAPI_GetRewardSendBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PKDRewardParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicKeyDistributionAPIServer).GetRewardSendBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublicKeyDistributionAPI/GetRewardSendBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicKeyDistributionAPIServer).GetRewardSendBlock(ctx, req.(*PKDRewardParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicKeyDistributionAPI_GetRewardRecvBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.StateBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicKeyDistributionAPIServer).GetRewardRecvBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublicKeyDistributionAPI/GetRewardRecvBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicKeyDistributionAPIServer).GetRewardRecvBlock(ctx, req.(*types.StateBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicKeyDistributionAPI_GetRewardRecvBlockBySendHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicKeyDistributionAPIServer).GetRewardRecvBlockBySendHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublicKeyDistributionAPI/GetRewardRecvBlockBySendHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicKeyDistributionAPIServer).GetRewardRecvBlockBySendHash(ctx, req.(*types.Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicKeyDistributionAPI_GetRewardHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicKeyDistributionAPIServer).GetRewardHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublicKeyDistributionAPI/GetRewardHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicKeyDistributionAPIServer).GetRewardHistory(ctx, req.(*types.Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicKeyDistributionAPI_GetAvailRewardInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicKeyDistributionAPIServer).GetAvailRewardInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublicKeyDistributionAPI/GetAvailRewardInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicKeyDistributionAPIServer).GetAvailRewardInfo(ctx, req.(*types.Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicKeyDistributionAPI_GetVerifierHeartBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifierHeartBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicKeyDistributionAPIServer).GetVerifierHeartBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PublicKeyDistributionAPI/GetVerifierHeartBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicKeyDistributionAPIServer).GetVerifierHeartBlock(ctx, req.(*VerifierHeartBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicKeyDistributionAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PublicKeyDistributionAPI",
	HandlerType: (*PublicKeyDistributionAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVerifierRegisterBlock",
			Handler:    _PublicKeyDistributionAPI_GetVerifierRegisterBlock_Handler,
		},
		{
			MethodName: "GetVerifierUnregisterBlock",
			Handler:    _PublicKeyDistributionAPI_GetVerifierUnregisterBlock_Handler,
		},
		{
			MethodName: "GetAllVerifiers",
			Handler:    _PublicKeyDistributionAPI_GetAllVerifiers_Handler,
		},
		{
			MethodName: "GetVerifiersByType",
			Handler:    _PublicKeyDistributionAPI_GetVerifiersByType_Handler,
		},
		{
			MethodName: "GetActiveVerifiers",
			Handler:    _PublicKeyDistributionAPI_GetActiveVerifiers_Handler,
		},
		{
			MethodName: "GetVerifiersByAccount",
			Handler:    _PublicKeyDistributionAPI_GetVerifiersByAccount_Handler,
		},
		{
			MethodName: "GetVerifierStateByBlockHeight",
			Handler:    _PublicKeyDistributionAPI_GetVerifierStateByBlockHeight_Handler,
		},
		{
			MethodName: "GetAllVerifierStatesByBlockHeight",
			Handler:    _PublicKeyDistributionAPI_GetAllVerifierStatesByBlockHeight_Handler,
		},
		{
			MethodName: "GetPublishBlock",
			Handler:    _PublicKeyDistributionAPI_GetPublishBlock_Handler,
		},
		{
			MethodName: "GetUnPublishBlock",
			Handler:    _PublicKeyDistributionAPI_GetUnPublishBlock_Handler,
		},
		{
			MethodName: "GetPubKeyByTypeAndID",
			Handler:    _PublicKeyDistributionAPI_GetPubKeyByTypeAndID_Handler,
		},
		{
			MethodName: "GetRecommendPubKey",
			Handler:    _PublicKeyDistributionAPI_GetRecommendPubKey_Handler,
		},
		{
			MethodName: "GetPublishInfosByType",
			Handler:    _PublicKeyDistributionAPI_GetPublishInfosByType_Handler,
		},
		{
			MethodName: "GetPublishInfosByAccountAndType",
			Handler:    _PublicKeyDistributionAPI_GetPublishInfosByAccountAndType_Handler,
		},
		{
			MethodName: "GetOracleBlock",
			Handler:    _PublicKeyDistributionAPI_GetOracleBlock_Handler,
		},
		{
			MethodName: "GetOracleInfosByType",
			Handler:    _PublicKeyDistributionAPI_GetOracleInfosByType_Handler,
		},
		{
			MethodName: "GetOracleInfosByTypeAndID",
			Handler:    _PublicKeyDistributionAPI_GetOracleInfosByTypeAndID_Handler,
		},
		{
			MethodName: "GetOracleInfosByAccountAndType",
			Handler:    _PublicKeyDistributionAPI_GetOracleInfosByAccountAndType_Handler,
		},
		{
			MethodName: "GetOracleInfosByHash",
			Handler:    _PublicKeyDistributionAPI_GetOracleInfosByHash_Handler,
		},
		{
			MethodName: "PackRewardData",
			Handler:    _PublicKeyDistributionAPI_PackRewardData_Handler,
		},
		{
			MethodName: "UnpackRewardData",
			Handler:    _PublicKeyDistributionAPI_UnpackRewardData_Handler,
		},
		{
			MethodName: "GetRewardSendBlock",
			Handler:    _PublicKeyDistributionAPI_GetRewardSendBlock_Handler,
		},
		{
			MethodName: "GetRewardRecvBlock",
			Handler:    _PublicKeyDistributionAPI_GetRewardRecvBlock_Handler,
		},
		{
			MethodName: "GetRewardRecvBlockBySendHash",
			Handler:    _PublicKeyDistributionAPI_GetRewardRecvBlockBySendHash_Handler,
		},
		{
			MethodName: "GetRewardHistory",
			Handler:    _PublicKeyDistributionAPI_GetRewardHistory_Handler,
		},
		{
			MethodName: "GetAvailRewardInfo",
			Handler:    _PublicKeyDistributionAPI_GetAvailRewardInfo_Handler,
		},
		{
			MethodName: "GetVerifierHeartBlock",
			Handler:    _PublicKeyDistributionAPI_GetVerifierHeartBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "publicKeyDistribution.proto",
}
