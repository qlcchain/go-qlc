// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.7.1
// source: metrics.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type InfoStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats []*InfoStat `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
}

func (x *InfoStats) Reset() {
	*x = InfoStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoStats) ProtoMessage() {}

func (x *InfoStats) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoStats.ProtoReflect.Descriptor instead.
func (*InfoStats) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{0}
}

func (x *InfoStats) GetStats() []*InfoStat {
	if x != nil {
		return x.Stats
	}
	return nil
}

type InfoStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu        int32    `protobuf:"varint,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	VendorID   string   `protobuf:"bytes,2,opt,name=VendorID,proto3" json:"VendorID,omitempty"`
	Family     string   `protobuf:"bytes,3,opt,name=family,proto3" json:"family,omitempty"`
	Model      string   `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	Stepping   int32    `protobuf:"varint,5,opt,name=stepping,proto3" json:"stepping,omitempty"`
	PhysicalId string   `protobuf:"bytes,6,opt,name=physicalId,proto3" json:"physicalId,omitempty"`
	CoreId     string   `protobuf:"bytes,7,opt,name=coreId,proto3" json:"coreId,omitempty"`
	Cores      int32    `protobuf:"varint,8,opt,name=cores,proto3" json:"cores,omitempty"`
	ModelName  string   `protobuf:"bytes,9,opt,name=modelName,proto3" json:"modelName,omitempty"`
	Mhz        float64  `protobuf:"fixed64,10,opt,name=mhz,proto3" json:"mhz,omitempty"`
	CacheSize  int32    `protobuf:"varint,11,opt,name=cacheSize,proto3" json:"cacheSize,omitempty"`
	Flags      []string `protobuf:"bytes,12,rep,name=flags,proto3" json:"flags,omitempty"`
	Microcode  string   `protobuf:"bytes,13,opt,name=microcode,proto3" json:"microcode,omitempty"`
}

func (x *InfoStat) Reset() {
	*x = InfoStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoStat) ProtoMessage() {}

func (x *InfoStat) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoStat.ProtoReflect.Descriptor instead.
func (*InfoStat) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{1}
}

func (x *InfoStat) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *InfoStat) GetVendorID() string {
	if x != nil {
		return x.VendorID
	}
	return ""
}

func (x *InfoStat) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *InfoStat) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *InfoStat) GetStepping() int32 {
	if x != nil {
		return x.Stepping
	}
	return 0
}

func (x *InfoStat) GetPhysicalId() string {
	if x != nil {
		return x.PhysicalId
	}
	return ""
}

func (x *InfoStat) GetCoreId() string {
	if x != nil {
		return x.CoreId
	}
	return ""
}

func (x *InfoStat) GetCores() int32 {
	if x != nil {
		return x.Cores
	}
	return 0
}

func (x *InfoStat) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *InfoStat) GetMhz() float64 {
	if x != nil {
		return x.Mhz
	}
	return 0
}

func (x *InfoStat) GetCacheSize() int32 {
	if x != nil {
		return x.CacheSize
	}
	return 0
}

func (x *InfoStat) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *InfoStat) GetMicrocode() string {
	if x != nil {
		return x.Microcode
	}
	return ""
}

type TimesStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats []*TimesStat `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
}

func (x *TimesStats) Reset() {
	*x = TimesStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimesStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimesStats) ProtoMessage() {}

func (x *TimesStats) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimesStats.ProtoReflect.Descriptor instead.
func (*TimesStats) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{2}
}

func (x *TimesStats) GetStats() []*TimesStat {
	if x != nil {
		return x.Stats
	}
	return nil
}

type TimesStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu       string  `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	User      float64 `protobuf:"fixed64,2,opt,name=User,proto3" json:"User,omitempty"`
	System    float64 `protobuf:"fixed64,3,opt,name=System,proto3" json:"System,omitempty"`
	Idle      float64 `protobuf:"fixed64,4,opt,name=Idle,proto3" json:"Idle,omitempty"`
	Nice      float64 `protobuf:"fixed64,5,opt,name=Nice,proto3" json:"Nice,omitempty"`
	Iowait    float64 `protobuf:"fixed64,6,opt,name=Iowait,proto3" json:"Iowait,omitempty"`
	Irq       float64 `protobuf:"fixed64,7,opt,name=Irq,proto3" json:"Irq,omitempty"`
	Softirq   float64 `protobuf:"fixed64,8,opt,name=Softirq,proto3" json:"Softirq,omitempty"`
	Steal     float64 `protobuf:"fixed64,9,opt,name=Steal,proto3" json:"Steal,omitempty"`
	Guest     float64 `protobuf:"fixed64,10,opt,name=Guest,proto3" json:"Guest,omitempty"`
	GuestNice float64 `protobuf:"fixed64,11,opt,name=GuestNice,proto3" json:"GuestNice,omitempty"`
}

func (x *TimesStat) Reset() {
	*x = TimesStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimesStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimesStat) ProtoMessage() {}

func (x *TimesStat) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimesStat.ProtoReflect.Descriptor instead.
func (*TimesStat) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{3}
}

func (x *TimesStat) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *TimesStat) GetUser() float64 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *TimesStat) GetSystem() float64 {
	if x != nil {
		return x.System
	}
	return 0
}

func (x *TimesStat) GetIdle() float64 {
	if x != nil {
		return x.Idle
	}
	return 0
}

func (x *TimesStat) GetNice() float64 {
	if x != nil {
		return x.Nice
	}
	return 0
}

func (x *TimesStat) GetIowait() float64 {
	if x != nil {
		return x.Iowait
	}
	return 0
}

func (x *TimesStat) GetIrq() float64 {
	if x != nil {
		return x.Irq
	}
	return 0
}

func (x *TimesStat) GetSoftirq() float64 {
	if x != nil {
		return x.Softirq
	}
	return 0
}

func (x *TimesStat) GetSteal() float64 {
	if x != nil {
		return x.Steal
	}
	return 0
}

func (x *TimesStat) GetGuest() float64 {
	if x != nil {
		return x.Guest
	}
	return 0
}

func (x *TimesStat) GetGuestNice() float64 {
	if x != nil {
		return x.GuestNice
	}
	return 0
}

type UsageStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path              string  `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Fstype            string  `protobuf:"bytes,2,opt,name=fstype,proto3" json:"fstype,omitempty"`
	Total             uint64  `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Free              uint64  `protobuf:"varint,4,opt,name=free,proto3" json:"free,omitempty"`
	Used              uint64  `protobuf:"varint,5,opt,name=used,proto3" json:"used,omitempty"`
	UsedPercent       float64 `protobuf:"fixed64,6,opt,name=usedPercent,proto3" json:"usedPercent,omitempty"`
	InodesTotal       uint64  `protobuf:"varint,7,opt,name=inodesTotal,proto3" json:"inodesTotal,omitempty"`
	InodesUsed        uint64  `protobuf:"varint,8,opt,name=inodesUsed,proto3" json:"inodesUsed,omitempty"`
	InodesFree        uint64  `protobuf:"varint,9,opt,name=inodesFree,proto3" json:"inodesFree,omitempty"`
	InodesUsedPercent float64 `protobuf:"fixed64,10,opt,name=inodesUsedPercent,proto3" json:"inodesUsedPercent,omitempty"`
}

func (x *UsageStat) Reset() {
	*x = UsageStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageStat) ProtoMessage() {}

func (x *UsageStat) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageStat.ProtoReflect.Descriptor instead.
func (*UsageStat) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{4}
}

func (x *UsageStat) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *UsageStat) GetFstype() string {
	if x != nil {
		return x.Fstype
	}
	return ""
}

func (x *UsageStat) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *UsageStat) GetFree() uint64 {
	if x != nil {
		return x.Free
	}
	return 0
}

func (x *UsageStat) GetUsed() uint64 {
	if x != nil {
		return x.Used
	}
	return 0
}

func (x *UsageStat) GetUsedPercent() float64 {
	if x != nil {
		return x.UsedPercent
	}
	return 0
}

func (x *UsageStat) GetInodesTotal() uint64 {
	if x != nil {
		return x.InodesTotal
	}
	return 0
}

func (x *UsageStat) GetInodesUsed() uint64 {
	if x != nil {
		return x.InodesUsed
	}
	return 0
}

func (x *UsageStat) GetInodesFree() uint64 {
	if x != nil {
		return x.InodesFree
	}
	return 0
}

func (x *UsageStat) GetInodesUsedPercent() float64 {
	if x != nil {
		return x.InodesUsedPercent
	}
	return 0
}

type IOCountersStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	BytesSent   uint64 `protobuf:"varint,2,opt,name=bytesSent,proto3" json:"bytesSent,omitempty"`
	BytesRecv   uint64 `protobuf:"varint,3,opt,name=bytesRecv,proto3" json:"bytesRecv,omitempty"`
	PacketsSent uint64 `protobuf:"varint,4,opt,name=packetsSent,proto3" json:"packetsSent,omitempty"`
	PacketsRecv uint64 `protobuf:"varint,5,opt,name=packetsRecv,proto3" json:"packetsRecv,omitempty"`
	Errin       uint64 `protobuf:"varint,6,opt,name=errin,proto3" json:"errin,omitempty"`
	Errout      uint64 `protobuf:"varint,7,opt,name=errout,proto3" json:"errout,omitempty"`
	Dropin      uint64 `protobuf:"varint,8,opt,name=dropin,proto3" json:"dropin,omitempty"`
	Dropout     uint64 `protobuf:"varint,9,opt,name=dropout,proto3" json:"dropout,omitempty"`
	Fifoin      uint64 `protobuf:"varint,10,opt,name=fifoin,proto3" json:"fifoin,omitempty"`
	Fifoout     uint64 `protobuf:"varint,11,opt,name=fifoout,proto3" json:"fifoout,omitempty"`
}

func (x *IOCountersStat) Reset() {
	*x = IOCountersStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IOCountersStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IOCountersStat) ProtoMessage() {}

func (x *IOCountersStat) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IOCountersStat.ProtoReflect.Descriptor instead.
func (*IOCountersStat) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{5}
}

func (x *IOCountersStat) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IOCountersStat) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *IOCountersStat) GetBytesRecv() uint64 {
	if x != nil {
		return x.BytesRecv
	}
	return 0
}

func (x *IOCountersStat) GetPacketsSent() uint64 {
	if x != nil {
		return x.PacketsSent
	}
	return 0
}

func (x *IOCountersStat) GetPacketsRecv() uint64 {
	if x != nil {
		return x.PacketsRecv
	}
	return 0
}

func (x *IOCountersStat) GetErrin() uint64 {
	if x != nil {
		return x.Errin
	}
	return 0
}

func (x *IOCountersStat) GetErrout() uint64 {
	if x != nil {
		return x.Errout
	}
	return 0
}

func (x *IOCountersStat) GetDropin() uint64 {
	if x != nil {
		return x.Dropin
	}
	return 0
}

func (x *IOCountersStat) GetDropout() uint64 {
	if x != nil {
		return x.Dropout
	}
	return 0
}

func (x *IOCountersStat) GetFifoin() uint64 {
	if x != nil {
		return x.Fifoin
	}
	return 0
}

func (x *IOCountersStat) GetFifoout() uint64 {
	if x != nil {
		return x.Fifoout
	}
	return 0
}

type IOCountersStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats []*IOCountersStat `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
}

func (x *IOCountersStats) Reset() {
	*x = IOCountersStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metrics_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IOCountersStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IOCountersStats) ProtoMessage() {}

func (x *IOCountersStats) ProtoReflect() protoreflect.Message {
	mi := &file_metrics_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IOCountersStats.ProtoReflect.Descriptor instead.
func (*IOCountersStats) Descriptor() ([]byte, []int) {
	return file_metrics_proto_rawDescGZIP(), []int{6}
}

func (x *IOCountersStats) GetStats() []*IOCountersStat {
	if x != nil {
		return x.Stats
	}
	return nil
}

var File_metrics_proto protoreflect.FileDescriptor

var file_metrics_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x32, 0x0a, 0x09, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x25,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0xd2, 0x02, 0x0a, 0x08, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74,
	0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x63, 0x70, 0x75, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x74, 0x65, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x73, 0x74, 0x65, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f,
	0x72, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x72, 0x65,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x68, 0x7a, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x68, 0x7a, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x34, 0x0a, 0x0a, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x22, 0xff, 0x01, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x75,
	0x12, 0x12, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x49, 0x64, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x49, 0x64, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x4e, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x49, 0x6f, 0x77, 0x61, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x49, 0x72, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x49, 0x72, 0x71, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x6f, 0x66, 0x74, 0x69, 0x72, 0x71, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x53, 0x6f, 0x66, 0x74, 0x69, 0x72, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x65, 0x61,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x47, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x47,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x69, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x69,
	0x63, 0x65, 0x22, 0xa7, 0x02, 0x0a, 0x09, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x75, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x72, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x72, 0x65, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x69, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0xb6, 0x02, 0x0a,
	0x0e, 0x49, 0x4f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x76, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x76, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x65, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x76,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x63, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x65, 0x72, 0x72, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x75,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x6f, 0x70, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x64, 0x72, 0x6f, 0x70, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x72, 0x6f,
	0x70, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x64, 0x72, 0x6f, 0x70,
	0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x66, 0x6f, 0x69, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x69, 0x66, 0x6f, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x69, 0x66, 0x6f, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x69,
	0x66, 0x6f, 0x6f, 0x75, 0x74, 0x22, 0x3e, 0x0a, 0x0f, 0x49, 0x4f, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x4f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x32, 0xe7, 0x03, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x41, 0x50, 0x49, 0x12, 0x53, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x50, 0x55, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x1b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x67,
	0x65, 0x74, 0x43, 0x50, 0x55, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x64, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x43, 0x50, 0x55, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x67, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x43, 0x50, 0x55, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x5e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x50, 0x55, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x20, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f,
	0x67, 0x65, 0x74, 0x43, 0x50, 0x55, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x4f, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x6d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x4f, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f,
	0x12, 0x1d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x67, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x42,
	0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_metrics_proto_rawDescOnce sync.Once
	file_metrics_proto_rawDescData = file_metrics_proto_rawDesc
)

func file_metrics_proto_rawDescGZIP() []byte {
	file_metrics_proto_rawDescOnce.Do(func() {
		file_metrics_proto_rawDescData = protoimpl.X.CompressGZIP(file_metrics_proto_rawDescData)
	})
	return file_metrics_proto_rawDescData
}

var file_metrics_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_metrics_proto_goTypes = []interface{}{
	(*InfoStats)(nil),       // 0: proto.InfoStats
	(*InfoStat)(nil),        // 1: proto.InfoStat
	(*TimesStats)(nil),      // 2: proto.TimesStats
	(*TimesStat)(nil),       // 3: proto.TimesStat
	(*UsageStat)(nil),       // 4: proto.UsageStat
	(*IOCountersStat)(nil),  // 5: proto.IOCountersStat
	(*IOCountersStats)(nil), // 6: proto.IOCountersStats
	(*empty.Empty)(nil),     // 7: google.protobuf.Empty
}
var file_metrics_proto_depIdxs = []int32{
	1, // 0: proto.InfoStats.stats:type_name -> proto.InfoStat
	3, // 1: proto.TimesStats.stats:type_name -> proto.TimesStat
	5, // 2: proto.IOCountersStats.stats:type_name -> proto.IOCountersStat
	7, // 3: proto.MetricsAPI.GetCPUInfo:input_type -> google.protobuf.Empty
	7, // 4: proto.MetricsAPI.GetAllCPUTimeStats:input_type -> google.protobuf.Empty
	7, // 5: proto.MetricsAPI.GetCPUTimeStats:input_type -> google.protobuf.Empty
	7, // 6: proto.MetricsAPI.DiskInfo:input_type -> google.protobuf.Empty
	7, // 7: proto.MetricsAPI.GetNetworkInterfaces:input_type -> google.protobuf.Empty
	0, // 8: proto.MetricsAPI.GetCPUInfo:output_type -> proto.InfoStats
	2, // 9: proto.MetricsAPI.GetAllCPUTimeStats:output_type -> proto.TimesStats
	2, // 10: proto.MetricsAPI.GetCPUTimeStats:output_type -> proto.TimesStats
	4, // 11: proto.MetricsAPI.DiskInfo:output_type -> proto.UsageStat
	6, // 12: proto.MetricsAPI.GetNetworkInterfaces:output_type -> proto.IOCountersStats
	8, // [8:13] is the sub-list for method output_type
	3, // [3:8] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_metrics_proto_init() }
func file_metrics_proto_init() {
	if File_metrics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_metrics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimesStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimesStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IOCountersStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metrics_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IOCountersStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_metrics_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_metrics_proto_goTypes,
		DependencyIndexes: file_metrics_proto_depIdxs,
		MessageInfos:      file_metrics_proto_msgTypes,
	}.Build()
	File_metrics_proto = out.File
	file_metrics_proto_rawDesc = nil
	file_metrics_proto_goTypes = nil
	file_metrics_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MetricsAPIClient is the client API for MetricsAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetricsAPIClient interface {
	GetCPUInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*InfoStats, error)
	GetAllCPUTimeStats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TimesStats, error)
	GetCPUTimeStats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TimesStats, error)
	DiskInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UsageStat, error)
	GetNetworkInterfaces(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*IOCountersStats, error)
}

type metricsAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsAPIClient(cc grpc.ClientConnInterface) MetricsAPIClient {
	return &metricsAPIClient{cc}
}

func (c *metricsAPIClient) GetCPUInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*InfoStats, error) {
	out := new(InfoStats)
	err := c.cc.Invoke(ctx, "/proto.MetricsAPI/GetCPUInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsAPIClient) GetAllCPUTimeStats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TimesStats, error) {
	out := new(TimesStats)
	err := c.cc.Invoke(ctx, "/proto.MetricsAPI/GetAllCPUTimeStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsAPIClient) GetCPUTimeStats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TimesStats, error) {
	out := new(TimesStats)
	err := c.cc.Invoke(ctx, "/proto.MetricsAPI/GetCPUTimeStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsAPIClient) DiskInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UsageStat, error) {
	out := new(UsageStat)
	err := c.cc.Invoke(ctx, "/proto.MetricsAPI/DiskInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsAPIClient) GetNetworkInterfaces(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*IOCountersStats, error) {
	out := new(IOCountersStats)
	err := c.cc.Invoke(ctx, "/proto.MetricsAPI/GetNetworkInterfaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsAPIServer is the server API for MetricsAPI service.
type MetricsAPIServer interface {
	GetCPUInfo(context.Context, *empty.Empty) (*InfoStats, error)
	GetAllCPUTimeStats(context.Context, *empty.Empty) (*TimesStats, error)
	GetCPUTimeStats(context.Context, *empty.Empty) (*TimesStats, error)
	DiskInfo(context.Context, *empty.Empty) (*UsageStat, error)
	GetNetworkInterfaces(context.Context, *empty.Empty) (*IOCountersStats, error)
}

// UnimplementedMetricsAPIServer can be embedded to have forward compatible implementations.
type UnimplementedMetricsAPIServer struct {
}

func (*UnimplementedMetricsAPIServer) GetCPUInfo(context.Context, *empty.Empty) (*InfoStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCPUInfo not implemented")
}
func (*UnimplementedMetricsAPIServer) GetAllCPUTimeStats(context.Context, *empty.Empty) (*TimesStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCPUTimeStats not implemented")
}
func (*UnimplementedMetricsAPIServer) GetCPUTimeStats(context.Context, *empty.Empty) (*TimesStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCPUTimeStats not implemented")
}
func (*UnimplementedMetricsAPIServer) DiskInfo(context.Context, *empty.Empty) (*UsageStat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiskInfo not implemented")
}
func (*UnimplementedMetricsAPIServer) GetNetworkInterfaces(context.Context, *empty.Empty) (*IOCountersStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkInterfaces not implemented")
}

func RegisterMetricsAPIServer(s *grpc.Server, srv MetricsAPIServer) {
	s.RegisterService(&_MetricsAPI_serviceDesc, srv)
}

func _MetricsAPI_GetCPUInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsAPIServer).GetCPUInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MetricsAPI/GetCPUInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsAPIServer).GetCPUInfo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsAPI_GetAllCPUTimeStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsAPIServer).GetAllCPUTimeStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MetricsAPI/GetAllCPUTimeStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsAPIServer).GetAllCPUTimeStats(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsAPI_GetCPUTimeStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsAPIServer).GetCPUTimeStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MetricsAPI/GetCPUTimeStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsAPIServer).GetCPUTimeStats(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsAPI_DiskInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsAPIServer).DiskInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MetricsAPI/DiskInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsAPIServer).DiskInfo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsAPI_GetNetworkInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsAPIServer).GetNetworkInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MetricsAPI/GetNetworkInterfaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsAPIServer).GetNetworkInterfaces(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetricsAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MetricsAPI",
	HandlerType: (*MetricsAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCPUInfo",
			Handler:    _MetricsAPI_GetCPUInfo_Handler,
		},
		{
			MethodName: "GetAllCPUTimeStats",
			Handler:    _MetricsAPI_GetAllCPUTimeStats_Handler,
		},
		{
			MethodName: "GetCPUTimeStats",
			Handler:    _MetricsAPI_GetCPUTimeStats_Handler,
		},
		{
			MethodName: "DiskInfo",
			Handler:    _MetricsAPI_DiskInfo_Handler,
		},
		{
			MethodName: "GetNetworkInterfaces",
			Handler:    _MetricsAPI_GetNetworkInterfaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metrics.proto",
}
