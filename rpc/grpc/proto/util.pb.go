// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.7.1
// source: util.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DecryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cryptograph string `protobuf:"bytes,1,opt,name=cryptograph,proto3" json:"cryptograph,omitempty"`
	Passphrase  string `protobuf:"bytes,2,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
}

func (x *DecryptRequest) Reset() {
	*x = DecryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptRequest) ProtoMessage() {}

func (x *DecryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_util_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptRequest.ProtoReflect.Descriptor instead.
func (*DecryptRequest) Descriptor() ([]byte, []int) {
	return file_util_proto_rawDescGZIP(), []int{0}
}

func (x *DecryptRequest) GetCryptograph() string {
	if x != nil {
		return x.Cryptograph
	}
	return ""
}

func (x *DecryptRequest) GetPassphrase() string {
	if x != nil {
		return x.Passphrase
	}
	return ""
}

type EncryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Raw        string `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
	Passphrase string `protobuf:"bytes,2,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
}

func (x *EncryptRequest) Reset() {
	*x = EncryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptRequest) ProtoMessage() {}

func (x *EncryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_util_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptRequest.ProtoReflect.Descriptor instead.
func (*EncryptRequest) Descriptor() ([]byte, []int) {
	return file_util_proto_rawDescGZIP(), []int{1}
}

func (x *EncryptRequest) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *EncryptRequest) GetPassphrase() string {
	if x != nil {
		return x.Passphrase
	}
	return ""
}

type RawBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance   int64  `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
	Unit      string `protobuf:"bytes,2,opt,name=unit,proto3" json:"unit,omitempty"`
	TokenName string `protobuf:"bytes,3,opt,name=tokenName,proto3" json:"tokenName,omitempty"`
}

func (x *RawBalance) Reset() {
	*x = RawBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_util_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawBalance) ProtoMessage() {}

func (x *RawBalance) ProtoReflect() protoreflect.Message {
	mi := &file_util_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawBalance.ProtoReflect.Descriptor instead.
func (*RawBalance) Descriptor() ([]byte, []int) {
	return file_util_proto_rawDescGZIP(), []int{2}
}

func (x *RawBalance) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *RawBalance) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *RawBalance) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

var File_util_proto protoreflect.FileDescriptor

var file_util_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x52, 0x0a, 0x0e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72,
	0x61, 0x73, 0x65, 0x22, 0x42, 0x0a, 0x0e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70,
	0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x73,
	0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x22, 0x58, 0x0a, 0x0a, 0x52, 0x61, 0x77, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x32, 0xb3, 0x02, 0x0a, 0x07, 0x55, 0x74, 0x69, 0x6c, 0x41, 0x50, 0x49, 0x12, 0x46, 0x0a,
	0x07, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x15,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x64, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x46, 0x0a, 0x07, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d,
	0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x4b, 0x0a,
	0x0c, 0x52, 0x61, 0x77, 0x54, 0x6f, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x77, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x22, 0x1a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x72, 0x61,
	0x77, 0x54, 0x6f, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x52, 0x61, 0x77, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x61, 0x77, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x0c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x22, 0x1a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x6f, 0x52, 0x61, 0x77, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_util_proto_rawDescOnce sync.Once
	file_util_proto_rawDescData = file_util_proto_rawDesc
)

func file_util_proto_rawDescGZIP() []byte {
	file_util_proto_rawDescOnce.Do(func() {
		file_util_proto_rawDescData = protoimpl.X.CompressGZIP(file_util_proto_rawDescData)
	})
	return file_util_proto_rawDescData
}

var file_util_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_util_proto_goTypes = []interface{}{
	(*DecryptRequest)(nil), // 0: proto.DecryptRequest
	(*EncryptRequest)(nil), // 1: proto.EncryptRequest
	(*RawBalance)(nil),     // 2: proto.RawBalance
	(*String)(nil),         // 3: proto.String
	(*Float)(nil),          // 4: proto.Float
	(*Int64)(nil),          // 5: proto.Int64
}
var file_util_proto_depIdxs = []int32{
	0, // 0: proto.UtilAPI.Decrypt:input_type -> proto.DecryptRequest
	1, // 1: proto.UtilAPI.Encrypt:input_type -> proto.EncryptRequest
	2, // 2: proto.UtilAPI.RawToBalance:input_type -> proto.RawBalance
	2, // 3: proto.UtilAPI.BalanceToRaw:input_type -> proto.RawBalance
	3, // 4: proto.UtilAPI.Decrypt:output_type -> proto.String
	3, // 5: proto.UtilAPI.Encrypt:output_type -> proto.String
	4, // 6: proto.UtilAPI.RawToBalance:output_type -> proto.Float
	5, // 7: proto.UtilAPI.BalanceToRaw:output_type -> proto.Int64
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_util_proto_init() }
func file_util_proto_init() {
	if File_util_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_util_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_util_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_util_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_util_proto_goTypes,
		DependencyIndexes: file_util_proto_depIdxs,
		MessageInfos:      file_util_proto_msgTypes,
	}.Build()
	File_util_proto = out.File
	file_util_proto_rawDesc = nil
	file_util_proto_goTypes = nil
	file_util_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UtilAPIClient is the client API for UtilAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UtilAPIClient interface {
	Decrypt(ctx context.Context, in *DecryptRequest, opts ...grpc.CallOption) (*String, error)
	Encrypt(ctx context.Context, in *EncryptRequest, opts ...grpc.CallOption) (*String, error)
	RawToBalance(ctx context.Context, in *RawBalance, opts ...grpc.CallOption) (*Float, error)
	BalanceToRaw(ctx context.Context, in *RawBalance, opts ...grpc.CallOption) (*Int64, error)
}

type utilAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewUtilAPIClient(cc grpc.ClientConnInterface) UtilAPIClient {
	return &utilAPIClient{cc}
}

func (c *utilAPIClient) Decrypt(ctx context.Context, in *DecryptRequest, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/proto.UtilAPI/Decrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilAPIClient) Encrypt(ctx context.Context, in *EncryptRequest, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/proto.UtilAPI/Encrypt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilAPIClient) RawToBalance(ctx context.Context, in *RawBalance, opts ...grpc.CallOption) (*Float, error) {
	out := new(Float)
	err := c.cc.Invoke(ctx, "/proto.UtilAPI/RawToBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilAPIClient) BalanceToRaw(ctx context.Context, in *RawBalance, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/proto.UtilAPI/BalanceToRaw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UtilAPIServer is the server API for UtilAPI service.
type UtilAPIServer interface {
	Decrypt(context.Context, *DecryptRequest) (*String, error)
	Encrypt(context.Context, *EncryptRequest) (*String, error)
	RawToBalance(context.Context, *RawBalance) (*Float, error)
	BalanceToRaw(context.Context, *RawBalance) (*Int64, error)
}

// UnimplementedUtilAPIServer can be embedded to have forward compatible implementations.
type UnimplementedUtilAPIServer struct {
}

func (*UnimplementedUtilAPIServer) Decrypt(context.Context, *DecryptRequest) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decrypt not implemented")
}
func (*UnimplementedUtilAPIServer) Encrypt(context.Context, *EncryptRequest) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encrypt not implemented")
}
func (*UnimplementedUtilAPIServer) RawToBalance(context.Context, *RawBalance) (*Float, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RawToBalance not implemented")
}
func (*UnimplementedUtilAPIServer) BalanceToRaw(context.Context, *RawBalance) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceToRaw not implemented")
}

func RegisterUtilAPIServer(s *grpc.Server, srv UtilAPIServer) {
	s.RegisterService(&_UtilAPI_serviceDesc, srv)
}

func _UtilAPI_Decrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilAPIServer).Decrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UtilAPI/Decrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilAPIServer).Decrypt(ctx, req.(*DecryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilAPI_Encrypt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilAPIServer).Encrypt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UtilAPI/Encrypt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilAPIServer).Encrypt(ctx, req.(*EncryptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilAPI_RawToBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilAPIServer).RawToBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UtilAPI/RawToBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilAPIServer).RawToBalance(ctx, req.(*RawBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilAPI_BalanceToRaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilAPIServer).BalanceToRaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UtilAPI/BalanceToRaw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilAPIServer).BalanceToRaw(ctx, req.(*RawBalance))
	}
	return interceptor(ctx, in, info, handler)
}

var _UtilAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UtilAPI",
	HandlerType: (*UtilAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Decrypt",
			Handler:    _UtilAPI_Decrypt_Handler,
		},
		{
			MethodName: "Encrypt",
			Handler:    _UtilAPI_Encrypt_Handler,
		},
		{
			MethodName: "RawToBalance",
			Handler:    _UtilAPI_RawToBalance_Handler,
		},
		{
			MethodName: "BalanceToRaw",
			Handler:    _UtilAPI_BalanceToRaw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "util.proto",
}
