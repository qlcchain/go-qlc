// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.7.1
// source: pov.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	types "github.com/qlcchain/go-qlc/rpc/grpc/proto/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PovStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PovEnabled   bool   `protobuf:"varint,1,opt,name=povEnabled,proto3" json:"povEnabled,omitempty"`
	SyncState    int32  `protobuf:"varint,2,opt,name=syncState,proto3" json:"syncState,omitempty"`
	SyncStateStr string `protobuf:"bytes,3,opt,name=syncStateStr,proto3" json:"syncStateStr,omitempty"`
}

func (x *PovStatus) Reset() {
	*x = PovStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PovStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PovStatus) ProtoMessage() {}

func (x *PovStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PovStatus.ProtoReflect.Descriptor instead.
func (*PovStatus) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{0}
}

func (x *PovStatus) GetPovEnabled() bool {
	if x != nil {
		return x.PovEnabled
	}
	return false
}

func (x *PovStatus) GetSyncState() int32 {
	if x != nil {
		return x.SyncState
	}
	return 0
}

func (x *PovStatus) GetSyncStateStr() string {
	if x != nil {
		return x.SyncStateStr
	}
	return ""
}

type PovApiHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//    types.PovHeader povHeader      = 1;
	BasHdr         *types.PovBaseHeader `protobuf:"bytes,1,opt,name=basHdr,proto3" json:"basHdr,omitempty"`
	AuxHdr         *types.PovAuxHeader  `protobuf:"bytes,2,opt,name=auxHdr,proto3" json:"auxHdr,omitempty"`
	CbTx           *types.PovCoinBaseTx `protobuf:"bytes,3,opt,name=cbTx,proto3" json:"cbTx,omitempty"`
	AlgoName       string               `protobuf:"bytes,4,opt,name=algoName,proto3" json:"algoName,omitempty"`
	AlgoEfficiency uint32               `protobuf:"varint,5,opt,name=algoEfficiency,proto3" json:"algoEfficiency,omitempty"`
	NormBits       uint32               `protobuf:"varint,6,opt,name=normBits,proto3" json:"normBits,omitempty"`
	NormDifficulty float64              `protobuf:"fixed64,7,opt,name=normDifficulty,proto3" json:"normDifficulty,omitempty"`
	AlgoDifficulty float64              `protobuf:"fixed64,8,opt,name=algoDifficulty,proto3" json:"algoDifficulty,omitempty"`
}

func (x *PovApiHeader) Reset() {
	*x = PovApiHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PovApiHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PovApiHeader) ProtoMessage() {}

func (x *PovApiHeader) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PovApiHeader.ProtoReflect.Descriptor instead.
func (*PovApiHeader) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{1}
}

func (x *PovApiHeader) GetBasHdr() *types.PovBaseHeader {
	if x != nil {
		return x.BasHdr
	}
	return nil
}

func (x *PovApiHeader) GetAuxHdr() *types.PovAuxHeader {
	if x != nil {
		return x.AuxHdr
	}
	return nil
}

func (x *PovApiHeader) GetCbTx() *types.PovCoinBaseTx {
	if x != nil {
		return x.CbTx
	}
	return nil
}

func (x *PovApiHeader) GetAlgoName() string {
	if x != nil {
		return x.AlgoName
	}
	return ""
}

func (x *PovApiHeader) GetAlgoEfficiency() uint32 {
	if x != nil {
		return x.AlgoEfficiency
	}
	return 0
}

func (x *PovApiHeader) GetNormBits() uint32 {
	if x != nil {
		return x.NormBits
	}
	return 0
}

func (x *PovApiHeader) GetNormDifficulty() float64 {
	if x != nil {
		return x.NormDifficulty
	}
	return 0
}

func (x *PovApiHeader) GetAlgoDifficulty() float64 {
	if x != nil {
		return x.AlgoDifficulty
	}
	return 0
}

type PovApiBatchHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count   int32           `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Headers []*PovApiHeader `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (x *PovApiBatchHeader) Reset() {
	*x = PovApiBatchHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PovApiBatchHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PovApiBatchHeader) ProtoMessage() {}

func (x *PovApiBatchHeader) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PovApiBatchHeader.ProtoReflect.Descriptor instead.
func (*PovApiBatchHeader) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{2}
}

func (x *PovApiBatchHeader) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PovApiBatchHeader) GetHeaders() []*PovApiHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

type PovApiBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header         *types.PovHeader `protobuf:"bytes,1,opt,name=Header,proto3" json:"Header,omitempty"`
	Body           *types.PovBody   `protobuf:"bytes,2,opt,name=Body,proto3" json:"Body,omitempty"`
	AlgoName       string           `protobuf:"bytes,3,opt,name=algoName,proto3" json:"algoName,omitempty"`
	AlgoEfficiency uint32           `protobuf:"varint,4,opt,name=AlgoEfficiency,proto3" json:"AlgoEfficiency,omitempty"`
	NormBits       uint32           `protobuf:"varint,5,opt,name=NormBits,proto3" json:"NormBits,omitempty"`
	NormDifficulty float64          `protobuf:"fixed64,6,opt,name=NormDifficulty,proto3" json:"NormDifficulty,omitempty"`
	AlgoDifficulty float64          `protobuf:"fixed64,7,opt,name=AlgoDifficulty,proto3" json:"AlgoDifficulty,omitempty"`
}

func (x *PovApiBlock) Reset() {
	*x = PovApiBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PovApiBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PovApiBlock) ProtoMessage() {}

func (x *PovApiBlock) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PovApiBlock.ProtoReflect.Descriptor instead.
func (*PovApiBlock) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{3}
}

func (x *PovApiBlock) GetHeader() *types.PovHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PovApiBlock) GetBody() *types.PovBody {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *PovApiBlock) GetAlgoName() string {
	if x != nil {
		return x.AlgoName
	}
	return ""
}

func (x *PovApiBlock) GetAlgoEfficiency() uint32 {
	if x != nil {
		return x.AlgoEfficiency
	}
	return 0
}

func (x *PovApiBlock) GetNormBits() uint32 {
	if x != nil {
		return x.NormBits
	}
	return 0
}

func (x *PovApiBlock) GetNormDifficulty() float64 {
	if x != nil {
		return x.NormDifficulty
	}
	return 0
}

func (x *PovApiBlock) GetAlgoDifficulty() float64 {
	if x != nil {
		return x.AlgoDifficulty
	}
	return 0
}

type PovApiState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountState  *types.PovAccountState  `protobuf:"bytes,1,opt,name=accountState,proto3" json:"accountState,omitempty"`
	RepState      *types.PovRepState      `protobuf:"bytes,2,opt,name=repState,proto3" json:"repState,omitempty"`
	ContractState *types.PovContractState `protobuf:"bytes,3,opt,name=contractState,proto3" json:"contractState,omitempty"`
}

func (x *PovApiState) Reset() {
	*x = PovApiState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PovApiState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PovApiState) ProtoMessage() {}

func (x *PovApiState) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PovApiState.ProtoReflect.Descriptor instead.
func (*PovApiState) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{4}
}

func (x *PovApiState) GetAccountState() *types.PovAccountState {
	if x != nil {
		return x.AccountState
	}
	return nil
}

func (x *PovApiState) GetRepState() *types.PovRepState {
	if x != nil {
		return x.RepState
	}
	return nil
}

func (x *PovApiState) GetContractState() *types.PovContractState {
	if x != nil {
		return x.ContractState
	}
	return nil
}

type PovApiDumpState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateHash string                             `protobuf:"bytes,1,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	Accounts  map[string]*types.PovAccountState  `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Reps      map[string]*types.PovRepState      `protobuf:"bytes,3,rep,name=reps,proto3" json:"reps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Contracts map[string]*types.PovContractState `protobuf:"bytes,4,rep,name=contracts,proto3" json:"contracts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PovApiDumpState) Reset() {
	*x = PovApiDumpState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PovApiDumpState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PovApiDumpState) ProtoMessage() {}

func (x *PovApiDumpState) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PovApiDumpState.ProtoReflect.Descriptor instead.
func (*PovApiDumpState) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{5}
}

func (x *PovApiDumpState) GetStateHash() string {
	if x != nil {
		return x.StateHash
	}
	return ""
}

func (x *PovApiDumpState) GetAccounts() map[string]*types.PovAccountState {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *PovApiDumpState) GetReps() map[string]*types.PovRepState {
	if x != nil {
		return x.Reps
	}
	return nil
}

func (x *PovApiDumpState) GetContracts() map[string]*types.PovContractState {
	if x != nil {
		return x.Contracts
	}
	return nil
}

type PovApiRepState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateHash string                        `protobuf:"bytes,1,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	Reps      map[string]*types.PovRepState `protobuf:"bytes,2,rep,name=reps,proto3" json:"reps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PovApiRepState) Reset() {
	*x = PovApiRepState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PovApiRepState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PovApiRepState) ProtoMessage() {}

func (x *PovApiRepState) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PovApiRepState.ProtoReflect.Descriptor instead.
func (*PovApiRepState) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{6}
}

func (x *PovApiRepState) GetStateHash() string {
	if x != nil {
		return x.StateHash
	}
	return ""
}

func (x *PovApiRepState) GetReps() map[string]*types.PovRepState {
	if x != nil {
		return x.Reps
	}
	return nil
}

type PovApiKeyValPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PovApiKeyValPair) Reset() {
	*x = PovApiKeyValPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PovApiKeyValPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PovApiKeyValPair) ProtoMessage() {}

func (x *PovApiKeyValPair) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PovApiKeyValPair.ProtoReflect.Descriptor instead.
func (*PovApiKeyValPair) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{7}
}

func (x *PovApiKeyValPair) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PovApiKeyValPair) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type PovApiTxLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash     string               `protobuf:"bytes,1,opt,name=txHash,proto3" json:"txHash,omitempty"`
	TxLookup   *types.PovTxLookup   `protobuf:"bytes,2,opt,name=txLookup,proto3" json:"txLookup,omitempty"`
	CoinbaseTx *types.PovCoinBaseTx `protobuf:"bytes,3,opt,name=coinbaseTx,proto3" json:"coinbaseTx,omitempty"`
	AccountTx  *types.StateBlock    `protobuf:"bytes,4,opt,name=accountTx,proto3" json:"accountTx,omitempty"`
}

func (x *PovApiTxLookup) Reset() {
	*x = PovApiTxLookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PovApiTxLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PovApiTxLookup) ProtoMessage() {}

func (x *PovApiTxLookup) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PovApiTxLookup.ProtoReflect.Descriptor instead.
func (*PovApiTxLookup) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{8}
}

func (x *PovApiTxLookup) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *PovApiTxLookup) GetTxLookup() *types.PovTxLookup {
	if x != nil {
		return x.TxLookup
	}
	return nil
}

func (x *PovApiTxLookup) GetCoinbaseTx() *types.PovCoinBaseTx {
	if x != nil {
		return x.CoinbaseTx
	}
	return nil
}

func (x *PovApiTxLookup) GetAccountTx() *types.StateBlock {
	if x != nil {
		return x.AccountTx
	}
	return nil
}

type PovLedgerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PovBlockCount   uint64 `protobuf:"varint,1,opt,name=povBlockCount,proto3" json:"povBlockCount,omitempty"`
	PovBestCount    uint64 `protobuf:"varint,2,opt,name=povBestCount,proto3" json:"povBestCount,omitempty"`
	PovAllTxCount   uint64 `protobuf:"varint,3,opt,name=povAllTxCount,proto3" json:"povAllTxCount,omitempty"`
	PovCbTxCount    uint64 `protobuf:"varint,4,opt,name=povCbTxCount,proto3" json:"povCbTxCount,omitempty"`
	PovStateTxCount uint64 `protobuf:"varint,5,opt,name=povStateTxCount,proto3" json:"povStateTxCount,omitempty"`
	StateBlockCount uint64 `protobuf:"varint,6,opt,name=stateBlockCount,proto3" json:"stateBlockCount,omitempty"`
}

func (x *PovLedgerStats) Reset() {
	*x = PovLedgerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PovLedgerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PovLedgerStats) ProtoMessage() {}

func (x *PovLedgerStats) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PovLedgerStats.ProtoReflect.Descriptor instead.
func (*PovLedgerStats) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{9}
}

func (x *PovLedgerStats) GetPovBlockCount() uint64 {
	if x != nil {
		return x.PovBlockCount
	}
	return 0
}

func (x *PovLedgerStats) GetPovBestCount() uint64 {
	if x != nil {
		return x.PovBestCount
	}
	return 0
}

func (x *PovLedgerStats) GetPovAllTxCount() uint64 {
	if x != nil {
		return x.PovAllTxCount
	}
	return 0
}

func (x *PovLedgerStats) GetPovCbTxCount() uint64 {
	if x != nil {
		return x.PovCbTxCount
	}
	return 0
}

func (x *PovLedgerStats) GetPovStateTxCount() uint64 {
	if x != nil {
		return x.PovStateTxCount
	}
	return 0
}

func (x *PovLedgerStats) GetStateBlockCount() uint64 {
	if x != nil {
		return x.StateBlockCount
	}
	return 0
}

type PovApiTD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *types.PovHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Td     *types.PovTD     `protobuf:"bytes,2,opt,name=td,proto3" json:"td,omitempty"`
}

func (x *PovApiTD) Reset() {
	*x = PovApiTD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PovApiTD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PovApiTD) ProtoMessage() {}

func (x *PovApiTD) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PovApiTD.ProtoReflect.Descriptor instead.
func (*PovApiTD) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{10}
}

func (x *PovApiTD) GetHeader() *types.PovHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PovApiTD) GetTd() *types.PovTD {
	if x != nil {
		return x.Td
	}
	return nil
}

type PovMinerStatItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account            string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	MainBlockNum       uint32 `protobuf:"varint,2,opt,name=mainBlockNum,proto3" json:"mainBlockNum,omitempty"`
	MainRewardAmount   int64  `protobuf:"varint,3,opt,name=mainRewardAmount,proto3" json:"mainRewardAmount,omitempty"`
	StableBlockNum     uint32 `protobuf:"varint,4,opt,name=stableBlockNum,proto3" json:"stableBlockNum,omitempty"`
	StableRewardAmount int64  `protobuf:"varint,5,opt,name=stableRewardAmount,proto3" json:"stableRewardAmount,omitempty"`
	FirstBlockTime     int64  `protobuf:"varint,6,opt,name=firstBlockTime,proto3" json:"firstBlockTime,omitempty"`
	LastBlockTime      int64  `protobuf:"varint,7,opt,name=lastBlockTime,proto3" json:"lastBlockTime,omitempty"`
	FirstBlockHeight   uint64 `protobuf:"varint,8,opt,name=firstBlockHeight,proto3" json:"firstBlockHeight,omitempty"`
	LastBlockHeight    uint64 `protobuf:"varint,9,opt,name=lastBlockHeight,proto3" json:"lastBlockHeight,omitempty"`
	IsHourOnline       bool   `protobuf:"varint,10,opt,name=isHourOnline,proto3" json:"isHourOnline,omitempty"`
	IsDayOnline        bool   `protobuf:"varint,11,opt,name=isDayOnline,proto3" json:"isDayOnline,omitempty"`
}

func (x *PovMinerStatItem) Reset() {
	*x = PovMinerStatItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PovMinerStatItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PovMinerStatItem) ProtoMessage() {}

func (x *PovMinerStatItem) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PovMinerStatItem.ProtoReflect.Descriptor instead.
func (*PovMinerStatItem) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{11}
}

func (x *PovMinerStatItem) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *PovMinerStatItem) GetMainBlockNum() uint32 {
	if x != nil {
		return x.MainBlockNum
	}
	return 0
}

func (x *PovMinerStatItem) GetMainRewardAmount() int64 {
	if x != nil {
		return x.MainRewardAmount
	}
	return 0
}

func (x *PovMinerStatItem) GetStableBlockNum() uint32 {
	if x != nil {
		return x.StableBlockNum
	}
	return 0
}

func (x *PovMinerStatItem) GetStableRewardAmount() int64 {
	if x != nil {
		return x.StableRewardAmount
	}
	return 0
}

func (x *PovMinerStatItem) GetFirstBlockTime() int64 {
	if x != nil {
		return x.FirstBlockTime
	}
	return 0
}

func (x *PovMinerStatItem) GetLastBlockTime() int64 {
	if x != nil {
		return x.LastBlockTime
	}
	return 0
}

func (x *PovMinerStatItem) GetFirstBlockHeight() uint64 {
	if x != nil {
		return x.FirstBlockHeight
	}
	return 0
}

func (x *PovMinerStatItem) GetLastBlockHeight() uint64 {
	if x != nil {
		return x.LastBlockHeight
	}
	return 0
}

func (x *PovMinerStatItem) GetIsHourOnline() bool {
	if x != nil {
		return x.IsHourOnline
	}
	return false
}

func (x *PovMinerStatItem) GetIsDayOnline() bool {
	if x != nil {
		return x.IsDayOnline
	}
	return false
}

type PovMinerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinerCount        int32                        `protobuf:"varint,1,opt,name=minerCount,proto3" json:"minerCount,omitempty"`
	HourOnlineCount   int32                        `protobuf:"varint,2,opt,name=hourOnlineCount,proto3" json:"hourOnlineCount,omitempty"`
	DayOnlineCount    int32                        `protobuf:"varint,3,opt,name=dayOnlineCount,proto3" json:"dayOnlineCount,omitempty"`
	MinerStats        map[string]*PovMinerStatItem `protobuf:"bytes,4,rep,name=minerStats,proto3" json:"minerStats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TotalBlockNum     uint32                       `protobuf:"varint,5,opt,name=totalBlockNum,proto3" json:"totalBlockNum,omitempty"`
	TotalRewardAmount int64                        `protobuf:"varint,6,opt,name=totalRewardAmount,proto3" json:"totalRewardAmount,omitempty"`
	TotalMinerReward  int64                        `protobuf:"varint,7,opt,name=totalMinerReward,proto3" json:"totalMinerReward,omitempty"`
	TotalRepReward    int64                        `protobuf:"varint,8,opt,name=totalRepReward,proto3" json:"totalRepReward,omitempty"`
	LatestBlockHeight uint64                       `protobuf:"varint,9,opt,name=latestBlockHeight,proto3" json:"latestBlockHeight,omitempty"`
}

func (x *PovMinerStats) Reset() {
	*x = PovMinerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PovMinerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PovMinerStats) ProtoMessage() {}

func (x *PovMinerStats) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PovMinerStats.ProtoReflect.Descriptor instead.
func (*PovMinerStats) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{12}
}

func (x *PovMinerStats) GetMinerCount() int32 {
	if x != nil {
		return x.MinerCount
	}
	return 0
}

func (x *PovMinerStats) GetHourOnlineCount() int32 {
	if x != nil {
		return x.HourOnlineCount
	}
	return 0
}

func (x *PovMinerStats) GetDayOnlineCount() int32 {
	if x != nil {
		return x.DayOnlineCount
	}
	return 0
}

func (x *PovMinerStats) GetMinerStats() map[string]*PovMinerStatItem {
	if x != nil {
		return x.MinerStats
	}
	return nil
}

func (x *PovMinerStats) GetTotalBlockNum() uint32 {
	if x != nil {
		return x.TotalBlockNum
	}
	return 0
}

func (x *PovMinerStats) GetTotalRewardAmount() int64 {
	if x != nil {
		return x.TotalRewardAmount
	}
	return 0
}

func (x *PovMinerStats) GetTotalMinerReward() int64 {
	if x != nil {
		return x.TotalMinerReward
	}
	return 0
}

func (x *PovMinerStats) GetTotalRepReward() int64 {
	if x != nil {
		return x.TotalRepReward
	}
	return 0
}

func (x *PovMinerStats) GetLatestBlockHeight() uint64 {
	if x != nil {
		return x.LatestBlockHeight
	}
	return 0
}

type PovRepStatItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainBlockNum       uint32 `protobuf:"varint,1,opt,name=mainBlockNum,proto3" json:"mainBlockNum,omitempty"`
	MainRewardAmount   string `protobuf:"bytes,2,opt,name=mainRewardAmount,proto3" json:"mainRewardAmount,omitempty"`
	MainOnlinePeriod   uint32 `protobuf:"varint,3,opt,name=mainOnlinePeriod,proto3" json:"mainOnlinePeriod,omitempty"`
	StableBlockNum     uint32 `protobuf:"varint,4,opt,name=stableBlockNum,proto3" json:"stableBlockNum,omitempty"`
	StableRewardAmount string `protobuf:"bytes,5,opt,name=stableRewardAmount,proto3" json:"stableRewardAmount,omitempty"`
	StableOnlinePeriod uint32 `protobuf:"varint,6,opt,name=stableOnlinePeriod,proto3" json:"stableOnlinePeriod,omitempty"`
	LastOnlineTime     int64  `protobuf:"varint,7,opt,name=lastOnlineTime,proto3" json:"lastOnlineTime,omitempty"`
	LastOnlineHeight   uint32 `protobuf:"varint,8,opt,name=lastOnlineHeight,proto3" json:"lastOnlineHeight,omitempty"`
	IsOnline           bool   `protobuf:"varint,9,opt,name=isOnline,proto3" json:"isOnline,omitempty"`
}

func (x *PovRepStatItem) Reset() {
	*x = PovRepStatItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PovRepStatItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PovRepStatItem) ProtoMessage() {}

func (x *PovRepStatItem) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PovRepStatItem.ProtoReflect.Descriptor instead.
func (*PovRepStatItem) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{13}
}

func (x *PovRepStatItem) GetMainBlockNum() uint32 {
	if x != nil {
		return x.MainBlockNum
	}
	return 0
}

func (x *PovRepStatItem) GetMainRewardAmount() string {
	if x != nil {
		return x.MainRewardAmount
	}
	return ""
}

func (x *PovRepStatItem) GetMainOnlinePeriod() uint32 {
	if x != nil {
		return x.MainOnlinePeriod
	}
	return 0
}

func (x *PovRepStatItem) GetStableBlockNum() uint32 {
	if x != nil {
		return x.StableBlockNum
	}
	return 0
}

func (x *PovRepStatItem) GetStableRewardAmount() string {
	if x != nil {
		return x.StableRewardAmount
	}
	return ""
}

func (x *PovRepStatItem) GetStableOnlinePeriod() uint32 {
	if x != nil {
		return x.StableOnlinePeriod
	}
	return 0
}

func (x *PovRepStatItem) GetLastOnlineTime() int64 {
	if x != nil {
		return x.LastOnlineTime
	}
	return 0
}

func (x *PovRepStatItem) GetLastOnlineHeight() uint32 {
	if x != nil {
		return x.LastOnlineHeight
	}
	return 0
}

func (x *PovRepStatItem) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

type PovRepStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepCount          uint32                     `protobuf:"varint,1,opt,name=repCount,proto3" json:"repCount,omitempty"`
	RepStats          map[string]*PovRepStatItem `protobuf:"bytes,2,rep,name=repStats,proto3" json:"repStats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TotalBlockNum     uint32                     `protobuf:"varint,3,opt,name=totalBlockNum,proto3" json:"totalBlockNum,omitempty"`
	TotalPeriod       uint32                     `protobuf:"varint,4,opt,name=totalPeriod,proto3" json:"totalPeriod,omitempty"`
	TotalRewardAmount int64                      `protobuf:"varint,5,opt,name=totalRewardAmount,proto3" json:"totalRewardAmount,omitempty"`
	LatestBlockHeight uint64                     `protobuf:"varint,6,opt,name=latestBlockHeight,proto3" json:"latestBlockHeight,omitempty"`
}

func (x *PovRepStats) Reset() {
	*x = PovRepStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PovRepStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PovRepStats) ProtoMessage() {}

func (x *PovRepStats) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PovRepStats.ProtoReflect.Descriptor instead.
func (*PovRepStats) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{14}
}

func (x *PovRepStats) GetRepCount() uint32 {
	if x != nil {
		return x.RepCount
	}
	return 0
}

func (x *PovRepStats) GetRepStats() map[string]*PovRepStatItem {
	if x != nil {
		return x.RepStats
	}
	return nil
}

func (x *PovRepStats) GetTotalBlockNum() uint32 {
	if x != nil {
		return x.TotalBlockNum
	}
	return 0
}

func (x *PovRepStats) GetTotalPeriod() uint32 {
	if x != nil {
		return x.TotalPeriod
	}
	return 0
}

func (x *PovRepStats) GetTotalRewardAmount() int64 {
	if x != nil {
		return x.TotalRewardAmount
	}
	return 0
}

func (x *PovRepStats) GetLatestBlockHeight() uint64 {
	if x != nil {
		return x.LatestBlockHeight
	}
	return 0
}

type PovApiSubmitWork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkHash      string              `protobuf:"bytes,1,opt,name=workHash,proto3" json:"workHash,omitempty"`
	BlockHash     string              `protobuf:"bytes,2,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	MerkleRoot    string              `protobuf:"bytes,3,opt,name=merkleRoot,proto3" json:"merkleRoot,omitempty"`
	Timestamp     uint32              `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Nonce         uint32              `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	CoinbaseExtra string              `protobuf:"bytes,6,opt,name=coinbaseExtra,proto3" json:"coinbaseExtra,omitempty"` //bytes
	CoinbaseHash  string              `protobuf:"bytes,7,opt,name=coinbaseHash,proto3" json:"coinbaseHash,omitempty"`
	AuxPow        *types.PovAuxHeader `protobuf:"bytes,8,opt,name=auxPow,proto3" json:"auxPow,omitempty"`
}

func (x *PovApiSubmitWork) Reset() {
	*x = PovApiSubmitWork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PovApiSubmitWork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PovApiSubmitWork) ProtoMessage() {}

func (x *PovApiSubmitWork) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PovApiSubmitWork.ProtoReflect.Descriptor instead.
func (*PovApiSubmitWork) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{15}
}

func (x *PovApiSubmitWork) GetWorkHash() string {
	if x != nil {
		return x.WorkHash
	}
	return ""
}

func (x *PovApiSubmitWork) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *PovApiSubmitWork) GetMerkleRoot() string {
	if x != nil {
		return x.MerkleRoot
	}
	return ""
}

func (x *PovApiSubmitWork) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PovApiSubmitWork) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *PovApiSubmitWork) GetCoinbaseExtra() string {
	if x != nil {
		return x.CoinbaseExtra
	}
	return ""
}

func (x *PovApiSubmitWork) GetCoinbaseHash() string {
	if x != nil {
		return x.CoinbaseHash
	}
	return ""
}

func (x *PovApiSubmitWork) GetAuxPow() *types.PovAuxHeader {
	if x != nil {
		return x.AuxPow
	}
	return nil
}

type PovApiGetLastNHourItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hour            uint32 `protobuf:"varint,1,opt,name=hour,proto3" json:"hour,omitempty"`
	AllBlockNum     uint32 `protobuf:"varint,2,opt,name=allBlockNum,proto3" json:"allBlockNum,omitempty"`
	AllTxNum        uint32 `protobuf:"varint,3,opt,name=allTxNum,proto3" json:"allTxNum,omitempty"`
	AllMinerReward  int64  `protobuf:"varint,4,opt,name=allMinerReward,proto3" json:"allMinerReward,omitempty"`
	AllRepReward    int64  `protobuf:"varint,5,opt,name=allRepReward,proto3" json:"allRepReward,omitempty"`
	Sha256DBlockNum uint32 `protobuf:"varint,6,opt,name=sha256dBlockNum,proto3" json:"sha256dBlockNum,omitempty"`
	X11BlockNum     uint32 `protobuf:"varint,7,opt,name=x11BlockNum,proto3" json:"x11BlockNum,omitempty"`
	ScryptBlockNum  uint32 `protobuf:"varint,8,opt,name=scryptBlockNum,proto3" json:"scryptBlockNum,omitempty"`
	AuxBlockNum     uint32 `protobuf:"varint,9,opt,name=auxBlockNum,proto3" json:"auxBlockNum,omitempty"`
	MaxTxPerBlock   uint32 `protobuf:"varint,10,opt,name=maxTxPerBlock,proto3" json:"maxTxPerBlock,omitempty"`
	MinTxPerBlock   uint32 `protobuf:"varint,11,opt,name=minTxPerBlock,proto3" json:"minTxPerBlock,omitempty"`
	AvgTxPerBlock   uint32 `protobuf:"varint,12,opt,name=avgTxPerBlock,proto3" json:"avgTxPerBlock,omitempty"`
}

func (x *PovApiGetLastNHourItem) Reset() {
	*x = PovApiGetLastNHourItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PovApiGetLastNHourItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PovApiGetLastNHourItem) ProtoMessage() {}

func (x *PovApiGetLastNHourItem) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PovApiGetLastNHourItem.ProtoReflect.Descriptor instead.
func (*PovApiGetLastNHourItem) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{16}
}

func (x *PovApiGetLastNHourItem) GetHour() uint32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *PovApiGetLastNHourItem) GetAllBlockNum() uint32 {
	if x != nil {
		return x.AllBlockNum
	}
	return 0
}

func (x *PovApiGetLastNHourItem) GetAllTxNum() uint32 {
	if x != nil {
		return x.AllTxNum
	}
	return 0
}

func (x *PovApiGetLastNHourItem) GetAllMinerReward() int64 {
	if x != nil {
		return x.AllMinerReward
	}
	return 0
}

func (x *PovApiGetLastNHourItem) GetAllRepReward() int64 {
	if x != nil {
		return x.AllRepReward
	}
	return 0
}

func (x *PovApiGetLastNHourItem) GetSha256DBlockNum() uint32 {
	if x != nil {
		return x.Sha256DBlockNum
	}
	return 0
}

func (x *PovApiGetLastNHourItem) GetX11BlockNum() uint32 {
	if x != nil {
		return x.X11BlockNum
	}
	return 0
}

func (x *PovApiGetLastNHourItem) GetScryptBlockNum() uint32 {
	if x != nil {
		return x.ScryptBlockNum
	}
	return 0
}

func (x *PovApiGetLastNHourItem) GetAuxBlockNum() uint32 {
	if x != nil {
		return x.AuxBlockNum
	}
	return 0
}

func (x *PovApiGetLastNHourItem) GetMaxTxPerBlock() uint32 {
	if x != nil {
		return x.MaxTxPerBlock
	}
	return 0
}

func (x *PovApiGetLastNHourItem) GetMinTxPerBlock() uint32 {
	if x != nil {
		return x.MinTxPerBlock
	}
	return 0
}

func (x *PovApiGetLastNHourItem) GetAvgTxPerBlock() uint32 {
	if x != nil {
		return x.AvgTxPerBlock
	}
	return 0
}

type PovApiGetLastNHourInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxTxPerBlock   uint32                    `protobuf:"varint,1,opt,name=maxTxPerBlock,proto3" json:"maxTxPerBlock,omitempty"`
	MinTxPerBlock   uint32                    `protobuf:"varint,2,opt,name=minTxPerBlock,proto3" json:"minTxPerBlock,omitempty"`
	AvgTxPerBlock   uint32                    `protobuf:"varint,3,opt,name=avgTxPerBlock,proto3" json:"avgTxPerBlock,omitempty"`
	MaxTxPerHour    uint32                    `protobuf:"varint,4,opt,name=maxTxPerHour,proto3" json:"maxTxPerHour,omitempty"`
	MinTxPerHour    uint32                    `protobuf:"varint,5,opt,name=minTxPerHour,proto3" json:"minTxPerHour,omitempty"`
	AvgTxPerHour    uint32                    `protobuf:"varint,6,opt,name=avgTxPerHour,proto3" json:"avgTxPerHour,omitempty"`
	MaxBlockPerHour uint32                    `protobuf:"varint,7,opt,name=maxBlockPerHour,proto3" json:"maxBlockPerHour,omitempty"`
	MinBlockPerHour uint32                    `protobuf:"varint,8,opt,name=minBlockPerHour,proto3" json:"minBlockPerHour,omitempty"`
	AvgBlockPerHour uint32                    `protobuf:"varint,9,opt,name=avgBlockPerHour,proto3" json:"avgBlockPerHour,omitempty"`
	AllBlockNum     uint32                    `protobuf:"varint,10,opt,name=allBlockNum,proto3" json:"allBlockNum,omitempty"`
	AllTxNum        uint32                    `protobuf:"varint,11,opt,name=allTxNum,proto3" json:"allTxNum,omitempty"`
	Sha256DBlockNum uint32                    `protobuf:"varint,12,opt,name=sha256dBlockNum,proto3" json:"sha256dBlockNum,omitempty"`
	X11BlockNum     uint32                    `protobuf:"varint,13,opt,name=x11BlockNum,proto3" json:"x11BlockNum,omitempty"`
	ScryptBlockNum  uint32                    `protobuf:"varint,14,opt,name=scryptBlockNum,proto3" json:"scryptBlockNum,omitempty"`
	AuxBlockNum     uint32                    `protobuf:"varint,15,opt,name=auxBlockNum,proto3" json:"auxBlockNum,omitempty"`
	HourItemList    []*PovApiGetLastNHourItem `protobuf:"bytes,16,rep,name=hourItemList,proto3" json:"hourItemList,omitempty"`
}

func (x *PovApiGetLastNHourInfo) Reset() {
	*x = PovApiGetLastNHourInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PovApiGetLastNHourInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PovApiGetLastNHourInfo) ProtoMessage() {}

func (x *PovApiGetLastNHourInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PovApiGetLastNHourInfo.ProtoReflect.Descriptor instead.
func (*PovApiGetLastNHourInfo) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{17}
}

func (x *PovApiGetLastNHourInfo) GetMaxTxPerBlock() uint32 {
	if x != nil {
		return x.MaxTxPerBlock
	}
	return 0
}

func (x *PovApiGetLastNHourInfo) GetMinTxPerBlock() uint32 {
	if x != nil {
		return x.MinTxPerBlock
	}
	return 0
}

func (x *PovApiGetLastNHourInfo) GetAvgTxPerBlock() uint32 {
	if x != nil {
		return x.AvgTxPerBlock
	}
	return 0
}

func (x *PovApiGetLastNHourInfo) GetMaxTxPerHour() uint32 {
	if x != nil {
		return x.MaxTxPerHour
	}
	return 0
}

func (x *PovApiGetLastNHourInfo) GetMinTxPerHour() uint32 {
	if x != nil {
		return x.MinTxPerHour
	}
	return 0
}

func (x *PovApiGetLastNHourInfo) GetAvgTxPerHour() uint32 {
	if x != nil {
		return x.AvgTxPerHour
	}
	return 0
}

func (x *PovApiGetLastNHourInfo) GetMaxBlockPerHour() uint32 {
	if x != nil {
		return x.MaxBlockPerHour
	}
	return 0
}

func (x *PovApiGetLastNHourInfo) GetMinBlockPerHour() uint32 {
	if x != nil {
		return x.MinBlockPerHour
	}
	return 0
}

func (x *PovApiGetLastNHourInfo) GetAvgBlockPerHour() uint32 {
	if x != nil {
		return x.AvgBlockPerHour
	}
	return 0
}

func (x *PovApiGetLastNHourInfo) GetAllBlockNum() uint32 {
	if x != nil {
		return x.AllBlockNum
	}
	return 0
}

func (x *PovApiGetLastNHourInfo) GetAllTxNum() uint32 {
	if x != nil {
		return x.AllTxNum
	}
	return 0
}

func (x *PovApiGetLastNHourInfo) GetSha256DBlockNum() uint32 {
	if x != nil {
		return x.Sha256DBlockNum
	}
	return 0
}

func (x *PovApiGetLastNHourInfo) GetX11BlockNum() uint32 {
	if x != nil {
		return x.X11BlockNum
	}
	return 0
}

func (x *PovApiGetLastNHourInfo) GetScryptBlockNum() uint32 {
	if x != nil {
		return x.ScryptBlockNum
	}
	return 0
}

func (x *PovApiGetLastNHourInfo) GetAuxBlockNum() uint32 {
	if x != nil {
		return x.AuxBlockNum
	}
	return 0
}

func (x *PovApiGetLastNHourInfo) GetHourItemList() []*PovApiGetLastNHourItem {
	if x != nil {
		return x.HourItemList
	}
	return nil
}

type HeadersByHeightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Count  uint64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Asc    bool   `protobuf:"varint,3,opt,name=asc,proto3" json:"asc,omitempty"`
}

func (x *HeadersByHeightRequest) Reset() {
	*x = HeadersByHeightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeadersByHeightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeadersByHeightRequest) ProtoMessage() {}

func (x *HeadersByHeightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeadersByHeightRequest.ProtoReflect.Descriptor instead.
func (*HeadersByHeightRequest) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{18}
}

func (x *HeadersByHeightRequest) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *HeadersByHeightRequest) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *HeadersByHeightRequest) GetAsc() bool {
	if x != nil {
		return x.Asc
	}
	return false
}

type BlockByHeightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height   uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	TxOffset uint32 `protobuf:"varint,2,opt,name=txOffset,proto3" json:"txOffset,omitempty"`
	TxLimit  uint32 `protobuf:"varint,3,opt,name=txLimit,proto3" json:"txLimit,omitempty"`
}

func (x *BlockByHeightRequest) Reset() {
	*x = BlockByHeightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockByHeightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockByHeightRequest) ProtoMessage() {}

func (x *BlockByHeightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockByHeightRequest.ProtoReflect.Descriptor instead.
func (*BlockByHeightRequest) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{19}
}

func (x *BlockByHeightRequest) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BlockByHeightRequest) GetTxOffset() uint32 {
	if x != nil {
		return x.TxOffset
	}
	return 0
}

func (x *BlockByHeightRequest) GetTxLimit() uint32 {
	if x != nil {
		return x.TxLimit
	}
	return 0
}

type BlockByHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash string `protobuf:"bytes,1,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	TxOffset  uint32 `protobuf:"varint,2,opt,name=txOffset,proto3" json:"txOffset,omitempty"`
	TxLimit   uint32 `protobuf:"varint,3,opt,name=txLimit,proto3" json:"txLimit,omitempty"`
}

func (x *BlockByHashRequest) Reset() {
	*x = BlockByHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockByHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockByHashRequest) ProtoMessage() {}

func (x *BlockByHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockByHashRequest.ProtoReflect.Descriptor instead.
func (*BlockByHashRequest) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{20}
}

func (x *BlockByHashRequest) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *BlockByHashRequest) GetTxOffset() uint32 {
	if x != nil {
		return x.TxOffset
	}
	return 0
}

func (x *BlockByHashRequest) GetTxLimit() uint32 {
	if x != nil {
		return x.TxLimit
	}
	return 0
}

type LatestBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxLimit  uint32 `protobuf:"varint,1,opt,name=txLimit,proto3" json:"txLimit,omitempty"`
	TxOffset uint32 `protobuf:"varint,2,opt,name=txOffset,proto3" json:"txOffset,omitempty"`
}

func (x *LatestBlockRequest) Reset() {
	*x = LatestBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestBlockRequest) ProtoMessage() {}

func (x *LatestBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestBlockRequest.ProtoReflect.Descriptor instead.
func (*LatestBlockRequest) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{21}
}

func (x *LatestBlockRequest) GetTxLimit() uint32 {
	if x != nil {
		return x.TxLimit
	}
	return 0
}

func (x *LatestBlockRequest) GetTxOffset() uint32 {
	if x != nil {
		return x.TxOffset
	}
	return 0
}

type TransactionByBlockHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index     uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	BlockHash string `protobuf:"bytes,2,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
}

func (x *TransactionByBlockHashRequest) Reset() {
	*x = TransactionByBlockHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionByBlockHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionByBlockHashRequest) ProtoMessage() {}

func (x *TransactionByBlockHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionByBlockHashRequest.ProtoReflect.Descriptor instead.
func (*TransactionByBlockHashRequest) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{22}
}

func (x *TransactionByBlockHashRequest) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TransactionByBlockHashRequest) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

type TransactionByBlockHeightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Index  uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *TransactionByBlockHeightRequest) Reset() {
	*x = TransactionByBlockHeightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionByBlockHeightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionByBlockHeightRequest) ProtoMessage() {}

func (x *TransactionByBlockHeightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionByBlockHeightRequest.ProtoReflect.Descriptor instead.
func (*TransactionByBlockHeightRequest) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{23}
}

func (x *TransactionByBlockHeightRequest) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *TransactionByBlockHeightRequest) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type AccountStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	StateHash string `protobuf:"bytes,2,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
}

func (x *AccountStateRequest) Reset() {
	*x = AccountStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountStateRequest) ProtoMessage() {}

func (x *AccountStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountStateRequest.ProtoReflect.Descriptor instead.
func (*AccountStateRequest) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{24}
}

func (x *AccountStateRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AccountStateRequest) GetStateHash() string {
	if x != nil {
		return x.StateHash
	}
	return ""
}

type AccountStateByHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	BlockHash string `protobuf:"bytes,2,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
}

func (x *AccountStateByHashRequest) Reset() {
	*x = AccountStateByHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountStateByHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountStateByHashRequest) ProtoMessage() {}

func (x *AccountStateByHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountStateByHashRequest.ProtoReflect.Descriptor instead.
func (*AccountStateByHashRequest) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{25}
}

func (x *AccountStateByHashRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AccountStateByHashRequest) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

type AccountStateByHeightRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Height  uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *AccountStateByHeightRequest) Reset() {
	*x = AccountStateByHeightRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountStateByHeightRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountStateByHeightRequest) ProtoMessage() {}

func (x *AccountStateByHeightRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountStateByHeightRequest.ProtoReflect.Descriptor instead.
func (*AccountStateByHeightRequest) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{26}
}

func (x *AccountStateByHeightRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AccountStateByHeightRequest) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

type HashInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Lookup uint64 `protobuf:"varint,2,opt,name=lookup,proto3" json:"lookup,omitempty"`
}

func (x *HashInfoRequest) Reset() {
	*x = HashInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashInfoRequest) ProtoMessage() {}

func (x *HashInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashInfoRequest.ProtoReflect.Descriptor instead.
func (*HashInfoRequest) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{27}
}

func (x *HashInfoRequest) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *HashInfoRequest) GetLookup() uint64 {
	if x != nil {
		return x.Lookup
	}
	return 0
}

type StartMiningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinerAddr string `protobuf:"bytes,1,opt,name=minerAddr,proto3" json:"minerAddr,omitempty"`
	AlgoName  string `protobuf:"bytes,2,opt,name=algoName,proto3" json:"algoName,omitempty"`
}

func (x *StartMiningRequest) Reset() {
	*x = StartMiningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartMiningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartMiningRequest) ProtoMessage() {}

func (x *StartMiningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartMiningRequest.ProtoReflect.Descriptor instead.
func (*StartMiningRequest) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{28}
}

func (x *StartMiningRequest) GetMinerAddr() string {
	if x != nil {
		return x.MinerAddr
	}
	return ""
}

func (x *StartMiningRequest) GetAlgoName() string {
	if x != nil {
		return x.AlgoName
	}
	return ""
}

type WorkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinerAddr string `protobuf:"bytes,1,opt,name=minerAddr,proto3" json:"minerAddr,omitempty"`
	AlgoName  string `protobuf:"bytes,2,opt,name=algoName,proto3" json:"algoName,omitempty"`
}

func (x *WorkRequest) Reset() {
	*x = WorkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkRequest) ProtoMessage() {}

func (x *WorkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkRequest.ProtoReflect.Descriptor instead.
func (*WorkRequest) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{29}
}

func (x *WorkRequest) GetMinerAddr() string {
	if x != nil {
		return x.MinerAddr
	}
	return ""
}

func (x *WorkRequest) GetAlgoName() string {
	if x != nil {
		return x.AlgoName
	}
	return ""
}

type LastNHourInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndHeight uint64 `protobuf:"varint,1,opt,name=endHeight,proto3" json:"endHeight,omitempty"`
	TimeSpan  uint32 `protobuf:"varint,2,opt,name=timeSpan,proto3" json:"timeSpan,omitempty"`
}

func (x *LastNHourInfoRequest) Reset() {
	*x = LastNHourInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastNHourInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastNHourInfoRequest) ProtoMessage() {}

func (x *LastNHourInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastNHourInfoRequest.ProtoReflect.Descriptor instead.
func (*LastNHourInfoRequest) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{30}
}

func (x *LastNHourInfoRequest) GetEndHeight() uint64 {
	if x != nil {
		return x.EndHeight
	}
	return 0
}

func (x *LastNHourInfoRequest) GetTimeSpan() uint32 {
	if x != nil {
		return x.TimeSpan
	}
	return 0
}

type RepStatesByHeightRequset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *types.PovHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Acc    string           `protobuf:"bytes,2,opt,name=acc,proto3" json:"acc,omitempty"`
}

func (x *RepStatesByHeightRequset) Reset() {
	*x = RepStatesByHeightRequset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepStatesByHeightRequset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepStatesByHeightRequset) ProtoMessage() {}

func (x *RepStatesByHeightRequset) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepStatesByHeightRequset.ProtoReflect.Descriptor instead.
func (*RepStatesByHeightRequset) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{31}
}

func (x *RepStatesByHeightRequset) GetHeader() *types.PovHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RepStatesByHeightRequset) GetAcc() string {
	if x != nil {
		return x.Acc
	}
	return ""
}

type PovApiGetWork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkHash      string   `protobuf:"bytes,1,opt,name=workHash,proto3" json:"workHash,omitempty"`
	Version       uint32   `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Previous      string   `protobuf:"bytes,3,opt,name=previous,proto3" json:"previous,omitempty"`
	Bits          uint32   `protobuf:"varint,4,opt,name=bits,proto3" json:"bits,omitempty"`
	Height        uint64   `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	MinTime       uint32   `protobuf:"varint,6,opt,name=minTime,proto3" json:"minTime,omitempty"`
	MerkleBranch  []string `protobuf:"bytes,7,rep,name=merkleBranch,proto3" json:"merkleBranch,omitempty"`
	CoinBaseData1 string   `protobuf:"bytes,8,opt,name=coinBaseData1,proto3" json:"coinBaseData1,omitempty"` //bytes
	CoinBaseData2 string   `protobuf:"bytes,9,opt,name=coinBaseData2,proto3" json:"coinBaseData2,omitempty"` //bytes
}

func (x *PovApiGetWork) Reset() {
	*x = PovApiGetWork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PovApiGetWork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PovApiGetWork) ProtoMessage() {}

func (x *PovApiGetWork) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PovApiGetWork.ProtoReflect.Descriptor instead.
func (*PovApiGetWork) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{32}
}

func (x *PovApiGetWork) GetWorkHash() string {
	if x != nil {
		return x.WorkHash
	}
	return ""
}

func (x *PovApiGetWork) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *PovApiGetWork) GetPrevious() string {
	if x != nil {
		return x.Previous
	}
	return ""
}

func (x *PovApiGetWork) GetBits() uint32 {
	if x != nil {
		return x.Bits
	}
	return 0
}

func (x *PovApiGetWork) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *PovApiGetWork) GetMinTime() uint32 {
	if x != nil {
		return x.MinTime
	}
	return 0
}

func (x *PovApiGetWork) GetMerkleBranch() []string {
	if x != nil {
		return x.MerkleBranch
	}
	return nil
}

func (x *PovApiGetWork) GetCoinBaseData1() string {
	if x != nil {
		return x.CoinBaseData1
	}
	return ""
}

func (x *PovApiGetWork) GetCoinBaseData2() string {
	if x != nil {
		return x.CoinBaseData2
	}
	return ""
}

type PovApiGetMiningInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SyncState          int32           `protobuf:"varint,1,opt,name=syncState,proto3" json:"syncState,omitempty"`
	SyncStateStr       string          `protobuf:"bytes,2,opt,name=syncStateStr,proto3" json:"syncStateStr,omitempty"`
	CurrentBlockHeight uint64          `protobuf:"varint,3,opt,name=currentBlockHeight,proto3" json:"currentBlockHeight,omitempty"`
	CurrentBlockHash   string          `protobuf:"bytes,4,opt,name=currentBlockHash,proto3" json:"currentBlockHash,omitempty"`
	CurrentBlockSize   uint32          `protobuf:"varint,5,opt,name=currentBlockSize,proto3" json:"currentBlockSize,omitempty"`
	CurrentBlockTx     uint32          `protobuf:"varint,6,opt,name=currentBlockTx,proto3" json:"currentBlockTx,omitempty"`
	CurrentBlockAlgo   string          `protobuf:"bytes,7,opt,name=currentBlockAlgo,proto3" json:"currentBlockAlgo,omitempty"`
	PooledTx           uint32          `protobuf:"varint,8,opt,name=pooledTx,proto3" json:"pooledTx,omitempty"`
	Difficulty         float64         `protobuf:"fixed64,9,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	HashInfo           *PovApiHashInfo `protobuf:"bytes,10,opt,name=hashInfo,proto3" json:"hashInfo,omitempty"`
	MinerAddr          string          `protobuf:"bytes,11,opt,name=minerAddr,proto3" json:"minerAddr,omitempty"`
	AlgoName           string          `protobuf:"bytes,12,opt,name=algoName,proto3" json:"algoName,omitempty"`
	AlgoEfficiency     uint32          `protobuf:"varint,13,opt,name=algoEfficiency,proto3" json:"algoEfficiency,omitempty"`
	CpuMining          bool            `protobuf:"varint,14,opt,name=cpuMining,proto3" json:"cpuMining,omitempty"`
}

func (x *PovApiGetMiningInfo) Reset() {
	*x = PovApiGetMiningInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PovApiGetMiningInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PovApiGetMiningInfo) ProtoMessage() {}

func (x *PovApiGetMiningInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PovApiGetMiningInfo.ProtoReflect.Descriptor instead.
func (*PovApiGetMiningInfo) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{33}
}

func (x *PovApiGetMiningInfo) GetSyncState() int32 {
	if x != nil {
		return x.SyncState
	}
	return 0
}

func (x *PovApiGetMiningInfo) GetSyncStateStr() string {
	if x != nil {
		return x.SyncStateStr
	}
	return ""
}

func (x *PovApiGetMiningInfo) GetCurrentBlockHeight() uint64 {
	if x != nil {
		return x.CurrentBlockHeight
	}
	return 0
}

func (x *PovApiGetMiningInfo) GetCurrentBlockHash() string {
	if x != nil {
		return x.CurrentBlockHash
	}
	return ""
}

func (x *PovApiGetMiningInfo) GetCurrentBlockSize() uint32 {
	if x != nil {
		return x.CurrentBlockSize
	}
	return 0
}

func (x *PovApiGetMiningInfo) GetCurrentBlockTx() uint32 {
	if x != nil {
		return x.CurrentBlockTx
	}
	return 0
}

func (x *PovApiGetMiningInfo) GetCurrentBlockAlgo() string {
	if x != nil {
		return x.CurrentBlockAlgo
	}
	return ""
}

func (x *PovApiGetMiningInfo) GetPooledTx() uint32 {
	if x != nil {
		return x.PooledTx
	}
	return 0
}

func (x *PovApiGetMiningInfo) GetDifficulty() float64 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *PovApiGetMiningInfo) GetHashInfo() *PovApiHashInfo {
	if x != nil {
		return x.HashInfo
	}
	return nil
}

func (x *PovApiGetMiningInfo) GetMinerAddr() string {
	if x != nil {
		return x.MinerAddr
	}
	return ""
}

func (x *PovApiGetMiningInfo) GetAlgoName() string {
	if x != nil {
		return x.AlgoName
	}
	return ""
}

func (x *PovApiGetMiningInfo) GetAlgoEfficiency() uint32 {
	if x != nil {
		return x.AlgoEfficiency
	}
	return 0
}

func (x *PovApiGetMiningInfo) GetCpuMining() bool {
	if x != nil {
		return x.CpuMining
	}
	return false
}

type PovApiHashInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainHashPS   uint64 `protobuf:"varint,1,opt,name=chainHashPS,proto3" json:"chainHashPS,omitempty"`
	Sha256DHashPS uint64 `protobuf:"varint,2,opt,name=sha256dHashPS,proto3" json:"sha256dHashPS,omitempty"`
	ScryptHashPS  uint64 `protobuf:"varint,3,opt,name=scryptHashPS,proto3" json:"scryptHashPS,omitempty"`
	X11HashPS     uint64 `protobuf:"varint,4,opt,name=x11HashPS,proto3" json:"x11HashPS,omitempty"`
}

func (x *PovApiHashInfo) Reset() {
	*x = PovApiHashInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PovApiHashInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PovApiHashInfo) ProtoMessage() {}

func (x *PovApiHashInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PovApiHashInfo.ProtoReflect.Descriptor instead.
func (*PovApiHashInfo) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{34}
}

func (x *PovApiHashInfo) GetChainHashPS() uint64 {
	if x != nil {
		return x.ChainHashPS
	}
	return 0
}

func (x *PovApiHashInfo) GetSha256DHashPS() uint64 {
	if x != nil {
		return x.Sha256DHashPS
	}
	return 0
}

func (x *PovApiHashInfo) GetScryptHashPS() uint64 {
	if x != nil {
		return x.ScryptHashPS
	}
	return 0
}

func (x *PovApiHashInfo) GetX11HashPS() uint64 {
	if x != nil {
		return x.X11HashPS
	}
	return 0
}

type PovApiCheckStateRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountStates map[string]*types.PovAccountState `protobuf:"bytes,1,rep,name=accountStates,proto3" json:"accountStates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AccountMetas  map[string]*types.AccountMeta     `protobuf:"bytes,2,rep,name=accountMetas,proto3" json:"accountMetas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RepStates     map[string]*types.PovRepState     `protobuf:"bytes,3,rep,name=repStates,proto3" json:"repStates,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RepMetas      map[string]*types.Benefit         `protobuf:"bytes,4,rep,name=repMetas,proto3" json:"repMetas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PovApiCheckStateRsp) Reset() {
	*x = PovApiCheckStateRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pov_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PovApiCheckStateRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PovApiCheckStateRsp) ProtoMessage() {}

func (x *PovApiCheckStateRsp) ProtoReflect() protoreflect.Message {
	mi := &file_pov_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PovApiCheckStateRsp.ProtoReflect.Descriptor instead.
func (*PovApiCheckStateRsp) Descriptor() ([]byte, []int) {
	return file_pov_proto_rawDescGZIP(), []int{35}
}

func (x *PovApiCheckStateRsp) GetAccountStates() map[string]*types.PovAccountState {
	if x != nil {
		return x.AccountStates
	}
	return nil
}

func (x *PovApiCheckStateRsp) GetAccountMetas() map[string]*types.AccountMeta {
	if x != nil {
		return x.AccountMetas
	}
	return nil
}

func (x *PovApiCheckStateRsp) GetRepStates() map[string]*types.PovRepState {
	if x != nil {
		return x.RepStates
	}
	return nil
}

func (x *PovApiCheckStateRsp) GetRepMetas() map[string]*types.Benefit {
	if x != nil {
		return x.RepMetas
	}
	return nil
}

var File_pov_proto protoreflect.FileDescriptor

var file_pov_proto_rawDesc = []byte{
	0x0a, 0x09, 0x70, 0x6f, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x6f, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x6d, 0x0a, 0x09, 0x50, 0x6f, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x6f, 0x76, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x70, 0x6f, 0x76, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x79,
	0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x22, 0xc3,
	0x02, 0x0a, 0x0c, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x2c, 0x0a, 0x06, 0x62, 0x61, 0x73, 0x48, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x76, 0x42, 0x61, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x62, 0x61, 0x73, 0x48, 0x64, 0x72, 0x12, 0x2b, 0x0a,
	0x06, 0x61, 0x75, 0x78, 0x48, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x76, 0x41, 0x75, 0x78, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x61, 0x75, 0x78, 0x48, 0x64, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x63, 0x62,
	0x54, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x50, 0x6f, 0x76, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x54, 0x78, 0x52, 0x04,
	0x63, 0x62, 0x54, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x67, 0x6f, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6c, 0x67, 0x6f, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6c, 0x67, 0x6f, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x6c, 0x67, 0x6f, 0x45, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x72, 0x6d,
	0x42, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x6f, 0x72, 0x6d,
	0x42, 0x69, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x6f, 0x72, 0x6d, 0x44, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6e, 0x6f,
	0x72, 0x6d, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e,
	0x61, 0x6c, 0x67, 0x6f, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x6c, 0x67, 0x6f, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x22, 0x58, 0x0a, 0x11, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2d, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x8b,
	0x02, 0x0a, 0x0b, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x28,
	0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x76, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50,
	0x6f, 0x76, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x6c, 0x67, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x6c, 0x67, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x6c, 0x67, 0x6f,
	0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x41, 0x6c, 0x67, 0x6f, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x72, 0x6d, 0x42, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x4e, 0x6f, 0x72, 0x6d, 0x42, 0x69, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x4e, 0x6f, 0x72, 0x6d, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x4e, 0x6f, 0x72, 0x6d, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x6c, 0x67, 0x6f, 0x44, 0x69, 0x66, 0x66,
	0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x41, 0x6c,
	0x67, 0x6f, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x22, 0xb8, 0x01, 0x0a,
	0x0b, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x76, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x50, 0x6f, 0x76, 0x52, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x76, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xe5, 0x03, 0x0a, 0x0f, 0x50, 0x6f, 0x76, 0x41,
	0x70, 0x69, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x40, 0x0a, 0x08, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x72,
	0x65, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x52, 0x65, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x72, 0x65, 0x70,
	0x73, 0x12, 0x43, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76,
	0x41, 0x70, 0x69, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x1a, 0x53, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x50, 0x6f, 0x76, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x09, 0x52,
	0x65, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x50, 0x6f, 0x76, 0x52, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x76, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xb0, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x52, 0x65, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x33, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x52, 0x65, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x72, 0x65, 0x70, 0x73, 0x1a, 0x4b, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x76, 0x52,
	0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x3a, 0x0a, 0x10, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbf,
	0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x54, 0x78, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x08, 0x74, 0x78, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x76, 0x54, 0x78, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52,
	0x08, 0x74, 0x78, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x54, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x76, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x61, 0x73,
	0x65, 0x54, 0x78, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x54, 0x78, 0x12,
	0x2f, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x78,
	0x22, 0xf8, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x76, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6f, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x6f, 0x76, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6f, 0x76,
	0x42, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x70, 0x6f, 0x76, 0x42, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x70, 0x6f, 0x76, 0x41, 0x6c, 0x6c, 0x54, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x6f, 0x76, 0x41, 0x6c, 0x6c, 0x54, 0x78, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6f, 0x76, 0x43, 0x62, 0x54, 0x78, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x6f, 0x76, 0x43, 0x62,
	0x54, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x6f, 0x76, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x54, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x70, 0x6f, 0x76, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x78, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x52, 0x0a, 0x08, 0x50,
	0x6f, 0x76, 0x41, 0x70, 0x69, 0x54, 0x44, 0x12, 0x28, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x50, 0x6f, 0x76, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x02, 0x74, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x76, 0x54, 0x44, 0x52, 0x02, 0x74, 0x64, 0x22,
	0xbe, 0x03, 0x0a, 0x10, 0x50, 0x6f, 0x76, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61,
	0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73,
	0x48, 0x6f, 0x75, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x73, 0x44, 0x61, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44, 0x61, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x22, 0xf5, 0x03, 0x0a, 0x0d, 0x50, 0x6f, 0x76, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x6f, 0x75, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x68, 0x6f, 0x75,
	0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x64, 0x61, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x64, 0x61, 0x79, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x6f, 0x76, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x4d,
	0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x6d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a,
	0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x1a, 0x56, 0x0a, 0x0f, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76,
	0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x84, 0x03, 0x0a, 0x0e, 0x50, 0x6f, 0x76,
	0x52, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12,
	0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6d,
	0x61, 0x69, 0x6e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12,
	0x2e, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2e, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22,
	0xdf, 0x02, 0x0a, 0x0b, 0x50, 0x6f, 0x76, 0x52, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x72, 0x65, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x72,
	0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x52, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x52, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x72, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x52, 0x0a,
	0x0d, 0x52, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x52, 0x65, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x97, 0x02, 0x0a, 0x10, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x61, 0x73, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2b,
	0x0a, 0x06, 0x61, 0x75, 0x78, 0x50, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x76, 0x41, 0x75, 0x78, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x61, 0x75, 0x78, 0x50, 0x6f, 0x77, 0x22, 0xbe, 0x03, 0x0a, 0x16,
	0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x48, 0x6f,
	0x75, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6c,
	0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x6c, 0x6c, 0x54, 0x78, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x61, 0x6c, 0x6c, 0x54, 0x78, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x4d,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73,
	0x68, 0x61, 0x32, 0x35, 0x36, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x20,
	0x0a, 0x0b, 0x78, 0x31, 0x31, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x78, 0x31, 0x31, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d,
	0x12, 0x26, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x79, 0x70, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x75, 0x78, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61,
	0x75, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61,
	0x78, 0x54, 0x78, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x54, 0x78, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x54, 0x78, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x54, 0x78, 0x50, 0x65,
	0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x76, 0x67, 0x54, 0x78, 0x50,
	0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61,
	0x76, 0x67, 0x54, 0x78, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x8b, 0x05, 0x0a,
	0x16, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x48,
	0x6f, 0x75, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x54, 0x78,
	0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x6d, 0x61, 0x78, 0x54, 0x78, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x24, 0x0a,
	0x0d, 0x6d, 0x69, 0x6e, 0x54, 0x78, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x54, 0x78, 0x50, 0x65, 0x72, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x76, 0x67, 0x54, 0x78, 0x50, 0x65, 0x72, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x76, 0x67, 0x54,
	0x78, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x54, 0x78, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x6d, 0x61, 0x78, 0x54, 0x78, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x6d, 0x69, 0x6e, 0x54, 0x78, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x54, 0x78, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75,
	0x72, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x67, 0x54, 0x78, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x76, 0x67, 0x54, 0x78, 0x50, 0x65,
	0x72, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x6d, 0x61, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x12,
	0x28, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x48, 0x6f,
	0x75, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x76, 0x67,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x61, 0x76, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x48,
	0x6f, 0x75, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x54, 0x78, 0x4e, 0x75,
	0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x54, 0x78, 0x4e, 0x75,
	0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x32,
	0x35, 0x36, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x78,
	0x31, 0x31, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x78, 0x31, 0x31, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a,
	0x0e, 0x73, 0x63, 0x72, 0x79, 0x70, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x63, 0x72, 0x79, 0x70, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x75, 0x78, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x75, 0x78, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x41, 0x0a, 0x0c, 0x68, 0x6f, 0x75, 0x72, 0x49,
	0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x73, 0x74, 0x4e, 0x48, 0x6f, 0x75, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x68, 0x6f,
	0x75, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x16, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x61, 0x73, 0x63, 0x22, 0x64, 0x0a, 0x14, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x78, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x78, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x74, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x68, 0x0a, 0x12, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x78, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x74, 0x78, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x78,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x78, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x4a, 0x0a, 0x12, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x78,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x78, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x78, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x78, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x22, 0x53, 0x0a, 0x1d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x4f, 0x0a, 0x1f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x4d, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x22, 0x53, 0x0a, 0x19, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x4f, 0x0a, 0x1b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x41, 0x0a, 0x0f, 0x48,
	0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x22, 0x4e,
	0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x67, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6c, 0x67, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x47,
	0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x6c, 0x67, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x6c, 0x67, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x14, 0x4c, 0x61, 0x73, 0x74, 0x4e,
	0x48, 0x6f, 0x75, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x22, 0x56, 0x0a, 0x18, 0x52, 0x65, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x73, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f,
	0x76, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x63, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x63,
	0x63, 0x22, 0x97, 0x02, 0x0a, 0x0d, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x69, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x65, 0x72, 0x6b, 0x6c, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x31,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x61, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x31, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x61, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x69, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x32, 0x22, 0xa2, 0x04, 0x0a, 0x13,
	0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x78, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x6c, 0x67, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x6c, 0x67,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x65, 0x64, 0x54, 0x78, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x65, 0x64, 0x54, 0x78, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x31, 0x0a,
	0x08, 0x68, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x48, 0x61,
	0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x6c, 0x67, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x6c, 0x67, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6c,
	0x67, 0x6f, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x61, 0x6c, 0x67, 0x6f, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x70, 0x75, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x48, 0x61, 0x73, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x48, 0x61, 0x73, 0x68,
	0x50, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x48,
	0x61, 0x73, 0x68, 0x50, 0x53, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x64,
	0x48, 0x61, 0x73, 0x68, 0x50, 0x53, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x68,
	0x61, 0x32, 0x35, 0x36, 0x64, 0x48, 0x61, 0x73, 0x68, 0x50, 0x53, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x48, 0x61, 0x73, 0x68, 0x50, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x79, 0x70, 0x74, 0x48, 0x61, 0x73, 0x68, 0x50, 0x53, 0x12,
	0x1c, 0x0a, 0x09, 0x78, 0x31, 0x31, 0x48, 0x61, 0x73, 0x68, 0x50, 0x53, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x78, 0x31, 0x31, 0x48, 0x61, 0x73, 0x68, 0x50, 0x53, 0x22, 0x99, 0x05,
	0x0a, 0x13, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x73, 0x70, 0x12, 0x53, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x73, 0x70, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x73, 0x70, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x12, 0x47, 0x0a, 0x09,
	0x72, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x73, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x65, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x4d, 0x65, 0x74, 0x61,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x73, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x72, 0x65, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x1a, 0x58, 0x0a, 0x12, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x76, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x50, 0x0a, 0x0e, 0x52, 0x65,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x76, 0x52, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x0d,
	0x52, 0x65, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x86, 0x19, 0x0a, 0x06, 0x50, 0x6f,
	0x76, 0x41, 0x50, 0x49, 0x12, 0x53, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x76, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x19,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x70, 0x6f, 0x76, 0x2f, 0x67, 0x65, 0x74,
	0x50, 0x6f, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x70, 0x6f, 0x76,
	0x2f, 0x67, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x51, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x61,
	0x73, 0x68, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x41, 0x70,
	0x69, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12,
	0x14, 0x2f, 0x70, 0x6f, 0x76, 0x2f, 0x67, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x5c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f,
	0x70, 0x6f, 0x76, 0x2f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x46, 0x69, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6f, 0x76, 0x41, 0x70, 0x69, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x1d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x70, 0x6f, 0x76, 0x2f, 0x67, 0x65, 0x74, 0x46, 0x69, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x78, 0x0a, 0x17, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76,
	0x41, 0x70, 0x69, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x24,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x70, 0x6f, 0x76, 0x2f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x42, 0x79, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x62, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f,
	0x76, 0x41, 0x70, 0x69, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x17, 0x12, 0x15, 0x2f, 0x70, 0x6f, 0x76, 0x2f, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x5c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f,
	0x76, 0x41, 0x70, 0x69, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x15, 0x12, 0x13, 0x2f, 0x70, 0x6f, 0x76, 0x2f, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x5c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x41,
	0x70, 0x69, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12,
	0x13, 0x2f, 0x70, 0x6f, 0x76, 0x2f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x51, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48,
	0x61, 0x73, 0x68, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x41,
	0x70, 0x69, 0x54, 0x78, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x15, 0x12, 0x13, 0x2f, 0x70, 0x6f, 0x76, 0x2f, 0x67, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x90, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x41,
	0x70, 0x69, 0x54, 0x78, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x28, 0x12, 0x26, 0x2f, 0x70, 0x6f, 0x76, 0x2f, 0x67, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x96, 0x01, 0x0a, 0x23, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41, 0x6e, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x54, 0x78, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x70, 0x6f, 0x76, 0x2f,
	0x67, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x41, 0x6e, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x5f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x41, 0x70,
	0x69, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14,
	0x2f, 0x70, 0x6f, 0x76, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x5f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x12, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x70, 0x6f, 0x76, 0x2f,
	0x67, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x7b, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f,
	0x76, 0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x21, 0x12, 0x1f, 0x2f, 0x70, 0x6f, 0x76, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x81, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x70, 0x6f, 0x76, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x69, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x61, 0x73,
	0x68, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69,
	0x52, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21,
	0x12, 0x1f, 0x2f, 0x70, 0x6f, 0x76, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x69, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x52, 0x65, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x70, 0x6f,
	0x76, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x6f, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x42,
	0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x52, 0x65, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x70, 0x6f, 0x76,
	0x2f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x5c, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6f, 0x76, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x1b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x70, 0x6f, 0x76, 0x2f, 0x67, 0x65, 0x74,
	0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x10, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x70,
	0x6f, 0x76, 0x2f, 0x67, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x4d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x52, 0x65, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f,
	0x70, 0x6f, 0x76, 0x2f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x56, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x1a, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x76, 0x4d, 0x69, 0x6e,
	0x65, 0x72, 0x44, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x12, 0x14, 0x2f, 0x70, 0x6f, 0x76, 0x2f, 0x67, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72,
	0x44, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x12, 0x66, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x69,
	0x6e, 0x65, 0x72, 0x44, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x1a, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x76, 0x4d, 0x69, 0x6e,
	0x65, 0x72, 0x44, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1e, 0x12, 0x1c, 0x2f, 0x70, 0x6f, 0x76, 0x2f, 0x67, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x65, 0x72,
	0x44, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x53, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x44, 0x61, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x1a, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x76, 0x44, 0x69, 0x66, 0x66,
	0x44, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12,
	0x13, 0x2f, 0x70, 0x6f, 0x76, 0x2f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x44, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x12, 0x63, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x44,
	0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x15, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x76, 0x44, 0x69, 0x66, 0x66, 0x44, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x70,
	0x6f, 0x76, 0x2f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x66, 0x66, 0x44, 0x61, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x56, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x48,
	0x61, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12,
	0x10, 0x2f, 0x70, 0x6f, 0x76, 0x2f, 0x67, 0x65, 0x74, 0x48, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x5a, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x70, 0x6f,
	0x76, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x55, 0x0a,
	0x0a, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x17, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x70, 0x6f, 0x76, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x4d, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x5f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69, 0x47, 0x65, 0x74, 0x4d,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x12, 0x12, 0x2f, 0x70, 0x6f, 0x76, 0x2f, 0x67, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76,
	0x41, 0x70, 0x69, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x70, 0x6f, 0x76, 0x2f, 0x67, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x12, 0x70, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x48, 0x6f, 0x75, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x73,
	0x74, 0x4e, 0x48, 0x6f, 0x75, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x76, 0x41, 0x70, 0x69,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x48, 0x6f, 0x75, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x70, 0x6f, 0x76, 0x2f, 0x67,
	0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x48, 0x6f, 0x75, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x3a,
	0x01, 0x2a, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pov_proto_rawDescOnce sync.Once
	file_pov_proto_rawDescData = file_pov_proto_rawDesc
)

func file_pov_proto_rawDescGZIP() []byte {
	file_pov_proto_rawDescOnce.Do(func() {
		file_pov_proto_rawDescData = protoimpl.X.CompressGZIP(file_pov_proto_rawDescData)
	})
	return file_pov_proto_rawDescData
}

var file_pov_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_pov_proto_goTypes = []interface{}{
	(*PovStatus)(nil),                       // 0: proto.PovStatus
	(*PovApiHeader)(nil),                    // 1: proto.PovApiHeader
	(*PovApiBatchHeader)(nil),               // 2: proto.PovApiBatchHeader
	(*PovApiBlock)(nil),                     // 3: proto.PovApiBlock
	(*PovApiState)(nil),                     // 4: proto.PovApiState
	(*PovApiDumpState)(nil),                 // 5: proto.PovApiDumpState
	(*PovApiRepState)(nil),                  // 6: proto.PovApiRepState
	(*PovApiKeyValPair)(nil),                // 7: proto.PovApiKeyValPair
	(*PovApiTxLookup)(nil),                  // 8: proto.PovApiTxLookup
	(*PovLedgerStats)(nil),                  // 9: proto.PovLedgerStats
	(*PovApiTD)(nil),                        // 10: proto.PovApiTD
	(*PovMinerStatItem)(nil),                // 11: proto.PovMinerStatItem
	(*PovMinerStats)(nil),                   // 12: proto.PovMinerStats
	(*PovRepStatItem)(nil),                  // 13: proto.PovRepStatItem
	(*PovRepStats)(nil),                     // 14: proto.PovRepStats
	(*PovApiSubmitWork)(nil),                // 15: proto.PovApiSubmitWork
	(*PovApiGetLastNHourItem)(nil),          // 16: proto.PovApiGetLastNHourItem
	(*PovApiGetLastNHourInfo)(nil),          // 17: proto.PovApiGetLastNHourInfo
	(*HeadersByHeightRequest)(nil),          // 18: proto.HeadersByHeightRequest
	(*BlockByHeightRequest)(nil),            // 19: proto.BlockByHeightRequest
	(*BlockByHashRequest)(nil),              // 20: proto.BlockByHashRequest
	(*LatestBlockRequest)(nil),              // 21: proto.LatestBlockRequest
	(*TransactionByBlockHashRequest)(nil),   // 22: proto.TransactionByBlockHashRequest
	(*TransactionByBlockHeightRequest)(nil), // 23: proto.TransactionByBlockHeightRequest
	(*AccountStateRequest)(nil),             // 24: proto.AccountStateRequest
	(*AccountStateByHashRequest)(nil),       // 25: proto.AccountStateByHashRequest
	(*AccountStateByHeightRequest)(nil),     // 26: proto.AccountStateByHeightRequest
	(*HashInfoRequest)(nil),                 // 27: proto.HashInfoRequest
	(*StartMiningRequest)(nil),              // 28: proto.StartMiningRequest
	(*WorkRequest)(nil),                     // 29: proto.WorkRequest
	(*LastNHourInfoRequest)(nil),            // 30: proto.LastNHourInfoRequest
	(*RepStatesByHeightRequset)(nil),        // 31: proto.RepStatesByHeightRequset
	(*PovApiGetWork)(nil),                   // 32: proto.PovApiGetWork
	(*PovApiGetMiningInfo)(nil),             // 33: proto.PovApiGetMiningInfo
	(*PovApiHashInfo)(nil),                  // 34: proto.PovApiHashInfo
	(*PovApiCheckStateRsp)(nil),             // 35: proto.PovApiCheckStateRsp
	nil,                                     // 36: proto.PovApiDumpState.AccountsEntry
	nil,                                     // 37: proto.PovApiDumpState.RepsEntry
	nil,                                     // 38: proto.PovApiDumpState.ContractsEntry
	nil,                                     // 39: proto.PovApiRepState.RepsEntry
	nil,                                     // 40: proto.PovMinerStats.MinerStatsEntry
	nil,                                     // 41: proto.PovRepStats.RepStatsEntry
	nil,                                     // 42: proto.PovApiCheckStateRsp.AccountStatesEntry
	nil,                                     // 43: proto.PovApiCheckStateRsp.AccountMetasEntry
	nil,                                     // 44: proto.PovApiCheckStateRsp.RepStatesEntry
	nil,                                     // 45: proto.PovApiCheckStateRsp.RepMetasEntry
	(*types.PovBaseHeader)(nil),             // 46: types.PovBaseHeader
	(*types.PovAuxHeader)(nil),              // 47: types.PovAuxHeader
	(*types.PovCoinBaseTx)(nil),             // 48: types.PovCoinBaseTx
	(*types.PovHeader)(nil),                 // 49: types.PovHeader
	(*types.PovBody)(nil),                   // 50: types.PovBody
	(*types.PovAccountState)(nil),           // 51: types.PovAccountState
	(*types.PovRepState)(nil),               // 52: types.PovRepState
	(*types.PovContractState)(nil),          // 53: types.PovContractState
	(*types.PovTxLookup)(nil),               // 54: types.PovTxLookup
	(*types.StateBlock)(nil),                // 55: types.StateBlock
	(*types.PovTD)(nil),                     // 56: types.PovTD
	(*types.AccountMeta)(nil),               // 57: types.AccountMeta
	(*types.Benefit)(nil),                   // 58: types.Benefit
	(*empty.Empty)(nil),                     // 59: google.protobuf.Empty
	(*UInt64)(nil),                          // 60: proto.UInt64
	(*types.Hash)(nil),                      // 61: types.Hash
	(*types.Address)(nil),                   // 62: types.Address
	(*types.Addresses)(nil),                 // 63: types.Addresses
	(*UInt32)(nil),                          // 64: proto.UInt32
	(*types.PovMinerDayStat)(nil),           // 65: types.PovMinerDayStat
	(*types.PovDiffDayStat)(nil),            // 66: types.PovDiffDayStat
}
var file_pov_proto_depIdxs = []int32{
	46, // 0: proto.PovApiHeader.basHdr:type_name -> types.PovBaseHeader
	47, // 1: proto.PovApiHeader.auxHdr:type_name -> types.PovAuxHeader
	48, // 2: proto.PovApiHeader.cbTx:type_name -> types.PovCoinBaseTx
	1,  // 3: proto.PovApiBatchHeader.headers:type_name -> proto.PovApiHeader
	49, // 4: proto.PovApiBlock.Header:type_name -> types.PovHeader
	50, // 5: proto.PovApiBlock.Body:type_name -> types.PovBody
	51, // 6: proto.PovApiState.accountState:type_name -> types.PovAccountState
	52, // 7: proto.PovApiState.repState:type_name -> types.PovRepState
	53, // 8: proto.PovApiState.contractState:type_name -> types.PovContractState
	36, // 9: proto.PovApiDumpState.accounts:type_name -> proto.PovApiDumpState.AccountsEntry
	37, // 10: proto.PovApiDumpState.reps:type_name -> proto.PovApiDumpState.RepsEntry
	38, // 11: proto.PovApiDumpState.contracts:type_name -> proto.PovApiDumpState.ContractsEntry
	39, // 12: proto.PovApiRepState.reps:type_name -> proto.PovApiRepState.RepsEntry
	54, // 13: proto.PovApiTxLookup.txLookup:type_name -> types.PovTxLookup
	48, // 14: proto.PovApiTxLookup.coinbaseTx:type_name -> types.PovCoinBaseTx
	55, // 15: proto.PovApiTxLookup.accountTx:type_name -> types.StateBlock
	49, // 16: proto.PovApiTD.header:type_name -> types.PovHeader
	56, // 17: proto.PovApiTD.td:type_name -> types.PovTD
	40, // 18: proto.PovMinerStats.minerStats:type_name -> proto.PovMinerStats.MinerStatsEntry
	41, // 19: proto.PovRepStats.repStats:type_name -> proto.PovRepStats.RepStatsEntry
	47, // 20: proto.PovApiSubmitWork.auxPow:type_name -> types.PovAuxHeader
	16, // 21: proto.PovApiGetLastNHourInfo.hourItemList:type_name -> proto.PovApiGetLastNHourItem
	49, // 22: proto.RepStatesByHeightRequset.header:type_name -> types.PovHeader
	34, // 23: proto.PovApiGetMiningInfo.hashInfo:type_name -> proto.PovApiHashInfo
	42, // 24: proto.PovApiCheckStateRsp.accountStates:type_name -> proto.PovApiCheckStateRsp.AccountStatesEntry
	43, // 25: proto.PovApiCheckStateRsp.accountMetas:type_name -> proto.PovApiCheckStateRsp.AccountMetasEntry
	44, // 26: proto.PovApiCheckStateRsp.repStates:type_name -> proto.PovApiCheckStateRsp.RepStatesEntry
	45, // 27: proto.PovApiCheckStateRsp.repMetas:type_name -> proto.PovApiCheckStateRsp.RepMetasEntry
	51, // 28: proto.PovApiDumpState.AccountsEntry.value:type_name -> types.PovAccountState
	52, // 29: proto.PovApiDumpState.RepsEntry.value:type_name -> types.PovRepState
	53, // 30: proto.PovApiDumpState.ContractsEntry.value:type_name -> types.PovContractState
	52, // 31: proto.PovApiRepState.RepsEntry.value:type_name -> types.PovRepState
	11, // 32: proto.PovMinerStats.MinerStatsEntry.value:type_name -> proto.PovMinerStatItem
	13, // 33: proto.PovRepStats.RepStatsEntry.value:type_name -> proto.PovRepStatItem
	51, // 34: proto.PovApiCheckStateRsp.AccountStatesEntry.value:type_name -> types.PovAccountState
	57, // 35: proto.PovApiCheckStateRsp.AccountMetasEntry.value:type_name -> types.AccountMeta
	52, // 36: proto.PovApiCheckStateRsp.RepStatesEntry.value:type_name -> types.PovRepState
	58, // 37: proto.PovApiCheckStateRsp.RepMetasEntry.value:type_name -> types.Benefit
	59, // 38: proto.PovAPI.GetPovStatus:input_type -> google.protobuf.Empty
	60, // 39: proto.PovAPI.GetHeaderByHeight:input_type -> proto.UInt64
	61, // 40: proto.PovAPI.GetHeaderByHash:input_type -> types.Hash
	59, // 41: proto.PovAPI.GetLatestHeader:input_type -> google.protobuf.Empty
	60, // 42: proto.PovAPI.GetFittestHeader:input_type -> proto.UInt64
	18, // 43: proto.PovAPI.BatchGetHeadersByHeight:input_type -> proto.HeadersByHeightRequest
	19, // 44: proto.PovAPI.GetBlockByHeight:input_type -> proto.BlockByHeightRequest
	20, // 45: proto.PovAPI.GetBlockByHash:input_type -> proto.BlockByHashRequest
	21, // 46: proto.PovAPI.GetLatestBlock:input_type -> proto.LatestBlockRequest
	61, // 47: proto.PovAPI.GetTransaction:input_type -> types.Hash
	22, // 48: proto.PovAPI.GetTransactionByBlockHashAndIndex:input_type -> proto.TransactionByBlockHashRequest
	23, // 49: proto.PovAPI.GetTransactionByBlockHeightAndIndex:input_type -> proto.TransactionByBlockHeightRequest
	24, // 50: proto.PovAPI.GetAccountState:input_type -> proto.AccountStateRequest
	62, // 51: proto.PovAPI.GetLatestAccountState:input_type -> types.Address
	25, // 52: proto.PovAPI.GetAccountStateByBlockHash:input_type -> proto.AccountStateByHashRequest
	26, // 53: proto.PovAPI.GetAccountStateByBlockHeight:input_type -> proto.AccountStateByHeightRequest
	61, // 54: proto.PovAPI.GetAllRepStatesByStateHash:input_type -> types.Hash
	61, // 55: proto.PovAPI.GetAllRepStatesByBlockHash:input_type -> types.Hash
	60, // 56: proto.PovAPI.GetAllRepStatesByBlockHeight:input_type -> proto.UInt64
	59, // 57: proto.PovAPI.GetLedgerStats:input_type -> google.protobuf.Empty
	63, // 58: proto.PovAPI.GetMinerStats:input_type -> types.Addresses
	63, // 59: proto.PovAPI.GetRepStats:input_type -> types.Addresses
	64, // 60: proto.PovAPI.GetMinerDayStat:input_type -> proto.UInt32
	60, // 61: proto.PovAPI.GetMinerDayStatByHeight:input_type -> proto.UInt64
	64, // 62: proto.PovAPI.GetDiffDayStat:input_type -> proto.UInt32
	60, // 63: proto.PovAPI.GetDiffDayStatByHeight:input_type -> proto.UInt64
	27, // 64: proto.PovAPI.GetHashInfo:input_type -> proto.HashInfoRequest
	28, // 65: proto.PovAPI.StartMining:input_type -> proto.StartMiningRequest
	59, // 66: proto.PovAPI.StopMining:input_type -> google.protobuf.Empty
	59, // 67: proto.PovAPI.GetMiningInfo:input_type -> google.protobuf.Empty
	29, // 68: proto.PovAPI.GetWork:input_type -> proto.WorkRequest
	30, // 69: proto.PovAPI.GetLastNHourInfo:input_type -> proto.LastNHourInfoRequest
	0,  // 70: proto.PovAPI.GetPovStatus:output_type -> proto.PovStatus
	1,  // 71: proto.PovAPI.GetHeaderByHeight:output_type -> proto.PovApiHeader
	1,  // 72: proto.PovAPI.GetHeaderByHash:output_type -> proto.PovApiHeader
	1,  // 73: proto.PovAPI.GetLatestHeader:output_type -> proto.PovApiHeader
	1,  // 74: proto.PovAPI.GetFittestHeader:output_type -> proto.PovApiHeader
	2,  // 75: proto.PovAPI.BatchGetHeadersByHeight:output_type -> proto.PovApiBatchHeader
	3,  // 76: proto.PovAPI.GetBlockByHeight:output_type -> proto.PovApiBlock
	3,  // 77: proto.PovAPI.GetBlockByHash:output_type -> proto.PovApiBlock
	3,  // 78: proto.PovAPI.GetLatestBlock:output_type -> proto.PovApiBlock
	8,  // 79: proto.PovAPI.GetTransaction:output_type -> proto.PovApiTxLookup
	8,  // 80: proto.PovAPI.GetTransactionByBlockHashAndIndex:output_type -> proto.PovApiTxLookup
	8,  // 81: proto.PovAPI.GetTransactionByBlockHeightAndIndex:output_type -> proto.PovApiTxLookup
	4,  // 82: proto.PovAPI.GetAccountState:output_type -> proto.PovApiState
	4,  // 83: proto.PovAPI.GetLatestAccountState:output_type -> proto.PovApiState
	4,  // 84: proto.PovAPI.GetAccountStateByBlockHash:output_type -> proto.PovApiState
	4,  // 85: proto.PovAPI.GetAccountStateByBlockHeight:output_type -> proto.PovApiState
	6,  // 86: proto.PovAPI.GetAllRepStatesByStateHash:output_type -> proto.PovApiRepState
	6,  // 87: proto.PovAPI.GetAllRepStatesByBlockHash:output_type -> proto.PovApiRepState
	6,  // 88: proto.PovAPI.GetAllRepStatesByBlockHeight:output_type -> proto.PovApiRepState
	9,  // 89: proto.PovAPI.GetLedgerStats:output_type -> proto.PovLedgerStats
	12, // 90: proto.PovAPI.GetMinerStats:output_type -> proto.PovMinerStats
	14, // 91: proto.PovAPI.GetRepStats:output_type -> proto.PovRepStats
	65, // 92: proto.PovAPI.GetMinerDayStat:output_type -> types.PovMinerDayStat
	65, // 93: proto.PovAPI.GetMinerDayStatByHeight:output_type -> types.PovMinerDayStat
	66, // 94: proto.PovAPI.GetDiffDayStat:output_type -> types.PovDiffDayStat
	66, // 95: proto.PovAPI.GetDiffDayStatByHeight:output_type -> types.PovDiffDayStat
	34, // 96: proto.PovAPI.GetHashInfo:output_type -> proto.PovApiHashInfo
	59, // 97: proto.PovAPI.StartMining:output_type -> google.protobuf.Empty
	59, // 98: proto.PovAPI.StopMining:output_type -> google.protobuf.Empty
	33, // 99: proto.PovAPI.GetMiningInfo:output_type -> proto.PovApiGetMiningInfo
	32, // 100: proto.PovAPI.GetWork:output_type -> proto.PovApiGetWork
	17, // 101: proto.PovAPI.GetLastNHourInfo:output_type -> proto.PovApiGetLastNHourInfo
	70, // [70:102] is the sub-list for method output_type
	38, // [38:70] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_pov_proto_init() }
func file_pov_proto_init() {
	if File_pov_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pov_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PovStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PovApiHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PovApiBatchHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PovApiBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PovApiState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PovApiDumpState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PovApiRepState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PovApiKeyValPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PovApiTxLookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PovLedgerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PovApiTD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PovMinerStatItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PovMinerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PovRepStatItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PovRepStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PovApiSubmitWork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PovApiGetLastNHourItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PovApiGetLastNHourInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeadersByHeightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockByHeightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockByHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionByBlockHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionByBlockHeightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountStateByHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountStateByHeightRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartMiningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastNHourInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepStatesByHeightRequset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PovApiGetWork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PovApiGetMiningInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PovApiHashInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pov_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PovApiCheckStateRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pov_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pov_proto_goTypes,
		DependencyIndexes: file_pov_proto_depIdxs,
		MessageInfos:      file_pov_proto_msgTypes,
	}.Build()
	File_pov_proto = out.File
	file_pov_proto_rawDesc = nil
	file_pov_proto_goTypes = nil
	file_pov_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PovAPIClient is the client API for PovAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PovAPIClient interface {
	GetPovStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PovStatus, error)
	GetHeaderByHeight(ctx context.Context, in *UInt64, opts ...grpc.CallOption) (*PovApiHeader, error)
	GetHeaderByHash(ctx context.Context, in *types.Hash, opts ...grpc.CallOption) (*PovApiHeader, error)
	GetLatestHeader(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PovApiHeader, error)
	GetFittestHeader(ctx context.Context, in *UInt64, opts ...grpc.CallOption) (*PovApiHeader, error)
	BatchGetHeadersByHeight(ctx context.Context, in *HeadersByHeightRequest, opts ...grpc.CallOption) (*PovApiBatchHeader, error)
	GetBlockByHeight(ctx context.Context, in *BlockByHeightRequest, opts ...grpc.CallOption) (*PovApiBlock, error)
	GetBlockByHash(ctx context.Context, in *BlockByHashRequest, opts ...grpc.CallOption) (*PovApiBlock, error)
	GetLatestBlock(ctx context.Context, in *LatestBlockRequest, opts ...grpc.CallOption) (*PovApiBlock, error)
	GetTransaction(ctx context.Context, in *types.Hash, opts ...grpc.CallOption) (*PovApiTxLookup, error)
	GetTransactionByBlockHashAndIndex(ctx context.Context, in *TransactionByBlockHashRequest, opts ...grpc.CallOption) (*PovApiTxLookup, error)
	GetTransactionByBlockHeightAndIndex(ctx context.Context, in *TransactionByBlockHeightRequest, opts ...grpc.CallOption) (*PovApiTxLookup, error)
	GetAccountState(ctx context.Context, in *AccountStateRequest, opts ...grpc.CallOption) (*PovApiState, error)
	GetLatestAccountState(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*PovApiState, error)
	GetAccountStateByBlockHash(ctx context.Context, in *AccountStateByHashRequest, opts ...grpc.CallOption) (*PovApiState, error)
	GetAccountStateByBlockHeight(ctx context.Context, in *AccountStateByHeightRequest, opts ...grpc.CallOption) (*PovApiState, error)
	GetAllRepStatesByStateHash(ctx context.Context, in *types.Hash, opts ...grpc.CallOption) (*PovApiRepState, error)
	GetAllRepStatesByBlockHash(ctx context.Context, in *types.Hash, opts ...grpc.CallOption) (*PovApiRepState, error)
	GetAllRepStatesByBlockHeight(ctx context.Context, in *UInt64, opts ...grpc.CallOption) (*PovApiRepState, error)
	GetLedgerStats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PovLedgerStats, error)
	//    rpc GetBlockTDByHash (types.Hash) returns (PovApiTD) {
	//        option (google.api.http) = {
	//           get: "/pov/getBlockTDByHash"
	//       };
	//    }
	//
	//    rpc GetBlockTDByHeight (UInt64) returns (PovApiTD) {
	//        option (google.api.http) = {
	//           get: "/pov/getBlockTDByHeight"
	//       };
	//    }
	//
	GetMinerStats(ctx context.Context, in *types.Addresses, opts ...grpc.CallOption) (*PovMinerStats, error)
	GetRepStats(ctx context.Context, in *types.Addresses, opts ...grpc.CallOption) (*PovRepStats, error)
	GetMinerDayStat(ctx context.Context, in *UInt32, opts ...grpc.CallOption) (*types.PovMinerDayStat, error)
	GetMinerDayStatByHeight(ctx context.Context, in *UInt64, opts ...grpc.CallOption) (*types.PovMinerDayStat, error)
	GetDiffDayStat(ctx context.Context, in *UInt32, opts ...grpc.CallOption) (*types.PovDiffDayStat, error)
	GetDiffDayStatByHeight(ctx context.Context, in *UInt64, opts ...grpc.CallOption) (*types.PovDiffDayStat, error)
	GetHashInfo(ctx context.Context, in *HashInfoRequest, opts ...grpc.CallOption) (*PovApiHashInfo, error)
	StartMining(ctx context.Context, in *StartMiningRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	StopMining(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	GetMiningInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PovApiGetMiningInfo, error)
	GetWork(ctx context.Context, in *WorkRequest, opts ...grpc.CallOption) (*PovApiGetWork, error)
	GetLastNHourInfo(ctx context.Context, in *LastNHourInfoRequest, opts ...grpc.CallOption) (*PovApiGetLastNHourInfo, error)
}

type povAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPovAPIClient(cc grpc.ClientConnInterface) PovAPIClient {
	return &povAPIClient{cc}
}

func (c *povAPIClient) GetPovStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PovStatus, error) {
	out := new(PovStatus)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetPovStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetHeaderByHeight(ctx context.Context, in *UInt64, opts ...grpc.CallOption) (*PovApiHeader, error) {
	out := new(PovApiHeader)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetHeaderByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetHeaderByHash(ctx context.Context, in *types.Hash, opts ...grpc.CallOption) (*PovApiHeader, error) {
	out := new(PovApiHeader)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetHeaderByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetLatestHeader(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PovApiHeader, error) {
	out := new(PovApiHeader)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetLatestHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetFittestHeader(ctx context.Context, in *UInt64, opts ...grpc.CallOption) (*PovApiHeader, error) {
	out := new(PovApiHeader)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetFittestHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) BatchGetHeadersByHeight(ctx context.Context, in *HeadersByHeightRequest, opts ...grpc.CallOption) (*PovApiBatchHeader, error) {
	out := new(PovApiBatchHeader)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/BatchGetHeadersByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetBlockByHeight(ctx context.Context, in *BlockByHeightRequest, opts ...grpc.CallOption) (*PovApiBlock, error) {
	out := new(PovApiBlock)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetBlockByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetBlockByHash(ctx context.Context, in *BlockByHashRequest, opts ...grpc.CallOption) (*PovApiBlock, error) {
	out := new(PovApiBlock)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetBlockByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetLatestBlock(ctx context.Context, in *LatestBlockRequest, opts ...grpc.CallOption) (*PovApiBlock, error) {
	out := new(PovApiBlock)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetLatestBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetTransaction(ctx context.Context, in *types.Hash, opts ...grpc.CallOption) (*PovApiTxLookup, error) {
	out := new(PovApiTxLookup)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetTransactionByBlockHashAndIndex(ctx context.Context, in *TransactionByBlockHashRequest, opts ...grpc.CallOption) (*PovApiTxLookup, error) {
	out := new(PovApiTxLookup)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetTransactionByBlockHashAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetTransactionByBlockHeightAndIndex(ctx context.Context, in *TransactionByBlockHeightRequest, opts ...grpc.CallOption) (*PovApiTxLookup, error) {
	out := new(PovApiTxLookup)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetTransactionByBlockHeightAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetAccountState(ctx context.Context, in *AccountStateRequest, opts ...grpc.CallOption) (*PovApiState, error) {
	out := new(PovApiState)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetAccountState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetLatestAccountState(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*PovApiState, error) {
	out := new(PovApiState)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetLatestAccountState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetAccountStateByBlockHash(ctx context.Context, in *AccountStateByHashRequest, opts ...grpc.CallOption) (*PovApiState, error) {
	out := new(PovApiState)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetAccountStateByBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetAccountStateByBlockHeight(ctx context.Context, in *AccountStateByHeightRequest, opts ...grpc.CallOption) (*PovApiState, error) {
	out := new(PovApiState)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetAccountStateByBlockHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetAllRepStatesByStateHash(ctx context.Context, in *types.Hash, opts ...grpc.CallOption) (*PovApiRepState, error) {
	out := new(PovApiRepState)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetAllRepStatesByStateHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetAllRepStatesByBlockHash(ctx context.Context, in *types.Hash, opts ...grpc.CallOption) (*PovApiRepState, error) {
	out := new(PovApiRepState)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetAllRepStatesByBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetAllRepStatesByBlockHeight(ctx context.Context, in *UInt64, opts ...grpc.CallOption) (*PovApiRepState, error) {
	out := new(PovApiRepState)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetAllRepStatesByBlockHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetLedgerStats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PovLedgerStats, error) {
	out := new(PovLedgerStats)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetLedgerStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetMinerStats(ctx context.Context, in *types.Addresses, opts ...grpc.CallOption) (*PovMinerStats, error) {
	out := new(PovMinerStats)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetMinerStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetRepStats(ctx context.Context, in *types.Addresses, opts ...grpc.CallOption) (*PovRepStats, error) {
	out := new(PovRepStats)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetRepStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetMinerDayStat(ctx context.Context, in *UInt32, opts ...grpc.CallOption) (*types.PovMinerDayStat, error) {
	out := new(types.PovMinerDayStat)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetMinerDayStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetMinerDayStatByHeight(ctx context.Context, in *UInt64, opts ...grpc.CallOption) (*types.PovMinerDayStat, error) {
	out := new(types.PovMinerDayStat)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetMinerDayStatByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetDiffDayStat(ctx context.Context, in *UInt32, opts ...grpc.CallOption) (*types.PovDiffDayStat, error) {
	out := new(types.PovDiffDayStat)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetDiffDayStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetDiffDayStatByHeight(ctx context.Context, in *UInt64, opts ...grpc.CallOption) (*types.PovDiffDayStat, error) {
	out := new(types.PovDiffDayStat)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetDiffDayStatByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetHashInfo(ctx context.Context, in *HashInfoRequest, opts ...grpc.CallOption) (*PovApiHashInfo, error) {
	out := new(PovApiHashInfo)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetHashInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) StartMining(ctx context.Context, in *StartMiningRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/StartMining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) StopMining(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/StopMining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetMiningInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PovApiGetMiningInfo, error) {
	out := new(PovApiGetMiningInfo)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetMiningInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetWork(ctx context.Context, in *WorkRequest, opts ...grpc.CallOption) (*PovApiGetWork, error) {
	out := new(PovApiGetWork)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *povAPIClient) GetLastNHourInfo(ctx context.Context, in *LastNHourInfoRequest, opts ...grpc.CallOption) (*PovApiGetLastNHourInfo, error) {
	out := new(PovApiGetLastNHourInfo)
	err := c.cc.Invoke(ctx, "/proto.PovAPI/GetLastNHourInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PovAPIServer is the server API for PovAPI service.
type PovAPIServer interface {
	GetPovStatus(context.Context, *empty.Empty) (*PovStatus, error)
	GetHeaderByHeight(context.Context, *UInt64) (*PovApiHeader, error)
	GetHeaderByHash(context.Context, *types.Hash) (*PovApiHeader, error)
	GetLatestHeader(context.Context, *empty.Empty) (*PovApiHeader, error)
	GetFittestHeader(context.Context, *UInt64) (*PovApiHeader, error)
	BatchGetHeadersByHeight(context.Context, *HeadersByHeightRequest) (*PovApiBatchHeader, error)
	GetBlockByHeight(context.Context, *BlockByHeightRequest) (*PovApiBlock, error)
	GetBlockByHash(context.Context, *BlockByHashRequest) (*PovApiBlock, error)
	GetLatestBlock(context.Context, *LatestBlockRequest) (*PovApiBlock, error)
	GetTransaction(context.Context, *types.Hash) (*PovApiTxLookup, error)
	GetTransactionByBlockHashAndIndex(context.Context, *TransactionByBlockHashRequest) (*PovApiTxLookup, error)
	GetTransactionByBlockHeightAndIndex(context.Context, *TransactionByBlockHeightRequest) (*PovApiTxLookup, error)
	GetAccountState(context.Context, *AccountStateRequest) (*PovApiState, error)
	GetLatestAccountState(context.Context, *types.Address) (*PovApiState, error)
	GetAccountStateByBlockHash(context.Context, *AccountStateByHashRequest) (*PovApiState, error)
	GetAccountStateByBlockHeight(context.Context, *AccountStateByHeightRequest) (*PovApiState, error)
	GetAllRepStatesByStateHash(context.Context, *types.Hash) (*PovApiRepState, error)
	GetAllRepStatesByBlockHash(context.Context, *types.Hash) (*PovApiRepState, error)
	GetAllRepStatesByBlockHeight(context.Context, *UInt64) (*PovApiRepState, error)
	GetLedgerStats(context.Context, *empty.Empty) (*PovLedgerStats, error)
	//    rpc GetBlockTDByHash (types.Hash) returns (PovApiTD) {
	//        option (google.api.http) = {
	//           get: "/pov/getBlockTDByHash"
	//       };
	//    }
	//
	//    rpc GetBlockTDByHeight (UInt64) returns (PovApiTD) {
	//        option (google.api.http) = {
	//           get: "/pov/getBlockTDByHeight"
	//       };
	//    }
	//
	GetMinerStats(context.Context, *types.Addresses) (*PovMinerStats, error)
	GetRepStats(context.Context, *types.Addresses) (*PovRepStats, error)
	GetMinerDayStat(context.Context, *UInt32) (*types.PovMinerDayStat, error)
	GetMinerDayStatByHeight(context.Context, *UInt64) (*types.PovMinerDayStat, error)
	GetDiffDayStat(context.Context, *UInt32) (*types.PovDiffDayStat, error)
	GetDiffDayStatByHeight(context.Context, *UInt64) (*types.PovDiffDayStat, error)
	GetHashInfo(context.Context, *HashInfoRequest) (*PovApiHashInfo, error)
	StartMining(context.Context, *StartMiningRequest) (*empty.Empty, error)
	StopMining(context.Context, *empty.Empty) (*empty.Empty, error)
	GetMiningInfo(context.Context, *empty.Empty) (*PovApiGetMiningInfo, error)
	GetWork(context.Context, *WorkRequest) (*PovApiGetWork, error)
	GetLastNHourInfo(context.Context, *LastNHourInfoRequest) (*PovApiGetLastNHourInfo, error)
}

// UnimplementedPovAPIServer can be embedded to have forward compatible implementations.
type UnimplementedPovAPIServer struct {
}

func (*UnimplementedPovAPIServer) GetPovStatus(context.Context, *empty.Empty) (*PovStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPovStatus not implemented")
}
func (*UnimplementedPovAPIServer) GetHeaderByHeight(context.Context, *UInt64) (*PovApiHeader, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeaderByHeight not implemented")
}
func (*UnimplementedPovAPIServer) GetHeaderByHash(context.Context, *types.Hash) (*PovApiHeader, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeaderByHash not implemented")
}
func (*UnimplementedPovAPIServer) GetLatestHeader(context.Context, *empty.Empty) (*PovApiHeader, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestHeader not implemented")
}
func (*UnimplementedPovAPIServer) GetFittestHeader(context.Context, *UInt64) (*PovApiHeader, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFittestHeader not implemented")
}
func (*UnimplementedPovAPIServer) BatchGetHeadersByHeight(context.Context, *HeadersByHeightRequest) (*PovApiBatchHeader, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetHeadersByHeight not implemented")
}
func (*UnimplementedPovAPIServer) GetBlockByHeight(context.Context, *BlockByHeightRequest) (*PovApiBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHeight not implemented")
}
func (*UnimplementedPovAPIServer) GetBlockByHash(context.Context, *BlockByHashRequest) (*PovApiBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHash not implemented")
}
func (*UnimplementedPovAPIServer) GetLatestBlock(context.Context, *LatestBlockRequest) (*PovApiBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestBlock not implemented")
}
func (*UnimplementedPovAPIServer) GetTransaction(context.Context, *types.Hash) (*PovApiTxLookup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (*UnimplementedPovAPIServer) GetTransactionByBlockHashAndIndex(context.Context, *TransactionByBlockHashRequest) (*PovApiTxLookup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByBlockHashAndIndex not implemented")
}
func (*UnimplementedPovAPIServer) GetTransactionByBlockHeightAndIndex(context.Context, *TransactionByBlockHeightRequest) (*PovApiTxLookup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByBlockHeightAndIndex not implemented")
}
func (*UnimplementedPovAPIServer) GetAccountState(context.Context, *AccountStateRequest) (*PovApiState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountState not implemented")
}
func (*UnimplementedPovAPIServer) GetLatestAccountState(context.Context, *types.Address) (*PovApiState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestAccountState not implemented")
}
func (*UnimplementedPovAPIServer) GetAccountStateByBlockHash(context.Context, *AccountStateByHashRequest) (*PovApiState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountStateByBlockHash not implemented")
}
func (*UnimplementedPovAPIServer) GetAccountStateByBlockHeight(context.Context, *AccountStateByHeightRequest) (*PovApiState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountStateByBlockHeight not implemented")
}
func (*UnimplementedPovAPIServer) GetAllRepStatesByStateHash(context.Context, *types.Hash) (*PovApiRepState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRepStatesByStateHash not implemented")
}
func (*UnimplementedPovAPIServer) GetAllRepStatesByBlockHash(context.Context, *types.Hash) (*PovApiRepState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRepStatesByBlockHash not implemented")
}
func (*UnimplementedPovAPIServer) GetAllRepStatesByBlockHeight(context.Context, *UInt64) (*PovApiRepState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRepStatesByBlockHeight not implemented")
}
func (*UnimplementedPovAPIServer) GetLedgerStats(context.Context, *empty.Empty) (*PovLedgerStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLedgerStats not implemented")
}
func (*UnimplementedPovAPIServer) GetMinerStats(context.Context, *types.Addresses) (*PovMinerStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinerStats not implemented")
}
func (*UnimplementedPovAPIServer) GetRepStats(context.Context, *types.Addresses) (*PovRepStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepStats not implemented")
}
func (*UnimplementedPovAPIServer) GetMinerDayStat(context.Context, *UInt32) (*types.PovMinerDayStat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinerDayStat not implemented")
}
func (*UnimplementedPovAPIServer) GetMinerDayStatByHeight(context.Context, *UInt64) (*types.PovMinerDayStat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinerDayStatByHeight not implemented")
}
func (*UnimplementedPovAPIServer) GetDiffDayStat(context.Context, *UInt32) (*types.PovDiffDayStat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiffDayStat not implemented")
}
func (*UnimplementedPovAPIServer) GetDiffDayStatByHeight(context.Context, *UInt64) (*types.PovDiffDayStat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiffDayStatByHeight not implemented")
}
func (*UnimplementedPovAPIServer) GetHashInfo(context.Context, *HashInfoRequest) (*PovApiHashInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHashInfo not implemented")
}
func (*UnimplementedPovAPIServer) StartMining(context.Context, *StartMiningRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMining not implemented")
}
func (*UnimplementedPovAPIServer) StopMining(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopMining not implemented")
}
func (*UnimplementedPovAPIServer) GetMiningInfo(context.Context, *empty.Empty) (*PovApiGetMiningInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMiningInfo not implemented")
}
func (*UnimplementedPovAPIServer) GetWork(context.Context, *WorkRequest) (*PovApiGetWork, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWork not implemented")
}
func (*UnimplementedPovAPIServer) GetLastNHourInfo(context.Context, *LastNHourInfoRequest) (*PovApiGetLastNHourInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastNHourInfo not implemented")
}

func RegisterPovAPIServer(s *grpc.Server, srv PovAPIServer) {
	s.RegisterService(&_PovAPI_serviceDesc, srv)
}

func _PovAPI_GetPovStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetPovStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetPovStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetPovStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetHeaderByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UInt64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetHeaderByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetHeaderByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetHeaderByHeight(ctx, req.(*UInt64))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetHeaderByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetHeaderByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetHeaderByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetHeaderByHash(ctx, req.(*types.Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetLatestHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetLatestHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetLatestHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetLatestHeader(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetFittestHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UInt64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetFittestHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetFittestHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetFittestHeader(ctx, req.(*UInt64))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_BatchGetHeadersByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeadersByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).BatchGetHeadersByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/BatchGetHeadersByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).BatchGetHeadersByHeight(ctx, req.(*HeadersByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetBlockByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetBlockByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetBlockByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetBlockByHeight(ctx, req.(*BlockByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetBlockByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetBlockByHash(ctx, req.(*BlockByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetLatestBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatestBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetLatestBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetLatestBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetLatestBlock(ctx, req.(*LatestBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetTransaction(ctx, req.(*types.Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetTransactionByBlockHashAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionByBlockHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetTransactionByBlockHashAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetTransactionByBlockHashAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetTransactionByBlockHashAndIndex(ctx, req.(*TransactionByBlockHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetTransactionByBlockHeightAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionByBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetTransactionByBlockHeightAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetTransactionByBlockHeightAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetTransactionByBlockHeightAndIndex(ctx, req.(*TransactionByBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetAccountState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetAccountState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetAccountState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetAccountState(ctx, req.(*AccountStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetLatestAccountState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetLatestAccountState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetLatestAccountState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetLatestAccountState(ctx, req.(*types.Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetAccountStateByBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountStateByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetAccountStateByBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetAccountStateByBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetAccountStateByBlockHash(ctx, req.(*AccountStateByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetAccountStateByBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountStateByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetAccountStateByBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetAccountStateByBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetAccountStateByBlockHeight(ctx, req.(*AccountStateByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetAllRepStatesByStateHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetAllRepStatesByStateHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetAllRepStatesByStateHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetAllRepStatesByStateHash(ctx, req.(*types.Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetAllRepStatesByBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetAllRepStatesByBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetAllRepStatesByBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetAllRepStatesByBlockHash(ctx, req.(*types.Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetAllRepStatesByBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UInt64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetAllRepStatesByBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetAllRepStatesByBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetAllRepStatesByBlockHeight(ctx, req.(*UInt64))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetLedgerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetLedgerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetLedgerStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetLedgerStats(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetMinerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Addresses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetMinerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetMinerStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetMinerStats(ctx, req.(*types.Addresses))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetRepStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Addresses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetRepStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetRepStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetRepStats(ctx, req.(*types.Addresses))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetMinerDayStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UInt32)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetMinerDayStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetMinerDayStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetMinerDayStat(ctx, req.(*UInt32))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetMinerDayStatByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UInt64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetMinerDayStatByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetMinerDayStatByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetMinerDayStatByHeight(ctx, req.(*UInt64))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetDiffDayStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UInt32)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetDiffDayStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetDiffDayStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetDiffDayStat(ctx, req.(*UInt32))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetDiffDayStatByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UInt64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetDiffDayStatByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetDiffDayStatByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetDiffDayStatByHeight(ctx, req.(*UInt64))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetHashInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetHashInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetHashInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetHashInfo(ctx, req.(*HashInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_StartMining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMiningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).StartMining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/StartMining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).StartMining(ctx, req.(*StartMiningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_StopMining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).StopMining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/StopMining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).StopMining(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetMiningInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetMiningInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetMiningInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetMiningInfo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetWork(ctx, req.(*WorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PovAPI_GetLastNHourInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastNHourInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PovAPIServer).GetLastNHourInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PovAPI/GetLastNHourInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PovAPIServer).GetLastNHourInfo(ctx, req.(*LastNHourInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PovAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PovAPI",
	HandlerType: (*PovAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPovStatus",
			Handler:    _PovAPI_GetPovStatus_Handler,
		},
		{
			MethodName: "GetHeaderByHeight",
			Handler:    _PovAPI_GetHeaderByHeight_Handler,
		},
		{
			MethodName: "GetHeaderByHash",
			Handler:    _PovAPI_GetHeaderByHash_Handler,
		},
		{
			MethodName: "GetLatestHeader",
			Handler:    _PovAPI_GetLatestHeader_Handler,
		},
		{
			MethodName: "GetFittestHeader",
			Handler:    _PovAPI_GetFittestHeader_Handler,
		},
		{
			MethodName: "BatchGetHeadersByHeight",
			Handler:    _PovAPI_BatchGetHeadersByHeight_Handler,
		},
		{
			MethodName: "GetBlockByHeight",
			Handler:    _PovAPI_GetBlockByHeight_Handler,
		},
		{
			MethodName: "GetBlockByHash",
			Handler:    _PovAPI_GetBlockByHash_Handler,
		},
		{
			MethodName: "GetLatestBlock",
			Handler:    _PovAPI_GetLatestBlock_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _PovAPI_GetTransaction_Handler,
		},
		{
			MethodName: "GetTransactionByBlockHashAndIndex",
			Handler:    _PovAPI_GetTransactionByBlockHashAndIndex_Handler,
		},
		{
			MethodName: "GetTransactionByBlockHeightAndIndex",
			Handler:    _PovAPI_GetTransactionByBlockHeightAndIndex_Handler,
		},
		{
			MethodName: "GetAccountState",
			Handler:    _PovAPI_GetAccountState_Handler,
		},
		{
			MethodName: "GetLatestAccountState",
			Handler:    _PovAPI_GetLatestAccountState_Handler,
		},
		{
			MethodName: "GetAccountStateByBlockHash",
			Handler:    _PovAPI_GetAccountStateByBlockHash_Handler,
		},
		{
			MethodName: "GetAccountStateByBlockHeight",
			Handler:    _PovAPI_GetAccountStateByBlockHeight_Handler,
		},
		{
			MethodName: "GetAllRepStatesByStateHash",
			Handler:    _PovAPI_GetAllRepStatesByStateHash_Handler,
		},
		{
			MethodName: "GetAllRepStatesByBlockHash",
			Handler:    _PovAPI_GetAllRepStatesByBlockHash_Handler,
		},
		{
			MethodName: "GetAllRepStatesByBlockHeight",
			Handler:    _PovAPI_GetAllRepStatesByBlockHeight_Handler,
		},
		{
			MethodName: "GetLedgerStats",
			Handler:    _PovAPI_GetLedgerStats_Handler,
		},
		{
			MethodName: "GetMinerStats",
			Handler:    _PovAPI_GetMinerStats_Handler,
		},
		{
			MethodName: "GetRepStats",
			Handler:    _PovAPI_GetRepStats_Handler,
		},
		{
			MethodName: "GetMinerDayStat",
			Handler:    _PovAPI_GetMinerDayStat_Handler,
		},
		{
			MethodName: "GetMinerDayStatByHeight",
			Handler:    _PovAPI_GetMinerDayStatByHeight_Handler,
		},
		{
			MethodName: "GetDiffDayStat",
			Handler:    _PovAPI_GetDiffDayStat_Handler,
		},
		{
			MethodName: "GetDiffDayStatByHeight",
			Handler:    _PovAPI_GetDiffDayStatByHeight_Handler,
		},
		{
			MethodName: "GetHashInfo",
			Handler:    _PovAPI_GetHashInfo_Handler,
		},
		{
			MethodName: "StartMining",
			Handler:    _PovAPI_StartMining_Handler,
		},
		{
			MethodName: "StopMining",
			Handler:    _PovAPI_StopMining_Handler,
		},
		{
			MethodName: "GetMiningInfo",
			Handler:    _PovAPI_GetMiningInfo_Handler,
		},
		{
			MethodName: "GetWork",
			Handler:    _PovAPI_GetWork_Handler,
		},
		{
			MethodName: "GetLastNHourInfo",
			Handler:    _PovAPI_GetLastNHourInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pov.proto",
}
