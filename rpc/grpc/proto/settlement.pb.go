// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.7.1
// source: settlement.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	types "github.com/qlcchain/go-qlc/rpc/grpc/proto/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SignContractParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractAddress string `protobuf:"bytes,1,opt,name=contractAddress,proto3" json:"contractAddress,omitempty"`
	Address         string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *SignContractParam) Reset() {
	*x = SignContractParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignContractParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignContractParam) ProtoMessage() {}

func (x *SignContractParam) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignContractParam.ProtoReflect.Descriptor instead.
func (*SignContractParam) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{0}
}

func (x *SignContractParam) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *SignContractParam) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type CreateContractParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyA    *types.Contractor        `protobuf:"bytes,1,opt,name=partyA,proto3" json:"partyA,omitempty"`
	PartyB    *types.Contractor        `protobuf:"bytes,2,opt,name=partyB,proto3" json:"partyB,omitempty"`
	Services  []*types.ContractService `protobuf:"bytes,3,rep,name=services,proto3" json:"services,omitempty"`
	StartDate int64                    `protobuf:"varint,4,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate   int64                    `protobuf:"varint,5,opt,name=endDate,proto3" json:"endDate,omitempty"`
}

func (x *CreateContractParam) Reset() {
	*x = CreateContractParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateContractParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContractParam) ProtoMessage() {}

func (x *CreateContractParam) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContractParam.ProtoReflect.Descriptor instead.
func (*CreateContractParam) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{1}
}

func (x *CreateContractParam) GetPartyA() *types.Contractor {
	if x != nil {
		return x.PartyA
	}
	return nil
}

func (x *CreateContractParam) GetPartyB() *types.Contractor {
	if x != nil {
		return x.PartyB
	}
	return nil
}

func (x *CreateContractParam) GetServices() []*types.ContractService {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *CreateContractParam) GetStartDate() int64 {
	if x != nil {
		return x.StartDate
	}
	return 0
}

func (x *CreateContractParam) GetEndDate() int64 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

type StopParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StopParam *types.StopParam `protobuf:"bytes,1,opt,name=stopParam,proto3" json:"stopParam,omitempty"`
	Address   string           `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *StopParam) Reset() {
	*x = StopParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopParam) ProtoMessage() {}

func (x *StopParam) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopParam.ProtoReflect.Descriptor instead.
func (*StopParam) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{2}
}

func (x *StopParam) GetStopParam() *types.StopParam {
	if x != nil {
		return x.StopParam
	}
	return nil
}

func (x *StopParam) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type UpdateStopParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateStopParam *types.UpdateStopParam `protobuf:"bytes,1,opt,name=updateStopParam,proto3" json:"updateStopParam,omitempty"`
	Address         string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *UpdateStopParam) Reset() {
	*x = UpdateStopParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStopParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStopParam) ProtoMessage() {}

func (x *UpdateStopParam) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStopParam.ProtoReflect.Descriptor instead.
func (*UpdateStopParam) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateStopParam) GetUpdateStopParam() *types.UpdateStopParam {
	if x != nil {
		return x.UpdateStopParam
	}
	return nil
}

func (x *UpdateStopParam) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type SettlementContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyA      *types.Contractor        `protobuf:"bytes,1,opt,name=partyA,proto3" json:"partyA,omitempty"`
	PartyB      *types.Contractor        `protobuf:"bytes,2,opt,name=partyB,proto3" json:"partyB,omitempty"`
	Previous    string                   `protobuf:"bytes,3,opt,name=Previous,proto3" json:"Previous,omitempty"`
	Services    []*types.ContractService `protobuf:"bytes,4,rep,name=services,proto3" json:"services,omitempty"`
	SignDate    int64                    `protobuf:"varint,5,opt,name=signDate,proto3" json:"signDate,omitempty"`
	StartDate   int64                    `protobuf:"varint,6,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate     int64                    `protobuf:"varint,7,opt,name=endDate,proto3" json:"endDate,omitempty"`
	PreStops    []string                 `protobuf:"bytes,8,rep,name=preStops,proto3" json:"preStops,omitempty"`
	NextStops   []string                 `protobuf:"bytes,9,rep,name=nextStops,proto3" json:"nextStops,omitempty"`
	ConfirmDate int64                    `protobuf:"varint,10,opt,name=confirmDate,proto3" json:"confirmDate,omitempty"`
	Status      int32                    `protobuf:"varint,11,opt,name=status,proto3" json:"status,omitempty"`
	Terminator  *types.Terminator        `protobuf:"bytes,12,opt,name=terminator,proto3" json:"terminator,omitempty"`
	Address     string                   `protobuf:"bytes,13,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *SettlementContract) Reset() {
	*x = SettlementContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettlementContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettlementContract) ProtoMessage() {}

func (x *SettlementContract) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettlementContract.ProtoReflect.Descriptor instead.
func (*SettlementContract) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{4}
}

func (x *SettlementContract) GetPartyA() *types.Contractor {
	if x != nil {
		return x.PartyA
	}
	return nil
}

func (x *SettlementContract) GetPartyB() *types.Contractor {
	if x != nil {
		return x.PartyB
	}
	return nil
}

func (x *SettlementContract) GetPrevious() string {
	if x != nil {
		return x.Previous
	}
	return ""
}

func (x *SettlementContract) GetServices() []*types.ContractService {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *SettlementContract) GetSignDate() int64 {
	if x != nil {
		return x.SignDate
	}
	return 0
}

func (x *SettlementContract) GetStartDate() int64 {
	if x != nil {
		return x.StartDate
	}
	return 0
}

func (x *SettlementContract) GetEndDate() int64 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

func (x *SettlementContract) GetPreStops() []string {
	if x != nil {
		return x.PreStops
	}
	return nil
}

func (x *SettlementContract) GetNextStops() []string {
	if x != nil {
		return x.NextStops
	}
	return nil
}

func (x *SettlementContract) GetConfirmDate() int64 {
	if x != nil {
		return x.ConfirmDate
	}
	return 0
}

func (x *SettlementContract) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SettlementContract) GetTerminator() *types.Terminator {
	if x != nil {
		return x.Terminator
	}
	return nil
}

func (x *SettlementContract) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type SettlementContracts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contracts []*SettlementContract `protobuf:"bytes,1,rep,name=contracts,proto3" json:"contracts,omitempty"`
}

func (x *SettlementContracts) Reset() {
	*x = SettlementContracts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettlementContracts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettlementContracts) ProtoMessage() {}

func (x *SettlementContracts) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettlementContracts.ProtoReflect.Descriptor instead.
func (*SettlementContracts) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{5}
}

func (x *SettlementContracts) GetContracts() []*SettlementContract {
	if x != nil {
		return x.Contracts
	}
	return nil
}

type TerminateParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TerminateParam *types.TerminateParam `protobuf:"bytes,1,opt,name=terminateParam,proto3" json:"terminateParam,omitempty"`
	Address        string                `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *TerminateParam) Reset() {
	*x = TerminateParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateParam) ProtoMessage() {}

func (x *TerminateParam) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateParam.ProtoReflect.Descriptor instead.
func (*TerminateParam) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{6}
}

func (x *TerminateParam) GetTerminateParam() *types.TerminateParam {
	if x != nil {
		return x.TerminateParam
	}
	return nil
}

func (x *TerminateParam) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type CDRStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string                      `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Params  map[string]*types.CDRParams `protobuf:"bytes,2,rep,name=Params,proto3" json:"Params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Status  int32                       `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CDRStatus) Reset() {
	*x = CDRStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDRStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDRStatus) ProtoMessage() {}

func (x *CDRStatus) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDRStatus.ProtoReflect.Descriptor instead.
func (*CDRStatus) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{7}
}

func (x *CDRStatus) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CDRStatus) GetParams() map[string]*types.CDRParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *CDRStatus) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type CDRStatuses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statuses []*CDRStatus `protobuf:"bytes,1,rep,name=statuses,proto3" json:"statuses,omitempty"`
}

func (x *CDRStatuses) Reset() {
	*x = CDRStatuses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDRStatuses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDRStatuses) ProtoMessage() {}

func (x *CDRStatuses) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDRStatuses.ProtoReflect.Descriptor instead.
func (*CDRStatuses) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{8}
}

func (x *CDRStatuses) GetStatuses() []*CDRStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type RegisterAssetParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner     *types.Contractor `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Assets    []*types.Asset    `protobuf:"bytes,2,rep,name=assets,proto3" json:"assets,omitempty"`
	StartDate int64             `protobuf:"varint,3,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate   int64             `protobuf:"varint,4,opt,name=endDate,proto3" json:"endDate,omitempty"`
	Status    string            `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RegisterAssetParam) Reset() {
	*x = RegisterAssetParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterAssetParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAssetParam) ProtoMessage() {}

func (x *RegisterAssetParam) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAssetParam.ProtoReflect.Descriptor instead.
func (*RegisterAssetParam) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{9}
}

func (x *RegisterAssetParam) GetOwner() *types.Contractor {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *RegisterAssetParam) GetAssets() []*types.Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *RegisterAssetParam) GetStartDate() int64 {
	if x != nil {
		return x.StartDate
	}
	return 0
}

func (x *RegisterAssetParam) GetEndDate() int64 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

func (x *RegisterAssetParam) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ContractsByAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr   string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Count  int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Offset int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ContractsByAddressRequest) Reset() {
	*x = ContractsByAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractsByAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractsByAddressRequest) ProtoMessage() {}

func (x *ContractsByAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractsByAddressRequest.ProtoReflect.Descriptor instead.
func (*ContractsByAddressRequest) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{10}
}

func (x *ContractsByAddressRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ContractsByAddressRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ContractsByAddressRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ContractsByStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr   string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Count  int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Offset int32  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ContractsByStatusRequest) Reset() {
	*x = ContractsByStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractsByStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractsByStatusRequest) ProtoMessage() {}

func (x *ContractsByStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractsByStatusRequest.ProtoReflect.Descriptor instead.
func (*ContractsByStatusRequest) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{11}
}

func (x *ContractsByStatusRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ContractsByStatusRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ContractsByStatusRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ContractsByStatusRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ContractAddressByPartyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr     string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	StopName string `protobuf:"bytes,2,opt,name=stopName,proto3" json:"stopName,omitempty"`
}

func (x *ContractAddressByPartyRequest) Reset() {
	*x = ContractAddressByPartyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractAddressByPartyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractAddressByPartyRequest) ProtoMessage() {}

func (x *ContractAddressByPartyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractAddressByPartyRequest.ProtoReflect.Descriptor instead.
func (*ContractAddressByPartyRequest) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{12}
}

func (x *ContractAddressByPartyRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ContractAddressByPartyRequest) GetStopName() string {
	if x != nil {
		return x.StopName
	}
	return ""
}

type ProcessCDRBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr   string            `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Params []*types.CDRParam `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *ProcessCDRBlockRequest) Reset() {
	*x = ProcessCDRBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessCDRBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessCDRBlockRequest) ProtoMessage() {}

func (x *ProcessCDRBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessCDRBlockRequest.ProtoReflect.Descriptor instead.
func (*ProcessCDRBlockRequest) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{13}
}

func (x *ProcessCDRBlockRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ProcessCDRBlockRequest) GetParams() []*types.CDRParam {
	if x != nil {
		return x.Params
	}
	return nil
}

type CDRStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *CDRStatusRequest) Reset() {
	*x = CDRStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDRStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDRStatusRequest) ProtoMessage() {}

func (x *CDRStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDRStatusRequest.ProtoReflect.Descriptor instead.
func (*CDRStatusRequest) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{14}
}

func (x *CDRStatusRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *CDRStatusRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type CDRStatusByCdrDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr        string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Index       uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Sender      string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	Destination string `protobuf:"bytes,4,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *CDRStatusByCdrDataRequest) Reset() {
	*x = CDRStatusByCdrDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDRStatusByCdrDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDRStatusByCdrDataRequest) ProtoMessage() {}

func (x *CDRStatusByCdrDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDRStatusByCdrDataRequest.ProtoReflect.Descriptor instead.
func (*CDRStatusByCdrDataRequest) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{15}
}

func (x *CDRStatusByCdrDataRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *CDRStatusByCdrDataRequest) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CDRStatusByCdrDataRequest) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *CDRStatusByCdrDataRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

type CDRStatusByDateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr   string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Start  int64  `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	End    int64  `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	Count  int32  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Offset int32  `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *CDRStatusByDateRequest) Reset() {
	*x = CDRStatusByDateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDRStatusByDateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDRStatusByDateRequest) ProtoMessage() {}

func (x *CDRStatusByDateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDRStatusByDateRequest.ProtoReflect.Descriptor instead.
func (*CDRStatusByDateRequest) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{16}
}

func (x *CDRStatusByDateRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *CDRStatusByDateRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *CDRStatusByDateRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *CDRStatusByDateRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *CDRStatusByDateRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type MultiPartyCDRStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstAddr  string `protobuf:"bytes,1,opt,name=firstAddr,proto3" json:"firstAddr,omitempty"`
	SecondAddr string `protobuf:"bytes,2,opt,name=secondAddr,proto3" json:"secondAddr,omitempty"`
	Count      int32  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Offset     int32  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *MultiPartyCDRStatusRequest) Reset() {
	*x = MultiPartyCDRStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiPartyCDRStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiPartyCDRStatusRequest) ProtoMessage() {}

func (x *MultiPartyCDRStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiPartyCDRStatusRequest.ProtoReflect.Descriptor instead.
func (*MultiPartyCDRStatusRequest) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{17}
}

func (x *MultiPartyCDRStatusRequest) GetFirstAddr() string {
	if x != nil {
		return x.FirstAddr
	}
	return ""
}

func (x *MultiPartyCDRStatusRequest) GetSecondAddr() string {
	if x != nil {
		return x.SecondAddr
	}
	return ""
}

func (x *MultiPartyCDRStatusRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *MultiPartyCDRStatusRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr  string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Start int64  `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	End   int64  `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *ReportRequest) Reset() {
	*x = ReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportRequest) ProtoMessage() {}

func (x *ReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportRequest.ProtoReflect.Descriptor instead.
func (*ReportRequest) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{18}
}

func (x *ReportRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ReportRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ReportRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type ReportByAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr    string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Account string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Start   int64  `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	End     int64  `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *ReportByAccountRequest) Reset() {
	*x = ReportByAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportByAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportByAccountRequest) ProtoMessage() {}

func (x *ReportByAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportByAccountRequest.ProtoReflect.Descriptor instead.
func (*ReportByAccountRequest) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{19}
}

func (x *ReportByAccountRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ReportByAccountRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *ReportByAccountRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ReportByAccountRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type ReportByCustomerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr     string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Customer string `protobuf:"bytes,2,opt,name=customer,proto3" json:"customer,omitempty"`
	Start    int64  `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	End      int64  `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *ReportByCustomerRequest) Reset() {
	*x = ReportByCustomerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportByCustomerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportByCustomerRequest) ProtoMessage() {}

func (x *ReportByCustomerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportByCustomerRequest.ProtoReflect.Descriptor instead.
func (*ReportByCustomerRequest) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{20}
}

func (x *ReportByCustomerRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ReportByCustomerRequest) GetCustomer() string {
	if x != nil {
		return x.Customer
	}
	return ""
}

func (x *ReportByCustomerRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ReportByCustomerRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type InvoicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr  string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Start int64  `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	End   int64  `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *InvoicesRequest) Reset() {
	*x = InvoicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoicesRequest) ProtoMessage() {}

func (x *InvoicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoicesRequest.ProtoReflect.Descriptor instead.
func (*InvoicesRequest) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{21}
}

func (x *InvoicesRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *InvoicesRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *InvoicesRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type InvoicesByAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr    string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Account string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Start   int64  `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	End     int64  `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *InvoicesByAccountRequest) Reset() {
	*x = InvoicesByAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoicesByAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoicesByAccountRequest) ProtoMessage() {}

func (x *InvoicesByAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoicesByAccountRequest.ProtoReflect.Descriptor instead.
func (*InvoicesByAccountRequest) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{22}
}

func (x *InvoicesByAccountRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *InvoicesByAccountRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *InvoicesByAccountRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *InvoicesByAccountRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type InvoicesByCustomerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr     string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Customer string `protobuf:"bytes,2,opt,name=customer,proto3" json:"customer,omitempty"`
	Start    int64  `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	End      int64  `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *InvoicesByCustomerRequest) Reset() {
	*x = InvoicesByCustomerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoicesByCustomerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoicesByCustomerRequest) ProtoMessage() {}

func (x *InvoicesByCustomerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoicesByCustomerRequest.ProtoReflect.Descriptor instead.
func (*InvoicesByCustomerRequest) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{23}
}

func (x *InvoicesByCustomerRequest) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *InvoicesByCustomerRequest) GetCustomer() string {
	if x != nil {
		return x.Customer
	}
	return ""
}

func (x *InvoicesByCustomerRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *InvoicesByCustomerRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type MultiPartyInvoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstAddr  string `protobuf:"bytes,1,opt,name=firstAddr,proto3" json:"firstAddr,omitempty"`
	SecondAddr string `protobuf:"bytes,2,opt,name=secondAddr,proto3" json:"secondAddr,omitempty"`
	Start      int64  `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	End        int64  `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *MultiPartyInvoiceRequest) Reset() {
	*x = MultiPartyInvoiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiPartyInvoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiPartyInvoiceRequest) ProtoMessage() {}

func (x *MultiPartyInvoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiPartyInvoiceRequest.ProtoReflect.Descriptor instead.
func (*MultiPartyInvoiceRequest) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{24}
}

func (x *MultiPartyInvoiceRequest) GetFirstAddr() string {
	if x != nil {
		return x.FirstAddr
	}
	return ""
}

func (x *MultiPartyInvoiceRequest) GetSecondAddr() string {
	if x != nil {
		return x.SecondAddr
	}
	return ""
}

func (x *MultiPartyInvoiceRequest) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *MultiPartyInvoiceRequest) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type AssetsByOwnerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner  string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Count  int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Offset int32  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *AssetsByOwnerRequest) Reset() {
	*x = AssetsByOwnerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetsByOwnerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetsByOwnerRequest) ProtoMessage() {}

func (x *AssetsByOwnerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetsByOwnerRequest.ProtoReflect.Descriptor instead.
func (*AssetsByOwnerRequest) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{25}
}

func (x *AssetsByOwnerRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *AssetsByOwnerRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AssetsByOwnerRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type InvoiceRecords struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*types.InvoiceRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *InvoiceRecords) Reset() {
	*x = InvoiceRecords{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceRecords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceRecords) ProtoMessage() {}

func (x *InvoiceRecords) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceRecords.ProtoReflect.Descriptor instead.
func (*InvoiceRecords) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{26}
}

func (x *InvoiceRecords) GetRecords() []*types.InvoiceRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type AssetParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params []*AssetParam `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *AssetParams) Reset() {
	*x = AssetParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetParams) ProtoMessage() {}

func (x *AssetParams) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetParams.ProtoReflect.Descriptor instead.
func (*AssetParams) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{27}
}

func (x *AssetParams) GetParams() []*AssetParam {
	if x != nil {
		return x.Params
	}
	return nil
}

type AssetParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner     *types.Contractor `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Assets    []*Asset          `protobuf:"bytes,2,rep,name=assets,proto3" json:"assets,omitempty"`
	SignDate  int64             `protobuf:"varint,3,opt,name=signDate,proto3" json:"signDate,omitempty"`
	StartDate int64             `protobuf:"varint,4,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate   int64             `protobuf:"varint,5,opt,name=endDate,proto3" json:"endDate,omitempty"`
	Status    int32             `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	Address   string            `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *AssetParam) Reset() {
	*x = AssetParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetParam) ProtoMessage() {}

func (x *AssetParam) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetParam.ProtoReflect.Descriptor instead.
func (*AssetParam) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{28}
}

func (x *AssetParam) GetOwner() *types.Contractor {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *AssetParam) GetAssets() []*Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *AssetParam) GetSignDate() int64 {
	if x != nil {
		return x.SignDate
	}
	return 0
}

func (x *AssetParam) GetStartDate() int64 {
	if x != nil {
		return x.StartDate
	}
	return 0
}

func (x *AssetParam) GetEndDate() int64 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

func (x *AssetParam) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AssetParam) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mcc         uint64       `protobuf:"varint,1,opt,name=mcc,proto3" json:"mcc,omitempty"`
	Mnc         uint64       `protobuf:"varint,2,opt,name=mnc,proto3" json:"mnc,omitempty"`
	TotalAmount uint64       `protobuf:"varint,3,opt,name=totalAmount,proto3" json:"totalAmount,omitempty"`
	Sla         []*types.SLA `protobuf:"bytes,4,rep,name=sla,proto3" json:"sla,omitempty"`
	AssetID     string       `protobuf:"bytes,5,opt,name=assetID,proto3" json:"assetID,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settlement_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_settlement_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_settlement_proto_rawDescGZIP(), []int{29}
}

func (x *Asset) GetMcc() uint64 {
	if x != nil {
		return x.Mcc
	}
	return 0
}

func (x *Asset) GetMnc() uint64 {
	if x != nil {
		return x.Mnc
	}
	return 0
}

func (x *Asset) GetTotalAmount() uint64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *Asset) GetSla() []*types.SLA {
	if x != nil {
		return x.Sla
	}
	return nil
}

func (x *Asset) GetAssetID() string {
	if x != nil {
		return x.AssetID
	}
	return ""
}

var File_settlement_proto protoreflect.FileDescriptor

var file_settlement_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57,
	0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x29, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x74, 0x79, 0x41, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x79, 0x41, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x42, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x42, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x22, 0x55, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2e,
	0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x6d, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x40, 0x0a, 0x0f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xcf, 0x03, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x29,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x74, 0x79, 0x41, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x06, 0x70, 0x61, 0x72, 0x74, 0x79, 0x41, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x42, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x42, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x12, 0x32, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x53,
	0x74, 0x6f, 0x70, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x65, 0x53,
	0x74, 0x6f, 0x70, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x6f, 0x70,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x6f,
	0x70, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x0a,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4e, 0x0a, 0x13, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x12, 0x37, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x22, 0x69, 0x0a, 0x0e, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3d, 0x0a, 0x0e, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x0e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x09, 0x43, 0x44, 0x52, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x06,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44, 0x52, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x4b, 0x0a, 0x0b, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x43, 0x44, 0x52, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3b, 0x0a, 0x0b, 0x43, 0x44, 0x52, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x44, 0x52, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5d, 0x0a, 0x19, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x74, 0x0a, 0x18, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22,
	0x4f, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x55, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x44, 0x52, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x27,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x44, 0x52, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x3a, 0x0a, 0x10, 0x43, 0x44, 0x52, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x22, 0x7f, 0x0a, 0x19, 0x43, 0x44, 0x52, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x79, 0x43, 0x64, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x16, 0x43, 0x44, 0x52, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x1a, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x44, 0x52, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0x4b, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x22, 0x6e, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x22, 0x71, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x22, 0x4d, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x65, 0x6e, 0x64, 0x22, 0x70, 0x0a, 0x18, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x42,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x73, 0x0a, 0x19, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x73, 0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x18, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x41,
	0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x5a, 0x0a,
	0x14, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x40, 0x0a, 0x0e, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x38, 0x0a, 0x0b, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x27, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x05, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x63, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6d, 0x63, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6d, 0x6e, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x03, 0x73, 0x6c, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53,
	0x4c, 0x41, 0x52, 0x03, 0x73, 0x6c, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x44, 0x32, 0xa2, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x50, 0x49, 0x12, 0x59, 0x0a, 0x09, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x0e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x20, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x6a,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0b, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x2d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x67, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x76, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x3a,
	0x01, 0x2a, 0x12, 0x6d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12,
	0x20, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x64, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x50, 0x72, 0x65, 0x53, 0x74,
	0x6f, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x29, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x64, 0x64, 0x50, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x3a, 0x01, 0x2a, 0x12, 0x70, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22,
	0x21, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x66, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x4e,
	0x65, 0x78, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x11,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x78,
	0x74, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x6c, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x74,
	0x6f, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x2d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x53,
	0x74, 0x6f, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x72, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x6f, 0x70,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x11, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x65, 0x78, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12,
	0x61, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x22, 0x23, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x42, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x23, 0x12, 0x21, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x42, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x7d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x42,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x22, 0x12, 0x20, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f,
	0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x42, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x7c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x42, 0x79, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x21, 0x12, 0x1f, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67,
	0x65, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x12, 0x7e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x41, 0x73, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x42, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x12, 0x20, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x41, 0x73, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x41, 0x12, 0x7e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x41, 0x73, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x42, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x12, 0x20, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x41, 0x73, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x42, 0x12, 0x92, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x41, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x4e,
	0x65, 0x78, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x90, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x50, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x24, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x42, 0x50, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x71, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x44, 0x52, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x44, 0x52, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x44, 0x52, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x77, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x5b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x44, 0x52,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x44, 0x52, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44, 0x52, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x43, 0x44, 0x52, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x76, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x44, 0x52, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x79, 0x43, 0x64, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44, 0x52, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79,
	0x43, 0x64, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44, 0x52, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x43, 0x44, 0x52, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x79, 0x43, 0x64, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x6f, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x43, 0x44, 0x52, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44, 0x52, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44, 0x52, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x43, 0x44, 0x52,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x6c, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x43, 0x44, 0x52, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x44, 0x52, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x43, 0x44, 0x52, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7b, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x44, 0x52, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x44, 0x52, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x44, 0x52, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x22, 0x2a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x67, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x72, 0x74, 0x79, 0x43, 0x44,
	0x52, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x64, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12,
	0x1c, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x7f, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x82,
	0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c,
	0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x82, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x73, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x42, 0x79, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x85, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x73, 0x42, 0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x28, 0x12, 0x26, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x42,
	0x79, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x7b, 0x0a, 0x1a, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x42, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26,
	0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x42, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x2d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x1f,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x50, 0x61, 0x72, 0x74, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x56, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x53,
	0x74, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x12, 0x1b, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65,
	0x74, 0x50, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x58, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x74,
	0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x70, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x11, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x29,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x53, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x20, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x69,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x42, 0x79, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x73, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16,
	0x12, 0x14, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_settlement_proto_rawDescOnce sync.Once
	file_settlement_proto_rawDescData = file_settlement_proto_rawDesc
)

func file_settlement_proto_rawDescGZIP() []byte {
	file_settlement_proto_rawDescOnce.Do(func() {
		file_settlement_proto_rawDescData = protoimpl.X.CompressGZIP(file_settlement_proto_rawDescData)
	})
	return file_settlement_proto_rawDescData
}

var file_settlement_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_settlement_proto_goTypes = []interface{}{
	(*SignContractParam)(nil),             // 0: proto.SignContractParam
	(*CreateContractParam)(nil),           // 1: proto.CreateContractParam
	(*StopParam)(nil),                     // 2: proto.StopParam
	(*UpdateStopParam)(nil),               // 3: proto.UpdateStopParam
	(*SettlementContract)(nil),            // 4: proto.SettlementContract
	(*SettlementContracts)(nil),           // 5: proto.SettlementContracts
	(*TerminateParam)(nil),                // 6: proto.TerminateParam
	(*CDRStatus)(nil),                     // 7: proto.CDRStatus
	(*CDRStatuses)(nil),                   // 8: proto.CDRStatuses
	(*RegisterAssetParam)(nil),            // 9: proto.RegisterAssetParam
	(*ContractsByAddressRequest)(nil),     // 10: proto.ContractsByAddressRequest
	(*ContractsByStatusRequest)(nil),      // 11: proto.ContractsByStatusRequest
	(*ContractAddressByPartyRequest)(nil), // 12: proto.ContractAddressByPartyRequest
	(*ProcessCDRBlockRequest)(nil),        // 13: proto.ProcessCDRBlockRequest
	(*CDRStatusRequest)(nil),              // 14: proto.CDRStatusRequest
	(*CDRStatusByCdrDataRequest)(nil),     // 15: proto.CDRStatusByCdrDataRequest
	(*CDRStatusByDateRequest)(nil),        // 16: proto.CDRStatusByDateRequest
	(*MultiPartyCDRStatusRequest)(nil),    // 17: proto.MultiPartyCDRStatusRequest
	(*ReportRequest)(nil),                 // 18: proto.ReportRequest
	(*ReportByAccountRequest)(nil),        // 19: proto.ReportByAccountRequest
	(*ReportByCustomerRequest)(nil),       // 20: proto.ReportByCustomerRequest
	(*InvoicesRequest)(nil),               // 21: proto.InvoicesRequest
	(*InvoicesByAccountRequest)(nil),      // 22: proto.InvoicesByAccountRequest
	(*InvoicesByCustomerRequest)(nil),     // 23: proto.InvoicesByCustomerRequest
	(*MultiPartyInvoiceRequest)(nil),      // 24: proto.MultiPartyInvoiceRequest
	(*AssetsByOwnerRequest)(nil),          // 25: proto.AssetsByOwnerRequest
	(*InvoiceRecords)(nil),                // 26: proto.InvoiceRecords
	(*AssetParams)(nil),                   // 27: proto.AssetParams
	(*AssetParam)(nil),                    // 28: proto.AssetParam
	(*Asset)(nil),                         // 29: proto.Asset
	nil,                                   // 30: proto.CDRStatus.ParamsEntry
	(*types.Contractor)(nil),              // 31: types.Contractor
	(*types.ContractService)(nil),         // 32: types.ContractService
	(*types.StopParam)(nil),               // 33: types.StopParam
	(*types.UpdateStopParam)(nil),         // 34: types.UpdateStopParam
	(*types.Terminator)(nil),              // 35: types.Terminator
	(*types.TerminateParam)(nil),          // 36: types.TerminateParam
	(*types.Asset)(nil),                   // 37: types.Asset
	(*types.CDRParam)(nil),                // 38: types.CDRParam
	(*types.InvoiceRecord)(nil),           // 39: types.InvoiceRecord
	(*types.SLA)(nil),                     // 40: types.SLA
	(*types.CDRParams)(nil),               // 41: types.CDRParams
	(*types.CreateContractParam)(nil),     // 42: types.CreateContractParam
	(*types.Hash)(nil),                    // 43: types.Hash
	(*Offset)(nil),                        // 44: proto.Offset
	(*types.Address)(nil),                 // 45: types.Address
	(*types.StateBlock)(nil),              // 46: types.StateBlock
	(*types.SummaryResult)(nil),           // 47: types.SummaryResult
	(*types.MultiPartySummaryResult)(nil), // 48: types.MultiPartySummaryResult
	(*Strings)(nil),                       // 49: proto.Strings
}
var file_settlement_proto_depIdxs = []int32{
	31, // 0: proto.CreateContractParam.partyA:type_name -> types.Contractor
	31, // 1: proto.CreateContractParam.partyB:type_name -> types.Contractor
	32, // 2: proto.CreateContractParam.services:type_name -> types.ContractService
	33, // 3: proto.StopParam.stopParam:type_name -> types.StopParam
	34, // 4: proto.UpdateStopParam.updateStopParam:type_name -> types.UpdateStopParam
	31, // 5: proto.SettlementContract.partyA:type_name -> types.Contractor
	31, // 6: proto.SettlementContract.partyB:type_name -> types.Contractor
	32, // 7: proto.SettlementContract.services:type_name -> types.ContractService
	35, // 8: proto.SettlementContract.terminator:type_name -> types.Terminator
	4,  // 9: proto.SettlementContracts.contracts:type_name -> proto.SettlementContract
	36, // 10: proto.TerminateParam.terminateParam:type_name -> types.TerminateParam
	30, // 11: proto.CDRStatus.Params:type_name -> proto.CDRStatus.ParamsEntry
	7,  // 12: proto.CDRStatuses.statuses:type_name -> proto.CDRStatus
	31, // 13: proto.RegisterAssetParam.owner:type_name -> types.Contractor
	37, // 14: proto.RegisterAssetParam.assets:type_name -> types.Asset
	38, // 15: proto.ProcessCDRBlockRequest.params:type_name -> types.CDRParam
	39, // 16: proto.InvoiceRecords.records:type_name -> types.InvoiceRecord
	28, // 17: proto.AssetParams.params:type_name -> proto.AssetParam
	31, // 18: proto.AssetParam.owner:type_name -> types.Contractor
	29, // 19: proto.AssetParam.assets:type_name -> proto.Asset
	40, // 20: proto.Asset.sla:type_name -> types.SLA
	41, // 21: proto.CDRStatus.ParamsEntry.value:type_name -> types.CDRParams
	42, // 22: proto.SettlementAPI.ToAddress:input_type -> types.CreateContractParam
	43, // 23: proto.SettlementAPI.GetSettlementRewardsBlock:input_type -> types.Hash
	1,  // 24: proto.SettlementAPI.GetCreateContractBlock:input_type -> proto.CreateContractParam
	0,  // 25: proto.SettlementAPI.GetSignContractBlock:input_type -> proto.SignContractParam
	2,  // 26: proto.SettlementAPI.GetAddPreStopBlock:input_type -> proto.StopParam
	2,  // 27: proto.SettlementAPI.GetRemovePreStopBlock:input_type -> proto.StopParam
	3,  // 28: proto.SettlementAPI.GetUpdatePreStopBlock:input_type -> proto.UpdateStopParam
	2,  // 29: proto.SettlementAPI.GetAddNextStopBlock:input_type -> proto.StopParam
	2,  // 30: proto.SettlementAPI.GetRemoveNextStopBlock:input_type -> proto.StopParam
	3,  // 31: proto.SettlementAPI.GetUpdateNextStopBlock:input_type -> proto.UpdateStopParam
	44, // 32: proto.SettlementAPI.GetAllContracts:input_type -> proto.Offset
	10, // 33: proto.SettlementAPI.GetContractsByAddress:input_type -> proto.ContractsByAddressRequest
	11, // 34: proto.SettlementAPI.GetContractsByStatus:input_type -> proto.ContractsByStatusRequest
	10, // 35: proto.SettlementAPI.GetExpiredContracts:input_type -> proto.ContractsByAddressRequest
	10, // 36: proto.SettlementAPI.GetContractsAsPartyA:input_type -> proto.ContractsByAddressRequest
	10, // 37: proto.SettlementAPI.GetContractsAsPartyB:input_type -> proto.ContractsByAddressRequest
	12, // 38: proto.SettlementAPI.GetContractAddressByPartyANextStop:input_type -> proto.ContractAddressByPartyRequest
	12, // 39: proto.SettlementAPI.GetContractAddressByPartyBPreStop:input_type -> proto.ContractAddressByPartyRequest
	13, // 40: proto.SettlementAPI.GetProcessCDRBlock:input_type -> proto.ProcessCDRBlockRequest
	6,  // 41: proto.SettlementAPI.GetTerminateContractBlock:input_type -> proto.TerminateParam
	14, // 42: proto.SettlementAPI.GetCDRStatus:input_type -> proto.CDRStatusRequest
	15, // 43: proto.SettlementAPI.GetCDRStatusByCdrData:input_type -> proto.CDRStatusByCdrDataRequest
	16, // 44: proto.SettlementAPI.GetCDRStatusByDate:input_type -> proto.CDRStatusByDateRequest
	10, // 45: proto.SettlementAPI.GetAllCDRStatus:input_type -> proto.ContractsByAddressRequest
	17, // 46: proto.SettlementAPI.GetMultiPartyCDRStatus:input_type -> proto.MultiPartyCDRStatusRequest
	18, // 47: proto.SettlementAPI.GetSummaryReport:input_type -> proto.ReportRequest
	19, // 48: proto.SettlementAPI.GetSummaryReportByAccount:input_type -> proto.ReportByAccountRequest
	20, // 49: proto.SettlementAPI.GetSummaryReportByCustomer:input_type -> proto.ReportByCustomerRequest
	21, // 50: proto.SettlementAPI.GenerateInvoices:input_type -> proto.InvoicesRequest
	22, // 51: proto.SettlementAPI.GenerateInvoicesByAccount:input_type -> proto.InvoicesByAccountRequest
	23, // 52: proto.SettlementAPI.GenerateInvoicesByCustomer:input_type -> proto.InvoicesByCustomerRequest
	21, // 53: proto.SettlementAPI.GenerateInvoicesByContract:input_type -> proto.InvoicesRequest
	24, // 54: proto.SettlementAPI.GenerateMultiPartyInvoice:input_type -> proto.MultiPartyInvoiceRequest
	24, // 55: proto.SettlementAPI.GenerateMultiPartySummaryReport:input_type -> proto.MultiPartyInvoiceRequest
	45, // 56: proto.SettlementAPI.GetPreStopNames:input_type -> types.Address
	45, // 57: proto.SettlementAPI.GetNextStopNames:input_type -> types.Address
	9,  // 58: proto.SettlementAPI.GetRegisterAssetBlock:input_type -> proto.RegisterAssetParam
	44, // 59: proto.SettlementAPI.GetAllAssets:input_type -> proto.Offset
	25, // 60: proto.SettlementAPI.GetAssetsByOwner:input_type -> proto.AssetsByOwnerRequest
	45, // 61: proto.SettlementAPI.GetAsset:input_type -> types.Address
	45, // 62: proto.SettlementAPI.ToAddress:output_type -> types.Address
	46, // 63: proto.SettlementAPI.GetSettlementRewardsBlock:output_type -> types.StateBlock
	46, // 64: proto.SettlementAPI.GetCreateContractBlock:output_type -> types.StateBlock
	46, // 65: proto.SettlementAPI.GetSignContractBlock:output_type -> types.StateBlock
	46, // 66: proto.SettlementAPI.GetAddPreStopBlock:output_type -> types.StateBlock
	46, // 67: proto.SettlementAPI.GetRemovePreStopBlock:output_type -> types.StateBlock
	46, // 68: proto.SettlementAPI.GetUpdatePreStopBlock:output_type -> types.StateBlock
	46, // 69: proto.SettlementAPI.GetAddNextStopBlock:output_type -> types.StateBlock
	46, // 70: proto.SettlementAPI.GetRemoveNextStopBlock:output_type -> types.StateBlock
	46, // 71: proto.SettlementAPI.GetUpdateNextStopBlock:output_type -> types.StateBlock
	5,  // 72: proto.SettlementAPI.GetAllContracts:output_type -> proto.SettlementContracts
	5,  // 73: proto.SettlementAPI.GetContractsByAddress:output_type -> proto.SettlementContracts
	5,  // 74: proto.SettlementAPI.GetContractsByStatus:output_type -> proto.SettlementContracts
	5,  // 75: proto.SettlementAPI.GetExpiredContracts:output_type -> proto.SettlementContracts
	5,  // 76: proto.SettlementAPI.GetContractsAsPartyA:output_type -> proto.SettlementContracts
	5,  // 77: proto.SettlementAPI.GetContractsAsPartyB:output_type -> proto.SettlementContracts
	45, // 78: proto.SettlementAPI.GetContractAddressByPartyANextStop:output_type -> types.Address
	45, // 79: proto.SettlementAPI.GetContractAddressByPartyBPreStop:output_type -> types.Address
	46, // 80: proto.SettlementAPI.GetProcessCDRBlock:output_type -> types.StateBlock
	46, // 81: proto.SettlementAPI.GetTerminateContractBlock:output_type -> types.StateBlock
	7,  // 82: proto.SettlementAPI.GetCDRStatus:output_type -> proto.CDRStatus
	7,  // 83: proto.SettlementAPI.GetCDRStatusByCdrData:output_type -> proto.CDRStatus
	8,  // 84: proto.SettlementAPI.GetCDRStatusByDate:output_type -> proto.CDRStatuses
	8,  // 85: proto.SettlementAPI.GetAllCDRStatus:output_type -> proto.CDRStatuses
	8,  // 86: proto.SettlementAPI.GetMultiPartyCDRStatus:output_type -> proto.CDRStatuses
	47, // 87: proto.SettlementAPI.GetSummaryReport:output_type -> types.SummaryResult
	47, // 88: proto.SettlementAPI.GetSummaryReportByAccount:output_type -> types.SummaryResult
	47, // 89: proto.SettlementAPI.GetSummaryReportByCustomer:output_type -> types.SummaryResult
	26, // 90: proto.SettlementAPI.GenerateInvoices:output_type -> proto.InvoiceRecords
	26, // 91: proto.SettlementAPI.GenerateInvoicesByAccount:output_type -> proto.InvoiceRecords
	26, // 92: proto.SettlementAPI.GenerateInvoicesByCustomer:output_type -> proto.InvoiceRecords
	26, // 93: proto.SettlementAPI.GenerateInvoicesByContract:output_type -> proto.InvoiceRecords
	26, // 94: proto.SettlementAPI.GenerateMultiPartyInvoice:output_type -> proto.InvoiceRecords
	48, // 95: proto.SettlementAPI.GenerateMultiPartySummaryReport:output_type -> types.MultiPartySummaryResult
	49, // 96: proto.SettlementAPI.GetPreStopNames:output_type -> proto.Strings
	49, // 97: proto.SettlementAPI.GetNextStopNames:output_type -> proto.Strings
	46, // 98: proto.SettlementAPI.GetRegisterAssetBlock:output_type -> types.StateBlock
	27, // 99: proto.SettlementAPI.GetAllAssets:output_type -> proto.AssetParams
	27, // 100: proto.SettlementAPI.GetAssetsByOwner:output_type -> proto.AssetParams
	28, // 101: proto.SettlementAPI.GetAsset:output_type -> proto.AssetParam
	62, // [62:102] is the sub-list for method output_type
	22, // [22:62] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_settlement_proto_init() }
func file_settlement_proto_init() {
	if File_settlement_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_settlement_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignContractParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateContractParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStopParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettlementContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettlementContracts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminateParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDRStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDRStatuses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterAssetParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractsByAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractsByStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractAddressByPartyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessCDRBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDRStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDRStatusByCdrDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDRStatusByDateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiPartyCDRStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportByAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportByCustomerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoicesByAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoicesByCustomerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiPartyInvoiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetsByOwnerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceRecords); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settlement_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_settlement_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_settlement_proto_goTypes,
		DependencyIndexes: file_settlement_proto_depIdxs,
		MessageInfos:      file_settlement_proto_msgTypes,
	}.Build()
	File_settlement_proto = out.File
	file_settlement_proto_rawDesc = nil
	file_settlement_proto_goTypes = nil
	file_settlement_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SettlementAPIClient is the client API for SettlementAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SettlementAPIClient interface {
	ToAddress(ctx context.Context, in *types.CreateContractParam, opts ...grpc.CallOption) (*types.Address, error)
	GetSettlementRewardsBlock(ctx context.Context, in *types.Hash, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetCreateContractBlock(ctx context.Context, in *CreateContractParam, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetSignContractBlock(ctx context.Context, in *SignContractParam, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetAddPreStopBlock(ctx context.Context, in *StopParam, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetRemovePreStopBlock(ctx context.Context, in *StopParam, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetUpdatePreStopBlock(ctx context.Context, in *UpdateStopParam, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetAddNextStopBlock(ctx context.Context, in *StopParam, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetRemoveNextStopBlock(ctx context.Context, in *StopParam, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetUpdateNextStopBlock(ctx context.Context, in *UpdateStopParam, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetAllContracts(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*SettlementContracts, error)
	GetContractsByAddress(ctx context.Context, in *ContractsByAddressRequest, opts ...grpc.CallOption) (*SettlementContracts, error)
	GetContractsByStatus(ctx context.Context, in *ContractsByStatusRequest, opts ...grpc.CallOption) (*SettlementContracts, error)
	GetExpiredContracts(ctx context.Context, in *ContractsByAddressRequest, opts ...grpc.CallOption) (*SettlementContracts, error)
	GetContractsAsPartyA(ctx context.Context, in *ContractsByAddressRequest, opts ...grpc.CallOption) (*SettlementContracts, error)
	GetContractsAsPartyB(ctx context.Context, in *ContractsByAddressRequest, opts ...grpc.CallOption) (*SettlementContracts, error)
	GetContractAddressByPartyANextStop(ctx context.Context, in *ContractAddressByPartyRequest, opts ...grpc.CallOption) (*types.Address, error)
	GetContractAddressByPartyBPreStop(ctx context.Context, in *ContractAddressByPartyRequest, opts ...grpc.CallOption) (*types.Address, error)
	GetProcessCDRBlock(ctx context.Context, in *ProcessCDRBlockRequest, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetTerminateContractBlock(ctx context.Context, in *TerminateParam, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetCDRStatus(ctx context.Context, in *CDRStatusRequest, opts ...grpc.CallOption) (*CDRStatus, error)
	GetCDRStatusByCdrData(ctx context.Context, in *CDRStatusByCdrDataRequest, opts ...grpc.CallOption) (*CDRStatus, error)
	GetCDRStatusByDate(ctx context.Context, in *CDRStatusByDateRequest, opts ...grpc.CallOption) (*CDRStatuses, error)
	GetAllCDRStatus(ctx context.Context, in *ContractsByAddressRequest, opts ...grpc.CallOption) (*CDRStatuses, error)
	GetMultiPartyCDRStatus(ctx context.Context, in *MultiPartyCDRStatusRequest, opts ...grpc.CallOption) (*CDRStatuses, error)
	GetSummaryReport(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*types.SummaryResult, error)
	GetSummaryReportByAccount(ctx context.Context, in *ReportByAccountRequest, opts ...grpc.CallOption) (*types.SummaryResult, error)
	GetSummaryReportByCustomer(ctx context.Context, in *ReportByCustomerRequest, opts ...grpc.CallOption) (*types.SummaryResult, error)
	GenerateInvoices(ctx context.Context, in *InvoicesRequest, opts ...grpc.CallOption) (*InvoiceRecords, error)
	GenerateInvoicesByAccount(ctx context.Context, in *InvoicesByAccountRequest, opts ...grpc.CallOption) (*InvoiceRecords, error)
	GenerateInvoicesByCustomer(ctx context.Context, in *InvoicesByCustomerRequest, opts ...grpc.CallOption) (*InvoiceRecords, error)
	GenerateInvoicesByContract(ctx context.Context, in *InvoicesRequest, opts ...grpc.CallOption) (*InvoiceRecords, error)
	GenerateMultiPartyInvoice(ctx context.Context, in *MultiPartyInvoiceRequest, opts ...grpc.CallOption) (*InvoiceRecords, error)
	GenerateMultiPartySummaryReport(ctx context.Context, in *MultiPartyInvoiceRequest, opts ...grpc.CallOption) (*types.MultiPartySummaryResult, error)
	GetPreStopNames(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*Strings, error)
	GetNextStopNames(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*Strings, error)
	GetRegisterAssetBlock(ctx context.Context, in *RegisterAssetParam, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetAllAssets(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*AssetParams, error)
	GetAssetsByOwner(ctx context.Context, in *AssetsByOwnerRequest, opts ...grpc.CallOption) (*AssetParams, error)
	GetAsset(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*AssetParam, error)
}

type settlementAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewSettlementAPIClient(cc grpc.ClientConnInterface) SettlementAPIClient {
	return &settlementAPIClient{cc}
}

func (c *settlementAPIClient) ToAddress(ctx context.Context, in *types.CreateContractParam, opts ...grpc.CallOption) (*types.Address, error) {
	out := new(types.Address)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/ToAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetSettlementRewardsBlock(ctx context.Context, in *types.Hash, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetSettlementRewardsBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetCreateContractBlock(ctx context.Context, in *CreateContractParam, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetCreateContractBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetSignContractBlock(ctx context.Context, in *SignContractParam, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetSignContractBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetAddPreStopBlock(ctx context.Context, in *StopParam, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetAddPreStopBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetRemovePreStopBlock(ctx context.Context, in *StopParam, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetRemovePreStopBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetUpdatePreStopBlock(ctx context.Context, in *UpdateStopParam, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetUpdatePreStopBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetAddNextStopBlock(ctx context.Context, in *StopParam, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetAddNextStopBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetRemoveNextStopBlock(ctx context.Context, in *StopParam, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetRemoveNextStopBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetUpdateNextStopBlock(ctx context.Context, in *UpdateStopParam, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetUpdateNextStopBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetAllContracts(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*SettlementContracts, error) {
	out := new(SettlementContracts)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetAllContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetContractsByAddress(ctx context.Context, in *ContractsByAddressRequest, opts ...grpc.CallOption) (*SettlementContracts, error) {
	out := new(SettlementContracts)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetContractsByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetContractsByStatus(ctx context.Context, in *ContractsByStatusRequest, opts ...grpc.CallOption) (*SettlementContracts, error) {
	out := new(SettlementContracts)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetContractsByStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetExpiredContracts(ctx context.Context, in *ContractsByAddressRequest, opts ...grpc.CallOption) (*SettlementContracts, error) {
	out := new(SettlementContracts)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetExpiredContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetContractsAsPartyA(ctx context.Context, in *ContractsByAddressRequest, opts ...grpc.CallOption) (*SettlementContracts, error) {
	out := new(SettlementContracts)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetContractsAsPartyA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetContractsAsPartyB(ctx context.Context, in *ContractsByAddressRequest, opts ...grpc.CallOption) (*SettlementContracts, error) {
	out := new(SettlementContracts)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetContractsAsPartyB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetContractAddressByPartyANextStop(ctx context.Context, in *ContractAddressByPartyRequest, opts ...grpc.CallOption) (*types.Address, error) {
	out := new(types.Address)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetContractAddressByPartyANextStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetContractAddressByPartyBPreStop(ctx context.Context, in *ContractAddressByPartyRequest, opts ...grpc.CallOption) (*types.Address, error) {
	out := new(types.Address)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetContractAddressByPartyBPreStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetProcessCDRBlock(ctx context.Context, in *ProcessCDRBlockRequest, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetProcessCDRBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetTerminateContractBlock(ctx context.Context, in *TerminateParam, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetTerminateContractBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetCDRStatus(ctx context.Context, in *CDRStatusRequest, opts ...grpc.CallOption) (*CDRStatus, error) {
	out := new(CDRStatus)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetCDRStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetCDRStatusByCdrData(ctx context.Context, in *CDRStatusByCdrDataRequest, opts ...grpc.CallOption) (*CDRStatus, error) {
	out := new(CDRStatus)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetCDRStatusByCdrData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetCDRStatusByDate(ctx context.Context, in *CDRStatusByDateRequest, opts ...grpc.CallOption) (*CDRStatuses, error) {
	out := new(CDRStatuses)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetCDRStatusByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetAllCDRStatus(ctx context.Context, in *ContractsByAddressRequest, opts ...grpc.CallOption) (*CDRStatuses, error) {
	out := new(CDRStatuses)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetAllCDRStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetMultiPartyCDRStatus(ctx context.Context, in *MultiPartyCDRStatusRequest, opts ...grpc.CallOption) (*CDRStatuses, error) {
	out := new(CDRStatuses)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetMultiPartyCDRStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetSummaryReport(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*types.SummaryResult, error) {
	out := new(types.SummaryResult)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetSummaryReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetSummaryReportByAccount(ctx context.Context, in *ReportByAccountRequest, opts ...grpc.CallOption) (*types.SummaryResult, error) {
	out := new(types.SummaryResult)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetSummaryReportByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetSummaryReportByCustomer(ctx context.Context, in *ReportByCustomerRequest, opts ...grpc.CallOption) (*types.SummaryResult, error) {
	out := new(types.SummaryResult)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetSummaryReportByCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GenerateInvoices(ctx context.Context, in *InvoicesRequest, opts ...grpc.CallOption) (*InvoiceRecords, error) {
	out := new(InvoiceRecords)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GenerateInvoices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GenerateInvoicesByAccount(ctx context.Context, in *InvoicesByAccountRequest, opts ...grpc.CallOption) (*InvoiceRecords, error) {
	out := new(InvoiceRecords)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GenerateInvoicesByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GenerateInvoicesByCustomer(ctx context.Context, in *InvoicesByCustomerRequest, opts ...grpc.CallOption) (*InvoiceRecords, error) {
	out := new(InvoiceRecords)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GenerateInvoicesByCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GenerateInvoicesByContract(ctx context.Context, in *InvoicesRequest, opts ...grpc.CallOption) (*InvoiceRecords, error) {
	out := new(InvoiceRecords)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GenerateInvoicesByContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GenerateMultiPartyInvoice(ctx context.Context, in *MultiPartyInvoiceRequest, opts ...grpc.CallOption) (*InvoiceRecords, error) {
	out := new(InvoiceRecords)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GenerateMultiPartyInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GenerateMultiPartySummaryReport(ctx context.Context, in *MultiPartyInvoiceRequest, opts ...grpc.CallOption) (*types.MultiPartySummaryResult, error) {
	out := new(types.MultiPartySummaryResult)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GenerateMultiPartySummaryReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetPreStopNames(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*Strings, error) {
	out := new(Strings)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetPreStopNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetNextStopNames(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*Strings, error) {
	out := new(Strings)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetNextStopNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetRegisterAssetBlock(ctx context.Context, in *RegisterAssetParam, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetRegisterAssetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetAllAssets(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*AssetParams, error) {
	out := new(AssetParams)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetAllAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetAssetsByOwner(ctx context.Context, in *AssetsByOwnerRequest, opts ...grpc.CallOption) (*AssetParams, error) {
	out := new(AssetParams)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetAssetsByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settlementAPIClient) GetAsset(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*AssetParam, error) {
	out := new(AssetParam)
	err := c.cc.Invoke(ctx, "/proto.SettlementAPI/GetAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SettlementAPIServer is the server API for SettlementAPI service.
type SettlementAPIServer interface {
	ToAddress(context.Context, *types.CreateContractParam) (*types.Address, error)
	GetSettlementRewardsBlock(context.Context, *types.Hash) (*types.StateBlock, error)
	GetCreateContractBlock(context.Context, *CreateContractParam) (*types.StateBlock, error)
	GetSignContractBlock(context.Context, *SignContractParam) (*types.StateBlock, error)
	GetAddPreStopBlock(context.Context, *StopParam) (*types.StateBlock, error)
	GetRemovePreStopBlock(context.Context, *StopParam) (*types.StateBlock, error)
	GetUpdatePreStopBlock(context.Context, *UpdateStopParam) (*types.StateBlock, error)
	GetAddNextStopBlock(context.Context, *StopParam) (*types.StateBlock, error)
	GetRemoveNextStopBlock(context.Context, *StopParam) (*types.StateBlock, error)
	GetUpdateNextStopBlock(context.Context, *UpdateStopParam) (*types.StateBlock, error)
	GetAllContracts(context.Context, *Offset) (*SettlementContracts, error)
	GetContractsByAddress(context.Context, *ContractsByAddressRequest) (*SettlementContracts, error)
	GetContractsByStatus(context.Context, *ContractsByStatusRequest) (*SettlementContracts, error)
	GetExpiredContracts(context.Context, *ContractsByAddressRequest) (*SettlementContracts, error)
	GetContractsAsPartyA(context.Context, *ContractsByAddressRequest) (*SettlementContracts, error)
	GetContractsAsPartyB(context.Context, *ContractsByAddressRequest) (*SettlementContracts, error)
	GetContractAddressByPartyANextStop(context.Context, *ContractAddressByPartyRequest) (*types.Address, error)
	GetContractAddressByPartyBPreStop(context.Context, *ContractAddressByPartyRequest) (*types.Address, error)
	GetProcessCDRBlock(context.Context, *ProcessCDRBlockRequest) (*types.StateBlock, error)
	GetTerminateContractBlock(context.Context, *TerminateParam) (*types.StateBlock, error)
	GetCDRStatus(context.Context, *CDRStatusRequest) (*CDRStatus, error)
	GetCDRStatusByCdrData(context.Context, *CDRStatusByCdrDataRequest) (*CDRStatus, error)
	GetCDRStatusByDate(context.Context, *CDRStatusByDateRequest) (*CDRStatuses, error)
	GetAllCDRStatus(context.Context, *ContractsByAddressRequest) (*CDRStatuses, error)
	GetMultiPartyCDRStatus(context.Context, *MultiPartyCDRStatusRequest) (*CDRStatuses, error)
	GetSummaryReport(context.Context, *ReportRequest) (*types.SummaryResult, error)
	GetSummaryReportByAccount(context.Context, *ReportByAccountRequest) (*types.SummaryResult, error)
	GetSummaryReportByCustomer(context.Context, *ReportByCustomerRequest) (*types.SummaryResult, error)
	GenerateInvoices(context.Context, *InvoicesRequest) (*InvoiceRecords, error)
	GenerateInvoicesByAccount(context.Context, *InvoicesByAccountRequest) (*InvoiceRecords, error)
	GenerateInvoicesByCustomer(context.Context, *InvoicesByCustomerRequest) (*InvoiceRecords, error)
	GenerateInvoicesByContract(context.Context, *InvoicesRequest) (*InvoiceRecords, error)
	GenerateMultiPartyInvoice(context.Context, *MultiPartyInvoiceRequest) (*InvoiceRecords, error)
	GenerateMultiPartySummaryReport(context.Context, *MultiPartyInvoiceRequest) (*types.MultiPartySummaryResult, error)
	GetPreStopNames(context.Context, *types.Address) (*Strings, error)
	GetNextStopNames(context.Context, *types.Address) (*Strings, error)
	GetRegisterAssetBlock(context.Context, *RegisterAssetParam) (*types.StateBlock, error)
	GetAllAssets(context.Context, *Offset) (*AssetParams, error)
	GetAssetsByOwner(context.Context, *AssetsByOwnerRequest) (*AssetParams, error)
	GetAsset(context.Context, *types.Address) (*AssetParam, error)
}

// UnimplementedSettlementAPIServer can be embedded to have forward compatible implementations.
type UnimplementedSettlementAPIServer struct {
}

func (*UnimplementedSettlementAPIServer) ToAddress(context.Context, *types.CreateContractParam) (*types.Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToAddress not implemented")
}
func (*UnimplementedSettlementAPIServer) GetSettlementRewardsBlock(context.Context, *types.Hash) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettlementRewardsBlock not implemented")
}
func (*UnimplementedSettlementAPIServer) GetCreateContractBlock(context.Context, *CreateContractParam) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreateContractBlock not implemented")
}
func (*UnimplementedSettlementAPIServer) GetSignContractBlock(context.Context, *SignContractParam) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignContractBlock not implemented")
}
func (*UnimplementedSettlementAPIServer) GetAddPreStopBlock(context.Context, *StopParam) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddPreStopBlock not implemented")
}
func (*UnimplementedSettlementAPIServer) GetRemovePreStopBlock(context.Context, *StopParam) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemovePreStopBlock not implemented")
}
func (*UnimplementedSettlementAPIServer) GetUpdatePreStopBlock(context.Context, *UpdateStopParam) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpdatePreStopBlock not implemented")
}
func (*UnimplementedSettlementAPIServer) GetAddNextStopBlock(context.Context, *StopParam) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddNextStopBlock not implemented")
}
func (*UnimplementedSettlementAPIServer) GetRemoveNextStopBlock(context.Context, *StopParam) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRemoveNextStopBlock not implemented")
}
func (*UnimplementedSettlementAPIServer) GetUpdateNextStopBlock(context.Context, *UpdateStopParam) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpdateNextStopBlock not implemented")
}
func (*UnimplementedSettlementAPIServer) GetAllContracts(context.Context, *Offset) (*SettlementContracts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllContracts not implemented")
}
func (*UnimplementedSettlementAPIServer) GetContractsByAddress(context.Context, *ContractsByAddressRequest) (*SettlementContracts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractsByAddress not implemented")
}
func (*UnimplementedSettlementAPIServer) GetContractsByStatus(context.Context, *ContractsByStatusRequest) (*SettlementContracts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractsByStatus not implemented")
}
func (*UnimplementedSettlementAPIServer) GetExpiredContracts(context.Context, *ContractsByAddressRequest) (*SettlementContracts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpiredContracts not implemented")
}
func (*UnimplementedSettlementAPIServer) GetContractsAsPartyA(context.Context, *ContractsByAddressRequest) (*SettlementContracts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractsAsPartyA not implemented")
}
func (*UnimplementedSettlementAPIServer) GetContractsAsPartyB(context.Context, *ContractsByAddressRequest) (*SettlementContracts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractsAsPartyB not implemented")
}
func (*UnimplementedSettlementAPIServer) GetContractAddressByPartyANextStop(context.Context, *ContractAddressByPartyRequest) (*types.Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractAddressByPartyANextStop not implemented")
}
func (*UnimplementedSettlementAPIServer) GetContractAddressByPartyBPreStop(context.Context, *ContractAddressByPartyRequest) (*types.Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractAddressByPartyBPreStop not implemented")
}
func (*UnimplementedSettlementAPIServer) GetProcessCDRBlock(context.Context, *ProcessCDRBlockRequest) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessCDRBlock not implemented")
}
func (*UnimplementedSettlementAPIServer) GetTerminateContractBlock(context.Context, *TerminateParam) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTerminateContractBlock not implemented")
}
func (*UnimplementedSettlementAPIServer) GetCDRStatus(context.Context, *CDRStatusRequest) (*CDRStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCDRStatus not implemented")
}
func (*UnimplementedSettlementAPIServer) GetCDRStatusByCdrData(context.Context, *CDRStatusByCdrDataRequest) (*CDRStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCDRStatusByCdrData not implemented")
}
func (*UnimplementedSettlementAPIServer) GetCDRStatusByDate(context.Context, *CDRStatusByDateRequest) (*CDRStatuses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCDRStatusByDate not implemented")
}
func (*UnimplementedSettlementAPIServer) GetAllCDRStatus(context.Context, *ContractsByAddressRequest) (*CDRStatuses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCDRStatus not implemented")
}
func (*UnimplementedSettlementAPIServer) GetMultiPartyCDRStatus(context.Context, *MultiPartyCDRStatusRequest) (*CDRStatuses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiPartyCDRStatus not implemented")
}
func (*UnimplementedSettlementAPIServer) GetSummaryReport(context.Context, *ReportRequest) (*types.SummaryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummaryReport not implemented")
}
func (*UnimplementedSettlementAPIServer) GetSummaryReportByAccount(context.Context, *ReportByAccountRequest) (*types.SummaryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummaryReportByAccount not implemented")
}
func (*UnimplementedSettlementAPIServer) GetSummaryReportByCustomer(context.Context, *ReportByCustomerRequest) (*types.SummaryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummaryReportByCustomer not implemented")
}
func (*UnimplementedSettlementAPIServer) GenerateInvoices(context.Context, *InvoicesRequest) (*InvoiceRecords, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateInvoices not implemented")
}
func (*UnimplementedSettlementAPIServer) GenerateInvoicesByAccount(context.Context, *InvoicesByAccountRequest) (*InvoiceRecords, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateInvoicesByAccount not implemented")
}
func (*UnimplementedSettlementAPIServer) GenerateInvoicesByCustomer(context.Context, *InvoicesByCustomerRequest) (*InvoiceRecords, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateInvoicesByCustomer not implemented")
}
func (*UnimplementedSettlementAPIServer) GenerateInvoicesByContract(context.Context, *InvoicesRequest) (*InvoiceRecords, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateInvoicesByContract not implemented")
}
func (*UnimplementedSettlementAPIServer) GenerateMultiPartyInvoice(context.Context, *MultiPartyInvoiceRequest) (*InvoiceRecords, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateMultiPartyInvoice not implemented")
}
func (*UnimplementedSettlementAPIServer) GenerateMultiPartySummaryReport(context.Context, *MultiPartyInvoiceRequest) (*types.MultiPartySummaryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateMultiPartySummaryReport not implemented")
}
func (*UnimplementedSettlementAPIServer) GetPreStopNames(context.Context, *types.Address) (*Strings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreStopNames not implemented")
}
func (*UnimplementedSettlementAPIServer) GetNextStopNames(context.Context, *types.Address) (*Strings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextStopNames not implemented")
}
func (*UnimplementedSettlementAPIServer) GetRegisterAssetBlock(context.Context, *RegisterAssetParam) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegisterAssetBlock not implemented")
}
func (*UnimplementedSettlementAPIServer) GetAllAssets(context.Context, *Offset) (*AssetParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAssets not implemented")
}
func (*UnimplementedSettlementAPIServer) GetAssetsByOwner(context.Context, *AssetsByOwnerRequest) (*AssetParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetsByOwner not implemented")
}
func (*UnimplementedSettlementAPIServer) GetAsset(context.Context, *types.Address) (*AssetParam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsset not implemented")
}

func RegisterSettlementAPIServer(s *grpc.Server, srv SettlementAPIServer) {
	s.RegisterService(&_SettlementAPI_serviceDesc, srv)
}

func _SettlementAPI_ToAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.CreateContractParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).ToAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/ToAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).ToAddress(ctx, req.(*types.CreateContractParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetSettlementRewardsBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetSettlementRewardsBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetSettlementRewardsBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetSettlementRewardsBlock(ctx, req.(*types.Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetCreateContractBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContractParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetCreateContractBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetCreateContractBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetCreateContractBlock(ctx, req.(*CreateContractParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetSignContractBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignContractParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetSignContractBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetSignContractBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetSignContractBlock(ctx, req.(*SignContractParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetAddPreStopBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetAddPreStopBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetAddPreStopBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetAddPreStopBlock(ctx, req.(*StopParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetRemovePreStopBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetRemovePreStopBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetRemovePreStopBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetRemovePreStopBlock(ctx, req.(*StopParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetUpdatePreStopBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStopParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetUpdatePreStopBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetUpdatePreStopBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetUpdatePreStopBlock(ctx, req.(*UpdateStopParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetAddNextStopBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetAddNextStopBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetAddNextStopBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetAddNextStopBlock(ctx, req.(*StopParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetRemoveNextStopBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetRemoveNextStopBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetRemoveNextStopBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetRemoveNextStopBlock(ctx, req.(*StopParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetUpdateNextStopBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStopParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetUpdateNextStopBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetUpdateNextStopBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetUpdateNextStopBlock(ctx, req.(*UpdateStopParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetAllContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Offset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetAllContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetAllContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetAllContracts(ctx, req.(*Offset))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetContractsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetContractsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetContractsByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetContractsByAddress(ctx, req.(*ContractsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetContractsByStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractsByStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetContractsByStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetContractsByStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetContractsByStatus(ctx, req.(*ContractsByStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetExpiredContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetExpiredContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetExpiredContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetExpiredContracts(ctx, req.(*ContractsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetContractsAsPartyA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetContractsAsPartyA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetContractsAsPartyA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetContractsAsPartyA(ctx, req.(*ContractsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetContractsAsPartyB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetContractsAsPartyB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetContractsAsPartyB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetContractsAsPartyB(ctx, req.(*ContractsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetContractAddressByPartyANextStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractAddressByPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetContractAddressByPartyANextStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetContractAddressByPartyANextStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetContractAddressByPartyANextStop(ctx, req.(*ContractAddressByPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetContractAddressByPartyBPreStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractAddressByPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetContractAddressByPartyBPreStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetContractAddressByPartyBPreStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetContractAddressByPartyBPreStop(ctx, req.(*ContractAddressByPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetProcessCDRBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessCDRBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetProcessCDRBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetProcessCDRBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetProcessCDRBlock(ctx, req.(*ProcessCDRBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetTerminateContractBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetTerminateContractBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetTerminateContractBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetTerminateContractBlock(ctx, req.(*TerminateParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetCDRStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CDRStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetCDRStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetCDRStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetCDRStatus(ctx, req.(*CDRStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetCDRStatusByCdrData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CDRStatusByCdrDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetCDRStatusByCdrData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetCDRStatusByCdrData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetCDRStatusByCdrData(ctx, req.(*CDRStatusByCdrDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetCDRStatusByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CDRStatusByDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetCDRStatusByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetCDRStatusByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetCDRStatusByDate(ctx, req.(*CDRStatusByDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetAllCDRStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetAllCDRStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetAllCDRStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetAllCDRStatus(ctx, req.(*ContractsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetMultiPartyCDRStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiPartyCDRStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetMultiPartyCDRStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetMultiPartyCDRStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetMultiPartyCDRStatus(ctx, req.(*MultiPartyCDRStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetSummaryReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetSummaryReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetSummaryReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetSummaryReport(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetSummaryReportByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetSummaryReportByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetSummaryReportByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetSummaryReportByAccount(ctx, req.(*ReportByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetSummaryReportByCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportByCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetSummaryReportByCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetSummaryReportByCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetSummaryReportByCustomer(ctx, req.(*ReportByCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GenerateInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GenerateInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GenerateInvoices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GenerateInvoices(ctx, req.(*InvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GenerateInvoicesByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoicesByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GenerateInvoicesByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GenerateInvoicesByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GenerateInvoicesByAccount(ctx, req.(*InvoicesByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GenerateInvoicesByCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoicesByCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GenerateInvoicesByCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GenerateInvoicesByCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GenerateInvoicesByCustomer(ctx, req.(*InvoicesByCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GenerateInvoicesByContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GenerateInvoicesByContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GenerateInvoicesByContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GenerateInvoicesByContract(ctx, req.(*InvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GenerateMultiPartyInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiPartyInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GenerateMultiPartyInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GenerateMultiPartyInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GenerateMultiPartyInvoice(ctx, req.(*MultiPartyInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GenerateMultiPartySummaryReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiPartyInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GenerateMultiPartySummaryReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GenerateMultiPartySummaryReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GenerateMultiPartySummaryReport(ctx, req.(*MultiPartyInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetPreStopNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetPreStopNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetPreStopNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetPreStopNames(ctx, req.(*types.Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetNextStopNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetNextStopNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetNextStopNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetNextStopNames(ctx, req.(*types.Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetRegisterAssetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAssetParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetRegisterAssetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetRegisterAssetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetRegisterAssetBlock(ctx, req.(*RegisterAssetParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetAllAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Offset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetAllAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetAllAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetAllAssets(ctx, req.(*Offset))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetAssetsByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetsByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetAssetsByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetAssetsByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetAssetsByOwner(ctx, req.(*AssetsByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettlementAPI_GetAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettlementAPIServer).GetAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SettlementAPI/GetAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettlementAPIServer).GetAsset(ctx, req.(*types.Address))
	}
	return interceptor(ctx, in, info, handler)
}

var _SettlementAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SettlementAPI",
	HandlerType: (*SettlementAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ToAddress",
			Handler:    _SettlementAPI_ToAddress_Handler,
		},
		{
			MethodName: "GetSettlementRewardsBlock",
			Handler:    _SettlementAPI_GetSettlementRewardsBlock_Handler,
		},
		{
			MethodName: "GetCreateContractBlock",
			Handler:    _SettlementAPI_GetCreateContractBlock_Handler,
		},
		{
			MethodName: "GetSignContractBlock",
			Handler:    _SettlementAPI_GetSignContractBlock_Handler,
		},
		{
			MethodName: "GetAddPreStopBlock",
			Handler:    _SettlementAPI_GetAddPreStopBlock_Handler,
		},
		{
			MethodName: "GetRemovePreStopBlock",
			Handler:    _SettlementAPI_GetRemovePreStopBlock_Handler,
		},
		{
			MethodName: "GetUpdatePreStopBlock",
			Handler:    _SettlementAPI_GetUpdatePreStopBlock_Handler,
		},
		{
			MethodName: "GetAddNextStopBlock",
			Handler:    _SettlementAPI_GetAddNextStopBlock_Handler,
		},
		{
			MethodName: "GetRemoveNextStopBlock",
			Handler:    _SettlementAPI_GetRemoveNextStopBlock_Handler,
		},
		{
			MethodName: "GetUpdateNextStopBlock",
			Handler:    _SettlementAPI_GetUpdateNextStopBlock_Handler,
		},
		{
			MethodName: "GetAllContracts",
			Handler:    _SettlementAPI_GetAllContracts_Handler,
		},
		{
			MethodName: "GetContractsByAddress",
			Handler:    _SettlementAPI_GetContractsByAddress_Handler,
		},
		{
			MethodName: "GetContractsByStatus",
			Handler:    _SettlementAPI_GetContractsByStatus_Handler,
		},
		{
			MethodName: "GetExpiredContracts",
			Handler:    _SettlementAPI_GetExpiredContracts_Handler,
		},
		{
			MethodName: "GetContractsAsPartyA",
			Handler:    _SettlementAPI_GetContractsAsPartyA_Handler,
		},
		{
			MethodName: "GetContractsAsPartyB",
			Handler:    _SettlementAPI_GetContractsAsPartyB_Handler,
		},
		{
			MethodName: "GetContractAddressByPartyANextStop",
			Handler:    _SettlementAPI_GetContractAddressByPartyANextStop_Handler,
		},
		{
			MethodName: "GetContractAddressByPartyBPreStop",
			Handler:    _SettlementAPI_GetContractAddressByPartyBPreStop_Handler,
		},
		{
			MethodName: "GetProcessCDRBlock",
			Handler:    _SettlementAPI_GetProcessCDRBlock_Handler,
		},
		{
			MethodName: "GetTerminateContractBlock",
			Handler:    _SettlementAPI_GetTerminateContractBlock_Handler,
		},
		{
			MethodName: "GetCDRStatus",
			Handler:    _SettlementAPI_GetCDRStatus_Handler,
		},
		{
			MethodName: "GetCDRStatusByCdrData",
			Handler:    _SettlementAPI_GetCDRStatusByCdrData_Handler,
		},
		{
			MethodName: "GetCDRStatusByDate",
			Handler:    _SettlementAPI_GetCDRStatusByDate_Handler,
		},
		{
			MethodName: "GetAllCDRStatus",
			Handler:    _SettlementAPI_GetAllCDRStatus_Handler,
		},
		{
			MethodName: "GetMultiPartyCDRStatus",
			Handler:    _SettlementAPI_GetMultiPartyCDRStatus_Handler,
		},
		{
			MethodName: "GetSummaryReport",
			Handler:    _SettlementAPI_GetSummaryReport_Handler,
		},
		{
			MethodName: "GetSummaryReportByAccount",
			Handler:    _SettlementAPI_GetSummaryReportByAccount_Handler,
		},
		{
			MethodName: "GetSummaryReportByCustomer",
			Handler:    _SettlementAPI_GetSummaryReportByCustomer_Handler,
		},
		{
			MethodName: "GenerateInvoices",
			Handler:    _SettlementAPI_GenerateInvoices_Handler,
		},
		{
			MethodName: "GenerateInvoicesByAccount",
			Handler:    _SettlementAPI_GenerateInvoicesByAccount_Handler,
		},
		{
			MethodName: "GenerateInvoicesByCustomer",
			Handler:    _SettlementAPI_GenerateInvoicesByCustomer_Handler,
		},
		{
			MethodName: "GenerateInvoicesByContract",
			Handler:    _SettlementAPI_GenerateInvoicesByContract_Handler,
		},
		{
			MethodName: "GenerateMultiPartyInvoice",
			Handler:    _SettlementAPI_GenerateMultiPartyInvoice_Handler,
		},
		{
			MethodName: "GenerateMultiPartySummaryReport",
			Handler:    _SettlementAPI_GenerateMultiPartySummaryReport_Handler,
		},
		{
			MethodName: "GetPreStopNames",
			Handler:    _SettlementAPI_GetPreStopNames_Handler,
		},
		{
			MethodName: "GetNextStopNames",
			Handler:    _SettlementAPI_GetNextStopNames_Handler,
		},
		{
			MethodName: "GetRegisterAssetBlock",
			Handler:    _SettlementAPI_GetRegisterAssetBlock_Handler,
		},
		{
			MethodName: "GetAllAssets",
			Handler:    _SettlementAPI_GetAllAssets_Handler,
		},
		{
			MethodName: "GetAssetsByOwner",
			Handler:    _SettlementAPI_GetAssetsByOwner_Handler,
		},
		{
			MethodName: "GetAsset",
			Handler:    _SettlementAPI_GetAsset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "settlement.proto",
}
