// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.7.1
// source: mintage.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	types "github.com/qlcchain/go-qlc/rpc/grpc/proto/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MintageParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfAddr    string `protobuf:"bytes,1,opt,name=SelfAddr,proto3" json:"SelfAddr,omitempty"`
	PrevHash    string `protobuf:"bytes,2,opt,name=PrevHash,proto3" json:"PrevHash,omitempty"`
	TokenName   string `protobuf:"bytes,3,opt,name=TokenName,proto3" json:"TokenName,omitempty"`
	TokenSymbol string `protobuf:"bytes,4,opt,name=TokenSymbol,proto3" json:"TokenSymbol,omitempty"`
	TotalSupply string `protobuf:"bytes,5,opt,name=TotalSupply,proto3" json:"TotalSupply,omitempty"`
	Decimals    int32  `protobuf:"varint,6,opt,name=Decimals,proto3" json:"Decimals,omitempty"`
	Beneficial  string `protobuf:"bytes,7,opt,name=Beneficial,proto3" json:"Beneficial,omitempty"`
	NEP5TxId    string `protobuf:"bytes,8,opt,name=NEP5TxId,proto3" json:"NEP5TxId,omitempty"`
}

func (x *MintageParams) Reset() {
	*x = MintageParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mintage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MintageParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MintageParams) ProtoMessage() {}

func (x *MintageParams) ProtoReflect() protoreflect.Message {
	mi := &file_mintage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MintageParams.ProtoReflect.Descriptor instead.
func (*MintageParams) Descriptor() ([]byte, []int) {
	return file_mintage_proto_rawDescGZIP(), []int{0}
}

func (x *MintageParams) GetSelfAddr() string {
	if x != nil {
		return x.SelfAddr
	}
	return ""
}

func (x *MintageParams) GetPrevHash() string {
	if x != nil {
		return x.PrevHash
	}
	return ""
}

func (x *MintageParams) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *MintageParams) GetTokenSymbol() string {
	if x != nil {
		return x.TokenSymbol
	}
	return ""
}

func (x *MintageParams) GetTotalSupply() string {
	if x != nil {
		return x.TotalSupply
	}
	return ""
}

func (x *MintageParams) GetDecimals() int32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *MintageParams) GetBeneficial() string {
	if x != nil {
		return x.Beneficial
	}
	return ""
}

func (x *MintageParams) GetNEP5TxId() string {
	if x != nil {
		return x.NEP5TxId
	}
	return ""
}

type WithdrawParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfAddr string `protobuf:"bytes,1,opt,name=selfAddr,proto3" json:"selfAddr,omitempty"`
	TokenId  string `protobuf:"bytes,2,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
}

func (x *WithdrawParams) Reset() {
	*x = WithdrawParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mintage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawParams) ProtoMessage() {}

func (x *WithdrawParams) ProtoReflect() protoreflect.Message {
	mi := &file_mintage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawParams.ProtoReflect.Descriptor instead.
func (*WithdrawParams) Descriptor() ([]byte, []int) {
	return file_mintage_proto_rawDescGZIP(), []int{1}
}

func (x *WithdrawParams) GetSelfAddr() string {
	if x != nil {
		return x.SelfAddr
	}
	return ""
}

func (x *WithdrawParams) GetTokenId() string {
	if x != nil {
		return x.TokenId
	}
	return ""
}

var File_mintage_proto protoreflect.FileDescriptor

var file_mintage_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x02, 0x0a, 0x0d, 0x4d, 0x69, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6c,
	0x66, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x6c,
	0x66, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x76, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x65, 0x76, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x4e, 0x45, 0x50, 0x35, 0x54, 0x78, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x4e, 0x45, 0x50, 0x35, 0x54, 0x78, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x0e, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x6c, 0x66, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x6c, 0x66, 0x41, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x49, 0x64, 0x32, 0xdf, 0x05, 0x0a, 0x0a, 0x4d, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x41,
	0x50, 0x49, 0x12, 0x65, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22,
	0x15, 0x2f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x01, 0x2a, 0x12, 0x5d, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x4d, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f,
	0x6d, 0x69, 0x6e, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x58, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x11, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x11, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x6d, 0x69, 0x6e, 0x65, 0x72,
	0x2f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x3a,
	0x01, 0x2a, 0x12, 0x6c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x4d, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0b, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d,
	0x2f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x4d, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x01, 0x2a,
	0x12, 0x69, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x6d, 0x69, 0x6e, 0x65,
	0x72, 0x2f, 0x67, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x69, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x01, 0x2a, 0x12, 0x6e, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x69, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x11, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x6d, 0x69, 0x6e, 0x65, 0x72,
	0x2f, 0x67, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x69, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x68, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x28, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mintage_proto_rawDescOnce sync.Once
	file_mintage_proto_rawDescData = file_mintage_proto_rawDesc
)

func file_mintage_proto_rawDescGZIP() []byte {
	file_mintage_proto_rawDescOnce.Do(func() {
		file_mintage_proto_rawDescData = protoimpl.X.CompressGZIP(file_mintage_proto_rawDescData)
	})
	return file_mintage_proto_rawDescData
}

var file_mintage_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_mintage_proto_goTypes = []interface{}{
	(*MintageParams)(nil),       // 0: proto.MintageParams
	(*WithdrawParams)(nil),      // 1: proto.WithdrawParams
	(*types.StateBlock)(nil),    // 2: types.StateBlock
	(*types.Hash)(nil),          // 3: types.Hash
	(*wrappers.BytesValue)(nil), // 4: google.protobuf.BytesValue
	(*types.TokenInfo)(nil),     // 5: types.TokenInfo
}
var file_mintage_proto_depIdxs = []int32{
	0, // 0: proto.MintageAPI.GetMintageData:input_type -> proto.MintageParams
	0, // 1: proto.MintageAPI.GetMintageBlock:input_type -> proto.MintageParams
	2, // 2: proto.MintageAPI.GetRewardBlock:input_type -> types.StateBlock
	3, // 3: proto.MintageAPI.GetWithdrawMintageData:input_type -> types.Hash
	4, // 4: proto.MintageAPI.ParseTokenInfo:input_type -> google.protobuf.BytesValue
	1, // 5: proto.MintageAPI.GetWithdrawMintageBlock:input_type -> proto.WithdrawParams
	2, // 6: proto.MintageAPI.GetWithdrawRewardBlock:input_type -> types.StateBlock
	4, // 7: proto.MintageAPI.GetMintageData:output_type -> google.protobuf.BytesValue
	2, // 8: proto.MintageAPI.GetMintageBlock:output_type -> types.StateBlock
	2, // 9: proto.MintageAPI.GetRewardBlock:output_type -> types.StateBlock
	4, // 10: proto.MintageAPI.GetWithdrawMintageData:output_type -> google.protobuf.BytesValue
	5, // 11: proto.MintageAPI.ParseTokenInfo:output_type -> types.TokenInfo
	2, // 12: proto.MintageAPI.GetWithdrawMintageBlock:output_type -> types.StateBlock
	2, // 13: proto.MintageAPI.GetWithdrawRewardBlock:output_type -> types.StateBlock
	7, // [7:14] is the sub-list for method output_type
	0, // [0:7] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_mintage_proto_init() }
func file_mintage_proto_init() {
	if File_mintage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mintage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MintageParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mintage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mintage_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mintage_proto_goTypes,
		DependencyIndexes: file_mintage_proto_depIdxs,
		MessageInfos:      file_mintage_proto_msgTypes,
	}.Build()
	File_mintage_proto = out.File
	file_mintage_proto_rawDesc = nil
	file_mintage_proto_goTypes = nil
	file_mintage_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MintageAPIClient is the client API for MintageAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MintageAPIClient interface {
	GetMintageData(ctx context.Context, in *MintageParams, opts ...grpc.CallOption) (*wrappers.BytesValue, error)
	GetMintageBlock(ctx context.Context, in *MintageParams, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetRewardBlock(ctx context.Context, in *types.StateBlock, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetWithdrawMintageData(ctx context.Context, in *types.Hash, opts ...grpc.CallOption) (*wrappers.BytesValue, error)
	ParseTokenInfo(ctx context.Context, in *wrappers.BytesValue, opts ...grpc.CallOption) (*types.TokenInfo, error)
	GetWithdrawMintageBlock(ctx context.Context, in *WithdrawParams, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetWithdrawRewardBlock(ctx context.Context, in *types.StateBlock, opts ...grpc.CallOption) (*types.StateBlock, error)
}

type mintageAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewMintageAPIClient(cc grpc.ClientConnInterface) MintageAPIClient {
	return &mintageAPIClient{cc}
}

func (c *mintageAPIClient) GetMintageData(ctx context.Context, in *MintageParams, opts ...grpc.CallOption) (*wrappers.BytesValue, error) {
	out := new(wrappers.BytesValue)
	err := c.cc.Invoke(ctx, "/proto.MintageAPI/GetMintageData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mintageAPIClient) GetMintageBlock(ctx context.Context, in *MintageParams, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.MintageAPI/GetMintageBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mintageAPIClient) GetRewardBlock(ctx context.Context, in *types.StateBlock, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.MintageAPI/GetRewardBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mintageAPIClient) GetWithdrawMintageData(ctx context.Context, in *types.Hash, opts ...grpc.CallOption) (*wrappers.BytesValue, error) {
	out := new(wrappers.BytesValue)
	err := c.cc.Invoke(ctx, "/proto.MintageAPI/GetWithdrawMintageData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mintageAPIClient) ParseTokenInfo(ctx context.Context, in *wrappers.BytesValue, opts ...grpc.CallOption) (*types.TokenInfo, error) {
	out := new(types.TokenInfo)
	err := c.cc.Invoke(ctx, "/proto.MintageAPI/ParseTokenInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mintageAPIClient) GetWithdrawMintageBlock(ctx context.Context, in *WithdrawParams, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.MintageAPI/GetWithdrawMintageBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mintageAPIClient) GetWithdrawRewardBlock(ctx context.Context, in *types.StateBlock, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.MintageAPI/GetWithdrawRewardBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MintageAPIServer is the server API for MintageAPI service.
type MintageAPIServer interface {
	GetMintageData(context.Context, *MintageParams) (*wrappers.BytesValue, error)
	GetMintageBlock(context.Context, *MintageParams) (*types.StateBlock, error)
	GetRewardBlock(context.Context, *types.StateBlock) (*types.StateBlock, error)
	GetWithdrawMintageData(context.Context, *types.Hash) (*wrappers.BytesValue, error)
	ParseTokenInfo(context.Context, *wrappers.BytesValue) (*types.TokenInfo, error)
	GetWithdrawMintageBlock(context.Context, *WithdrawParams) (*types.StateBlock, error)
	GetWithdrawRewardBlock(context.Context, *types.StateBlock) (*types.StateBlock, error)
}

// UnimplementedMintageAPIServer can be embedded to have forward compatible implementations.
type UnimplementedMintageAPIServer struct {
}

func (*UnimplementedMintageAPIServer) GetMintageData(context.Context, *MintageParams) (*wrappers.BytesValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMintageData not implemented")
}
func (*UnimplementedMintageAPIServer) GetMintageBlock(context.Context, *MintageParams) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMintageBlock not implemented")
}
func (*UnimplementedMintageAPIServer) GetRewardBlock(context.Context, *types.StateBlock) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardBlock not implemented")
}
func (*UnimplementedMintageAPIServer) GetWithdrawMintageData(context.Context, *types.Hash) (*wrappers.BytesValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawMintageData not implemented")
}
func (*UnimplementedMintageAPIServer) ParseTokenInfo(context.Context, *wrappers.BytesValue) (*types.TokenInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseTokenInfo not implemented")
}
func (*UnimplementedMintageAPIServer) GetWithdrawMintageBlock(context.Context, *WithdrawParams) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawMintageBlock not implemented")
}
func (*UnimplementedMintageAPIServer) GetWithdrawRewardBlock(context.Context, *types.StateBlock) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawRewardBlock not implemented")
}

func RegisterMintageAPIServer(s *grpc.Server, srv MintageAPIServer) {
	s.RegisterService(&_MintageAPI_serviceDesc, srv)
}

func _MintageAPI_GetMintageData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MintageParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MintageAPIServer).GetMintageData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MintageAPI/GetMintageData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MintageAPIServer).GetMintageData(ctx, req.(*MintageParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MintageAPI_GetMintageBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MintageParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MintageAPIServer).GetMintageBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MintageAPI/GetMintageBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MintageAPIServer).GetMintageBlock(ctx, req.(*MintageParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MintageAPI_GetRewardBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.StateBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MintageAPIServer).GetRewardBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MintageAPI/GetRewardBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MintageAPIServer).GetRewardBlock(ctx, req.(*types.StateBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _MintageAPI_GetWithdrawMintageData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MintageAPIServer).GetWithdrawMintageData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MintageAPI/GetWithdrawMintageData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MintageAPIServer).GetWithdrawMintageData(ctx, req.(*types.Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _MintageAPI_ParseTokenInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.BytesValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MintageAPIServer).ParseTokenInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MintageAPI/ParseTokenInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MintageAPIServer).ParseTokenInfo(ctx, req.(*wrappers.BytesValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _MintageAPI_GetWithdrawMintageBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MintageAPIServer).GetWithdrawMintageBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MintageAPI/GetWithdrawMintageBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MintageAPIServer).GetWithdrawMintageBlock(ctx, req.(*WithdrawParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _MintageAPI_GetWithdrawRewardBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.StateBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MintageAPIServer).GetWithdrawRewardBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MintageAPI/GetWithdrawRewardBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MintageAPIServer).GetWithdrawRewardBlock(ctx, req.(*types.StateBlock))
	}
	return interceptor(ctx, in, info, handler)
}

var _MintageAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MintageAPI",
	HandlerType: (*MintageAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMintageData",
			Handler:    _MintageAPI_GetMintageData_Handler,
		},
		{
			MethodName: "GetMintageBlock",
			Handler:    _MintageAPI_GetMintageBlock_Handler,
		},
		{
			MethodName: "GetRewardBlock",
			Handler:    _MintageAPI_GetRewardBlock_Handler,
		},
		{
			MethodName: "GetWithdrawMintageData",
			Handler:    _MintageAPI_GetWithdrawMintageData_Handler,
		},
		{
			MethodName: "ParseTokenInfo",
			Handler:    _MintageAPI_ParseTokenInfo_Handler,
		},
		{
			MethodName: "GetWithdrawMintageBlock",
			Handler:    _MintageAPI_GetWithdrawMintageBlock_Handler,
		},
		{
			MethodName: "GetWithdrawRewardBlock",
			Handler:    _MintageAPI_GetWithdrawRewardBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mintage.proto",
}
