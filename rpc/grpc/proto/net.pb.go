// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.7.1
// source: net.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	types "github.com/qlcchain/go-qlc/rpc/grpc/proto/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type OnlineRepInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Vote    int64  `protobuf:"varint,2,opt,name=vote,proto3" json:"vote,omitempty"`
}

func (x *OnlineRepInfo) Reset() {
	*x = OnlineRepInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineRepInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineRepInfo) ProtoMessage() {}

func (x *OnlineRepInfo) ProtoReflect() protoreflect.Message {
	mi := &file_net_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineRepInfo.ProtoReflect.Descriptor instead.
func (*OnlineRepInfo) Descriptor() ([]byte, []int) {
	return file_net_proto_rawDescGZIP(), []int{0}
}

func (x *OnlineRepInfo) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *OnlineRepInfo) GetVote() int64 {
	if x != nil {
		return x.Vote
	}
	return 0
}

type OnlineRepTotal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reps              []*OnlineRepInfo `protobuf:"bytes,1,rep,name=reps,proto3" json:"reps,omitempty"`
	ValidVotes        int64            `protobuf:"varint,2,opt,name=validVotes,proto3" json:"validVotes,omitempty"`
	ValidVotesPercent string           `protobuf:"bytes,3,opt,name=validVotesPercent,proto3" json:"validVotesPercent,omitempty"`
}

func (x *OnlineRepTotal) Reset() {
	*x = OnlineRepTotal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineRepTotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineRepTotal) ProtoMessage() {}

func (x *OnlineRepTotal) ProtoReflect() protoreflect.Message {
	mi := &file_net_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineRepTotal.ProtoReflect.Descriptor instead.
func (*OnlineRepTotal) Descriptor() ([]byte, []int) {
	return file_net_proto_rawDescGZIP(), []int{1}
}

func (x *OnlineRepTotal) GetReps() []*OnlineRepInfo {
	if x != nil {
		return x.Reps
	}
	return nil
}

func (x *OnlineRepTotal) GetValidVotes() int64 {
	if x != nil {
		return x.ValidVotes
	}
	return 0
}

func (x *OnlineRepTotal) GetValidVotesPercent() string {
	if x != nil {
		return x.ValidVotesPercent
	}
	return ""
}

type PeerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerID         string  `protobuf:"bytes,1,opt,name=peerID,proto3" json:"peerID,omitempty"`
	Address        string  `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Version        string  `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Rtt            float64 `protobuf:"fixed64,4,opt,name=rtt,proto3" json:"rtt,omitempty"`
	LastUpdateTime string  `protobuf:"bytes,5,opt,name=lastUpdateTime,proto3" json:"lastUpdateTime,omitempty"`
}

func (x *PeerInfo) Reset() {
	*x = PeerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerInfo) ProtoMessage() {}

func (x *PeerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_net_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerInfo.ProtoReflect.Descriptor instead.
func (*PeerInfo) Descriptor() ([]byte, []int) {
	return file_net_proto_rawDescGZIP(), []int{2}
}

func (x *PeerInfo) GetPeerID() string {
	if x != nil {
		return x.PeerID
	}
	return ""
}

func (x *PeerInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PeerInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PeerInfo) GetRtt() float64 {
	if x != nil {
		return x.Rtt
	}
	return 0
}

func (x *PeerInfo) GetLastUpdateTime() string {
	if x != nil {
		return x.LastUpdateTime
	}
	return ""
}

type PeerInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerInfos []*PeerInfo `protobuf:"bytes,1,rep,name=peerInfos,proto3" json:"peerInfos,omitempty"`
}

func (x *PeerInfos) Reset() {
	*x = PeerInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerInfos) ProtoMessage() {}

func (x *PeerInfos) ProtoReflect() protoreflect.Message {
	mi := &file_net_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerInfos.ProtoReflect.Descriptor instead.
func (*PeerInfos) Descriptor() ([]byte, []int) {
	return file_net_proto_rawDescGZIP(), []int{3}
}

func (x *PeerInfos) GetPeerInfos() []*PeerInfo {
	if x != nil {
		return x.PeerInfos
	}
	return nil
}

type PeersCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count map[string]uint64 `protobuf:"bytes,1,rep,name=count,proto3" json:"count,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *PeersCountResponse) Reset() {
	*x = PeersCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeersCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeersCountResponse) ProtoMessage() {}

func (x *PeersCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_net_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeersCountResponse.ProtoReflect.Descriptor instead.
func (*PeersCountResponse) Descriptor() ([]byte, []int) {
	return file_net_proto_rawDescGZIP(), []int{4}
}

func (x *PeersCountResponse) GetCount() map[string]uint64 {
	if x != nil {
		return x.Count
	}
	return nil
}

type EventBandwidthStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalIn  int64   `protobuf:"varint,1,opt,name=TotalIn,proto3" json:"TotalIn,omitempty"`
	TotalOut int64   `protobuf:"varint,2,opt,name=TotalOut,proto3" json:"TotalOut,omitempty"`
	RateIn   float64 `protobuf:"fixed64,3,opt,name=RateIn,proto3" json:"RateIn,omitempty"`
	RateOut  float64 `protobuf:"fixed64,4,opt,name=RateOut,proto3" json:"RateOut,omitempty"`
}

func (x *EventBandwidthStats) Reset() {
	*x = EventBandwidthStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_net_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventBandwidthStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBandwidthStats) ProtoMessage() {}

func (x *EventBandwidthStats) ProtoReflect() protoreflect.Message {
	mi := &file_net_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBandwidthStats.ProtoReflect.Descriptor instead.
func (*EventBandwidthStats) Descriptor() ([]byte, []int) {
	return file_net_proto_rawDescGZIP(), []int{5}
}

func (x *EventBandwidthStats) GetTotalIn() int64 {
	if x != nil {
		return x.TotalIn
	}
	return 0
}

func (x *EventBandwidthStats) GetTotalOut() int64 {
	if x != nil {
		return x.TotalOut
	}
	return 0
}

func (x *EventBandwidthStats) GetRateIn() float64 {
	if x != nil {
		return x.RateIn
	}
	return 0
}

func (x *EventBandwidthStats) GetRateOut() float64 {
	if x != nil {
		return x.RateOut
	}
	return 0
}

var File_net_proto protoreflect.FileDescriptor

var file_net_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3d,
	0x0a, 0x0d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6f, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x22, 0x88, 0x01,
	0x0a, 0x0e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x28, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x65, 0x70, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x6f, 0x74, 0x65,
	0x73, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x08, 0x50, 0x65, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x74, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x72, 0x74, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x09, 0x50,
	0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x65,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x12, 0x50, 0x65, 0x65, 0x72,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x38, 0x0a, 0x0a, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x7d, 0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x49, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x75,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x61, 0x74,
	0x65, 0x4f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x52, 0x61, 0x74, 0x65,
	0x4f, 0x75, 0x74, 0x32, 0xbe, 0x06, 0x0a, 0x06, 0x4e, 0x65, 0x74, 0x41, 0x50, 0x49, 0x12, 0x65,
	0x0a, 0x15, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x6e, 0x65, 0x74, 0x2f,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x0e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x70, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13,
	0x2f, 0x6e, 0x65, 0x74, 0x2f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x65,
	0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17,
	0x12, 0x15, 0x2f, 0x6e, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x65,
	0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x56, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x50, 0x65, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x1f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x6e, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x65, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x50, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x65, 0x65, 0x72, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x6e, 0x65,
	0x74, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x65, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x58, 0x0a, 0x0a, 0x50, 0x65, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x6e, 0x65, 0x74,
	0x2f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x67, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x6e,
	0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x07, 0x53, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x6e, 0x65,
	0x74, 0x2f, 0x73, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x59, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x16, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x6e, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x50, 0x65,
	0x65, 0x72, 0x49, 0x64, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_net_proto_rawDescOnce sync.Once
	file_net_proto_rawDescData = file_net_proto_rawDesc
)

func file_net_proto_rawDescGZIP() []byte {
	file_net_proto_rawDescOnce.Do(func() {
		file_net_proto_rawDescData = protoimpl.X.CompressGZIP(file_net_proto_rawDescData)
	})
	return file_net_proto_rawDescData
}

var file_net_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_net_proto_goTypes = []interface{}{
	(*OnlineRepInfo)(nil),        // 0: proto.OnlineRepInfo
	(*OnlineRepTotal)(nil),       // 1: proto.OnlineRepTotal
	(*PeerInfo)(nil),             // 2: proto.PeerInfo
	(*PeerInfos)(nil),            // 3: proto.PeerInfos
	(*PeersCountResponse)(nil),   // 4: proto.PeersCountResponse
	(*EventBandwidthStats)(nil),  // 5: proto.EventBandwidthStats
	nil,                          // 6: proto.PeersCountResponse.CountEntry
	(*empty.Empty)(nil),          // 7: google.protobuf.Empty
	(*Offset)(nil),               // 8: proto.Offset
	(*types.Addresses)(nil),      // 9: types.Addresses
	(*wrappers.BoolValue)(nil),   // 10: google.protobuf.BoolValue
	(*wrappers.StringValue)(nil), // 11: google.protobuf.StringValue
}
var file_net_proto_depIdxs = []int32{
	0,  // 0: proto.OnlineRepTotal.reps:type_name -> proto.OnlineRepInfo
	2,  // 1: proto.PeerInfos.peerInfos:type_name -> proto.PeerInfo
	6,  // 2: proto.PeersCountResponse.count:type_name -> proto.PeersCountResponse.CountEntry
	7,  // 3: proto.NetAPI.OnlineRepresentatives:input_type -> google.protobuf.Empty
	7,  // 4: proto.NetAPI.OnlineRepsInfo:input_type -> google.protobuf.Empty
	8,  // 5: proto.NetAPI.ConnectPeersInfo:input_type -> proto.Offset
	8,  // 6: proto.NetAPI.GetOnlinePeersInfo:input_type -> proto.Offset
	8,  // 7: proto.NetAPI.GetAllPeersInfo:input_type -> proto.Offset
	7,  // 8: proto.NetAPI.PeersCount:input_type -> google.protobuf.Empty
	7,  // 9: proto.NetAPI.GetBandwidthStats:input_type -> google.protobuf.Empty
	7,  // 10: proto.NetAPI.Syncing:input_type -> google.protobuf.Empty
	7,  // 11: proto.NetAPI.GetPeerId:input_type -> google.protobuf.Empty
	9,  // 12: proto.NetAPI.OnlineRepresentatives:output_type -> types.Addresses
	1,  // 13: proto.NetAPI.OnlineRepsInfo:output_type -> proto.OnlineRepTotal
	3,  // 14: proto.NetAPI.ConnectPeersInfo:output_type -> proto.PeerInfos
	3,  // 15: proto.NetAPI.GetOnlinePeersInfo:output_type -> proto.PeerInfos
	3,  // 16: proto.NetAPI.GetAllPeersInfo:output_type -> proto.PeerInfos
	4,  // 17: proto.NetAPI.PeersCount:output_type -> proto.PeersCountResponse
	5,  // 18: proto.NetAPI.GetBandwidthStats:output_type -> proto.EventBandwidthStats
	10, // 19: proto.NetAPI.Syncing:output_type -> google.protobuf.BoolValue
	11, // 20: proto.NetAPI.GetPeerId:output_type -> google.protobuf.StringValue
	12, // [12:21] is the sub-list for method output_type
	3,  // [3:12] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_net_proto_init() }
func file_net_proto_init() {
	if File_net_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_net_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineRepInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_net_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnlineRepTotal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_net_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_net_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_net_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeersCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_net_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventBandwidthStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_net_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_net_proto_goTypes,
		DependencyIndexes: file_net_proto_depIdxs,
		MessageInfos:      file_net_proto_msgTypes,
	}.Build()
	File_net_proto = out.File
	file_net_proto_rawDesc = nil
	file_net_proto_goTypes = nil
	file_net_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NetAPIClient is the client API for NetAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetAPIClient interface {
	OnlineRepresentatives(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*types.Addresses, error)
	OnlineRepsInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*OnlineRepTotal, error)
	ConnectPeersInfo(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*PeerInfos, error)
	GetOnlinePeersInfo(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*PeerInfos, error)
	GetAllPeersInfo(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*PeerInfos, error)
	PeersCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PeersCountResponse, error)
	GetBandwidthStats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*EventBandwidthStats, error)
	Syncing(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.BoolValue, error)
	GetPeerId(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.StringValue, error)
}

type netAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewNetAPIClient(cc grpc.ClientConnInterface) NetAPIClient {
	return &netAPIClient{cc}
}

func (c *netAPIClient) OnlineRepresentatives(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*types.Addresses, error) {
	out := new(types.Addresses)
	err := c.cc.Invoke(ctx, "/proto.NetAPI/OnlineRepresentatives", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAPIClient) OnlineRepsInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*OnlineRepTotal, error) {
	out := new(OnlineRepTotal)
	err := c.cc.Invoke(ctx, "/proto.NetAPI/OnlineRepsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAPIClient) ConnectPeersInfo(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*PeerInfos, error) {
	out := new(PeerInfos)
	err := c.cc.Invoke(ctx, "/proto.NetAPI/ConnectPeersInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAPIClient) GetOnlinePeersInfo(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*PeerInfos, error) {
	out := new(PeerInfos)
	err := c.cc.Invoke(ctx, "/proto.NetAPI/GetOnlinePeersInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAPIClient) GetAllPeersInfo(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*PeerInfos, error) {
	out := new(PeerInfos)
	err := c.cc.Invoke(ctx, "/proto.NetAPI/GetAllPeersInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAPIClient) PeersCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PeersCountResponse, error) {
	out := new(PeersCountResponse)
	err := c.cc.Invoke(ctx, "/proto.NetAPI/PeersCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAPIClient) GetBandwidthStats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*EventBandwidthStats, error) {
	out := new(EventBandwidthStats)
	err := c.cc.Invoke(ctx, "/proto.NetAPI/GetBandwidthStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAPIClient) Syncing(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	out := new(wrappers.BoolValue)
	err := c.cc.Invoke(ctx, "/proto.NetAPI/Syncing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netAPIClient) GetPeerId(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.StringValue, error) {
	out := new(wrappers.StringValue)
	err := c.cc.Invoke(ctx, "/proto.NetAPI/GetPeerId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetAPIServer is the server API for NetAPI service.
type NetAPIServer interface {
	OnlineRepresentatives(context.Context, *empty.Empty) (*types.Addresses, error)
	OnlineRepsInfo(context.Context, *empty.Empty) (*OnlineRepTotal, error)
	ConnectPeersInfo(context.Context, *Offset) (*PeerInfos, error)
	GetOnlinePeersInfo(context.Context, *Offset) (*PeerInfos, error)
	GetAllPeersInfo(context.Context, *Offset) (*PeerInfos, error)
	PeersCount(context.Context, *empty.Empty) (*PeersCountResponse, error)
	GetBandwidthStats(context.Context, *empty.Empty) (*EventBandwidthStats, error)
	Syncing(context.Context, *empty.Empty) (*wrappers.BoolValue, error)
	GetPeerId(context.Context, *empty.Empty) (*wrappers.StringValue, error)
}

// UnimplementedNetAPIServer can be embedded to have forward compatible implementations.
type UnimplementedNetAPIServer struct {
}

func (*UnimplementedNetAPIServer) OnlineRepresentatives(context.Context, *empty.Empty) (*types.Addresses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnlineRepresentatives not implemented")
}
func (*UnimplementedNetAPIServer) OnlineRepsInfo(context.Context, *empty.Empty) (*OnlineRepTotal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnlineRepsInfo not implemented")
}
func (*UnimplementedNetAPIServer) ConnectPeersInfo(context.Context, *Offset) (*PeerInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectPeersInfo not implemented")
}
func (*UnimplementedNetAPIServer) GetOnlinePeersInfo(context.Context, *Offset) (*PeerInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnlinePeersInfo not implemented")
}
func (*UnimplementedNetAPIServer) GetAllPeersInfo(context.Context, *Offset) (*PeerInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPeersInfo not implemented")
}
func (*UnimplementedNetAPIServer) PeersCount(context.Context, *empty.Empty) (*PeersCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeersCount not implemented")
}
func (*UnimplementedNetAPIServer) GetBandwidthStats(context.Context, *empty.Empty) (*EventBandwidthStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBandwidthStats not implemented")
}
func (*UnimplementedNetAPIServer) Syncing(context.Context, *empty.Empty) (*wrappers.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Syncing not implemented")
}
func (*UnimplementedNetAPIServer) GetPeerId(context.Context, *empty.Empty) (*wrappers.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeerId not implemented")
}

func RegisterNetAPIServer(s *grpc.Server, srv NetAPIServer) {
	s.RegisterService(&_NetAPI_serviceDesc, srv)
}

func _NetAPI_OnlineRepresentatives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAPIServer).OnlineRepresentatives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NetAPI/OnlineRepresentatives",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAPIServer).OnlineRepresentatives(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAPI_OnlineRepsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAPIServer).OnlineRepsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NetAPI/OnlineRepsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAPIServer).OnlineRepsInfo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAPI_ConnectPeersInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Offset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAPIServer).ConnectPeersInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NetAPI/ConnectPeersInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAPIServer).ConnectPeersInfo(ctx, req.(*Offset))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAPI_GetOnlinePeersInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Offset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAPIServer).GetOnlinePeersInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NetAPI/GetOnlinePeersInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAPIServer).GetOnlinePeersInfo(ctx, req.(*Offset))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAPI_GetAllPeersInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Offset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAPIServer).GetAllPeersInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NetAPI/GetAllPeersInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAPIServer).GetAllPeersInfo(ctx, req.(*Offset))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAPI_PeersCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAPIServer).PeersCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NetAPI/PeersCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAPIServer).PeersCount(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAPI_GetBandwidthStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAPIServer).GetBandwidthStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NetAPI/GetBandwidthStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAPIServer).GetBandwidthStats(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAPI_Syncing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAPIServer).Syncing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NetAPI/Syncing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAPIServer).Syncing(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetAPI_GetPeerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetAPIServer).GetPeerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NetAPI/GetPeerId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetAPIServer).GetPeerId(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NetAPI",
	HandlerType: (*NetAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnlineRepresentatives",
			Handler:    _NetAPI_OnlineRepresentatives_Handler,
		},
		{
			MethodName: "OnlineRepsInfo",
			Handler:    _NetAPI_OnlineRepsInfo_Handler,
		},
		{
			MethodName: "ConnectPeersInfo",
			Handler:    _NetAPI_ConnectPeersInfo_Handler,
		},
		{
			MethodName: "GetOnlinePeersInfo",
			Handler:    _NetAPI_GetOnlinePeersInfo_Handler,
		},
		{
			MethodName: "GetAllPeersInfo",
			Handler:    _NetAPI_GetAllPeersInfo_Handler,
		},
		{
			MethodName: "PeersCount",
			Handler:    _NetAPI_PeersCount_Handler,
		},
		{
			MethodName: "GetBandwidthStats",
			Handler:    _NetAPI_GetBandwidthStats_Handler,
		},
		{
			MethodName: "Syncing",
			Handler:    _NetAPI_Syncing_Handler,
		},
		{
			MethodName: "GetPeerId",
			Handler:    _NetAPI_GetPeerId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "net.proto",
}
