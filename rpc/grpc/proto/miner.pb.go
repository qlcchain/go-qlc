// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.7.1
// source: miner.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	types "github.com/qlcchain/go-qlc/rpc/grpc/proto/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RewardParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coinbase     string `protobuf:"bytes,1,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	Beneficial   string `protobuf:"bytes,2,opt,name=beneficial,proto3" json:"beneficial,omitempty"`
	StartHeight  uint64 `protobuf:"varint,3,opt,name=startHeight,proto3" json:"startHeight,omitempty"`
	EndHeight    uint64 `protobuf:"varint,4,opt,name=endHeight,proto3" json:"endHeight,omitempty"`
	RewardBlocks uint64 `protobuf:"varint,5,opt,name=rewardBlocks,proto3" json:"rewardBlocks,omitempty"`
	RewardAmount int64  `protobuf:"varint,6,opt,name=rewardAmount,proto3" json:"rewardAmount,omitempty"`
}

func (x *RewardParam) Reset() {
	*x = RewardParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_miner_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardParam) ProtoMessage() {}

func (x *RewardParam) ProtoReflect() protoreflect.Message {
	mi := &file_miner_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardParam.ProtoReflect.Descriptor instead.
func (*RewardParam) Descriptor() ([]byte, []int) {
	return file_miner_proto_rawDescGZIP(), []int{0}
}

func (x *RewardParam) GetCoinbase() string {
	if x != nil {
		return x.Coinbase
	}
	return ""
}

func (x *RewardParam) GetBeneficial() string {
	if x != nil {
		return x.Beneficial
	}
	return ""
}

func (x *RewardParam) GetStartHeight() uint64 {
	if x != nil {
		return x.StartHeight
	}
	return 0
}

func (x *RewardParam) GetEndHeight() uint64 {
	if x != nil {
		return x.EndHeight
	}
	return 0
}

func (x *RewardParam) GetRewardBlocks() uint64 {
	if x != nil {
		return x.RewardBlocks
	}
	return 0
}

func (x *RewardParam) GetRewardAmount() int64 {
	if x != nil {
		return x.RewardAmount
	}
	return 0
}

type MinerAvailRewardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastEndHeight     uint64 `protobuf:"varint,1,opt,name=lastEndHeight,proto3" json:"lastEndHeight,omitempty"`
	LatestBlockHeight uint64 `protobuf:"varint,2,opt,name=latestBlockHeight,proto3" json:"latestBlockHeight,omitempty"`
	NodeRewardHeight  uint64 `protobuf:"varint,3,opt,name=nodeRewardHeight,proto3" json:"nodeRewardHeight,omitempty"`
	AvailStartHeight  uint64 `protobuf:"varint,4,opt,name=availStartHeight,proto3" json:"availStartHeight,omitempty"`
	AvailEndHeight    uint64 `protobuf:"varint,5,opt,name=availEndHeight,proto3" json:"availEndHeight,omitempty"`
	AvailRewardBlocks uint64 `protobuf:"varint,6,opt,name=availRewardBlocks,proto3" json:"availRewardBlocks,omitempty"`
	AvailRewardAmount int64  `protobuf:"varint,7,opt,name=availRewardAmount,proto3" json:"availRewardAmount,omitempty"`
	NeedCallReward    bool   `protobuf:"varint,8,opt,name=needCallReward,proto3" json:"needCallReward,omitempty"`
}

func (x *MinerAvailRewardInfo) Reset() {
	*x = MinerAvailRewardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_miner_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinerAvailRewardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinerAvailRewardInfo) ProtoMessage() {}

func (x *MinerAvailRewardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_miner_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinerAvailRewardInfo.ProtoReflect.Descriptor instead.
func (*MinerAvailRewardInfo) Descriptor() ([]byte, []int) {
	return file_miner_proto_rawDescGZIP(), []int{1}
}

func (x *MinerAvailRewardInfo) GetLastEndHeight() uint64 {
	if x != nil {
		return x.LastEndHeight
	}
	return 0
}

func (x *MinerAvailRewardInfo) GetLatestBlockHeight() uint64 {
	if x != nil {
		return x.LatestBlockHeight
	}
	return 0
}

func (x *MinerAvailRewardInfo) GetNodeRewardHeight() uint64 {
	if x != nil {
		return x.NodeRewardHeight
	}
	return 0
}

func (x *MinerAvailRewardInfo) GetAvailStartHeight() uint64 {
	if x != nil {
		return x.AvailStartHeight
	}
	return 0
}

func (x *MinerAvailRewardInfo) GetAvailEndHeight() uint64 {
	if x != nil {
		return x.AvailEndHeight
	}
	return 0
}

func (x *MinerAvailRewardInfo) GetAvailRewardBlocks() uint64 {
	if x != nil {
		return x.AvailRewardBlocks
	}
	return 0
}

func (x *MinerAvailRewardInfo) GetAvailRewardAmount() int64 {
	if x != nil {
		return x.AvailRewardAmount
	}
	return 0
}

func (x *MinerAvailRewardInfo) GetNeedCallReward() bool {
	if x != nil {
		return x.NeedCallReward
	}
	return false
}

type MinerHistoryRewardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastEndHeight  uint64 `protobuf:"varint,1,opt,name=lastEndHeight,proto3" json:"lastEndHeight,omitempty"`
	RewardBlocks   uint64 `protobuf:"varint,2,opt,name=rewardBlocks,proto3" json:"rewardBlocks,omitempty"`
	RewardAmount   int64  `protobuf:"varint,3,opt,name=rewardAmount,proto3" json:"rewardAmount,omitempty"`
	LastRewardTime int64  `protobuf:"varint,4,opt,name=lastRewardTime,proto3" json:"lastRewardTime,omitempty"`
}

func (x *MinerHistoryRewardInfo) Reset() {
	*x = MinerHistoryRewardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_miner_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinerHistoryRewardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinerHistoryRewardInfo) ProtoMessage() {}

func (x *MinerHistoryRewardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_miner_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinerHistoryRewardInfo.ProtoReflect.Descriptor instead.
func (*MinerHistoryRewardInfo) Descriptor() ([]byte, []int) {
	return file_miner_proto_rawDescGZIP(), []int{2}
}

func (x *MinerHistoryRewardInfo) GetLastEndHeight() uint64 {
	if x != nil {
		return x.LastEndHeight
	}
	return 0
}

func (x *MinerHistoryRewardInfo) GetRewardBlocks() uint64 {
	if x != nil {
		return x.RewardBlocks
	}
	return 0
}

func (x *MinerHistoryRewardInfo) GetRewardAmount() int64 {
	if x != nil {
		return x.RewardAmount
	}
	return 0
}

func (x *MinerHistoryRewardInfo) GetLastRewardTime() int64 {
	if x != nil {
		return x.LastRewardTime
	}
	return 0
}

var File_miner_proto protoreflect.FileDescriptor

var file_miner_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x11, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd1, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xee, 0x02, 0x0a, 0x14, 0x4d, 0x69,
	0x6e, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x45,
	0x6e, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x45, 0x6e, 0x64,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x65, 0x65, 0x64, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6e, 0x65, 0x65, 0x64,
	0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x16, 0x4d,
	0x69, 0x6e, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x64,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x45, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x32, 0xd8, 0x05, 0x0a, 0x08,
	0x4d, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x50, 0x49, 0x12, 0x61, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x1a, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x19, 0x22, 0x14, 0x2f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x01, 0x2a, 0x12, 0x67, 0x0a, 0x10, 0x55,
	0x6e, 0x70, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x6d, 0x69, 0x6e, 0x65, 0x72,
	0x2f, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x3a, 0x01, 0x2a, 0x12, 0x64, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12,
	0x19, 0x2f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x61, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22,
	0x19, 0x2f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x60, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x76, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1e, 0x22, 0x19, 0x2f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12,
	0x6e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x76,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x11, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22,
	0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x2f,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x63, 0x76, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x42, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x48, 0x61, 0x73, 0x68, 0x3a, 0x01, 0x2a, 0x12,
	0x65, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x6e, 0x65,
	0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x6d, 0x69, 0x6e,
	0x65, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_miner_proto_rawDescOnce sync.Once
	file_miner_proto_rawDescData = file_miner_proto_rawDesc
)

func file_miner_proto_rawDescGZIP() []byte {
	file_miner_proto_rawDescOnce.Do(func() {
		file_miner_proto_rawDescData = protoimpl.X.CompressGZIP(file_miner_proto_rawDescData)
	})
	return file_miner_proto_rawDescData
}

var file_miner_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_miner_proto_goTypes = []interface{}{
	(*RewardParam)(nil),            // 0: proto.RewardParam
	(*MinerAvailRewardInfo)(nil),   // 1: proto.MinerAvailRewardInfo
	(*MinerHistoryRewardInfo)(nil), // 2: proto.MinerHistoryRewardInfo
	(*wrappers.BytesValue)(nil),    // 3: google.protobuf.BytesValue
	(*types.Address)(nil),          // 4: types.Address
	(*types.StateBlock)(nil),       // 5: types.StateBlock
	(*types.Hash)(nil),             // 6: types.Hash
}
var file_miner_proto_depIdxs = []int32{
	0, // 0: proto.MinerAPI.GetRewardData:input_type -> proto.RewardParam
	3, // 1: proto.MinerAPI.UnpackRewardData:input_type -> google.protobuf.BytesValue
	4, // 2: proto.MinerAPI.GetAvailRewardInfo:input_type -> types.Address
	0, // 3: proto.MinerAPI.GetRewardSendBlock:input_type -> proto.RewardParam
	5, // 4: proto.MinerAPI.GetRewardRecvBlock:input_type -> types.StateBlock
	6, // 5: proto.MinerAPI.GetRewardRecvBlockBySendHash:input_type -> types.Hash
	4, // 6: proto.MinerAPI.GetRewardHistory:input_type -> types.Address
	3, // 7: proto.MinerAPI.GetRewardData:output_type -> google.protobuf.BytesValue
	0, // 8: proto.MinerAPI.UnpackRewardData:output_type -> proto.RewardParam
	1, // 9: proto.MinerAPI.GetAvailRewardInfo:output_type -> proto.MinerAvailRewardInfo
	5, // 10: proto.MinerAPI.GetRewardSendBlock:output_type -> types.StateBlock
	5, // 11: proto.MinerAPI.GetRewardRecvBlock:output_type -> types.StateBlock
	5, // 12: proto.MinerAPI.GetRewardRecvBlockBySendHash:output_type -> types.StateBlock
	2, // 13: proto.MinerAPI.GetRewardHistory:output_type -> proto.MinerHistoryRewardInfo
	7, // [7:14] is the sub-list for method output_type
	0, // [0:7] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_miner_proto_init() }
func file_miner_proto_init() {
	if File_miner_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_miner_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RewardParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_miner_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinerAvailRewardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_miner_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinerHistoryRewardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_miner_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_miner_proto_goTypes,
		DependencyIndexes: file_miner_proto_depIdxs,
		MessageInfos:      file_miner_proto_msgTypes,
	}.Build()
	File_miner_proto = out.File
	file_miner_proto_rawDesc = nil
	file_miner_proto_goTypes = nil
	file_miner_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MinerAPIClient is the client API for MinerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MinerAPIClient interface {
	GetRewardData(ctx context.Context, in *RewardParam, opts ...grpc.CallOption) (*wrappers.BytesValue, error)
	UnpackRewardData(ctx context.Context, in *wrappers.BytesValue, opts ...grpc.CallOption) (*RewardParam, error)
	GetAvailRewardInfo(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*MinerAvailRewardInfo, error)
	GetRewardSendBlock(ctx context.Context, in *RewardParam, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetRewardRecvBlock(ctx context.Context, in *types.StateBlock, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetRewardRecvBlockBySendHash(ctx context.Context, in *types.Hash, opts ...grpc.CallOption) (*types.StateBlock, error)
	GetRewardHistory(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*MinerHistoryRewardInfo, error)
}

type minerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewMinerAPIClient(cc grpc.ClientConnInterface) MinerAPIClient {
	return &minerAPIClient{cc}
}

func (c *minerAPIClient) GetRewardData(ctx context.Context, in *RewardParam, opts ...grpc.CallOption) (*wrappers.BytesValue, error) {
	out := new(wrappers.BytesValue)
	err := c.cc.Invoke(ctx, "/proto.MinerAPI/GetRewardData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minerAPIClient) UnpackRewardData(ctx context.Context, in *wrappers.BytesValue, opts ...grpc.CallOption) (*RewardParam, error) {
	out := new(RewardParam)
	err := c.cc.Invoke(ctx, "/proto.MinerAPI/UnpackRewardData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minerAPIClient) GetAvailRewardInfo(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*MinerAvailRewardInfo, error) {
	out := new(MinerAvailRewardInfo)
	err := c.cc.Invoke(ctx, "/proto.MinerAPI/GetAvailRewardInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minerAPIClient) GetRewardSendBlock(ctx context.Context, in *RewardParam, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.MinerAPI/GetRewardSendBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minerAPIClient) GetRewardRecvBlock(ctx context.Context, in *types.StateBlock, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.MinerAPI/GetRewardRecvBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minerAPIClient) GetRewardRecvBlockBySendHash(ctx context.Context, in *types.Hash, opts ...grpc.CallOption) (*types.StateBlock, error) {
	out := new(types.StateBlock)
	err := c.cc.Invoke(ctx, "/proto.MinerAPI/GetRewardRecvBlockBySendHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minerAPIClient) GetRewardHistory(ctx context.Context, in *types.Address, opts ...grpc.CallOption) (*MinerHistoryRewardInfo, error) {
	out := new(MinerHistoryRewardInfo)
	err := c.cc.Invoke(ctx, "/proto.MinerAPI/GetRewardHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MinerAPIServer is the server API for MinerAPI service.
type MinerAPIServer interface {
	GetRewardData(context.Context, *RewardParam) (*wrappers.BytesValue, error)
	UnpackRewardData(context.Context, *wrappers.BytesValue) (*RewardParam, error)
	GetAvailRewardInfo(context.Context, *types.Address) (*MinerAvailRewardInfo, error)
	GetRewardSendBlock(context.Context, *RewardParam) (*types.StateBlock, error)
	GetRewardRecvBlock(context.Context, *types.StateBlock) (*types.StateBlock, error)
	GetRewardRecvBlockBySendHash(context.Context, *types.Hash) (*types.StateBlock, error)
	GetRewardHistory(context.Context, *types.Address) (*MinerHistoryRewardInfo, error)
}

// UnimplementedMinerAPIServer can be embedded to have forward compatible implementations.
type UnimplementedMinerAPIServer struct {
}

func (*UnimplementedMinerAPIServer) GetRewardData(context.Context, *RewardParam) (*wrappers.BytesValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardData not implemented")
}
func (*UnimplementedMinerAPIServer) UnpackRewardData(context.Context, *wrappers.BytesValue) (*RewardParam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpackRewardData not implemented")
}
func (*UnimplementedMinerAPIServer) GetAvailRewardInfo(context.Context, *types.Address) (*MinerAvailRewardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailRewardInfo not implemented")
}
func (*UnimplementedMinerAPIServer) GetRewardSendBlock(context.Context, *RewardParam) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardSendBlock not implemented")
}
func (*UnimplementedMinerAPIServer) GetRewardRecvBlock(context.Context, *types.StateBlock) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardRecvBlock not implemented")
}
func (*UnimplementedMinerAPIServer) GetRewardRecvBlockBySendHash(context.Context, *types.Hash) (*types.StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardRecvBlockBySendHash not implemented")
}
func (*UnimplementedMinerAPIServer) GetRewardHistory(context.Context, *types.Address) (*MinerHistoryRewardInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardHistory not implemented")
}

func RegisterMinerAPIServer(s *grpc.Server, srv MinerAPIServer) {
	s.RegisterService(&_MinerAPI_serviceDesc, srv)
}

func _MinerAPI_GetRewardData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinerAPIServer).GetRewardData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MinerAPI/GetRewardData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinerAPIServer).GetRewardData(ctx, req.(*RewardParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinerAPI_UnpackRewardData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.BytesValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinerAPIServer).UnpackRewardData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MinerAPI/UnpackRewardData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinerAPIServer).UnpackRewardData(ctx, req.(*wrappers.BytesValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinerAPI_GetAvailRewardInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinerAPIServer).GetAvailRewardInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MinerAPI/GetAvailRewardInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinerAPIServer).GetAvailRewardInfo(ctx, req.(*types.Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinerAPI_GetRewardSendBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinerAPIServer).GetRewardSendBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MinerAPI/GetRewardSendBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinerAPIServer).GetRewardSendBlock(ctx, req.(*RewardParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinerAPI_GetRewardRecvBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.StateBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinerAPIServer).GetRewardRecvBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MinerAPI/GetRewardRecvBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinerAPIServer).GetRewardRecvBlock(ctx, req.(*types.StateBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinerAPI_GetRewardRecvBlockBySendHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinerAPIServer).GetRewardRecvBlockBySendHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MinerAPI/GetRewardRecvBlockBySendHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinerAPIServer).GetRewardRecvBlockBySendHash(ctx, req.(*types.Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinerAPI_GetRewardHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinerAPIServer).GetRewardHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MinerAPI/GetRewardHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinerAPIServer).GetRewardHistory(ctx, req.(*types.Address))
	}
	return interceptor(ctx, in, info, handler)
}

var _MinerAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MinerAPI",
	HandlerType: (*MinerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRewardData",
			Handler:    _MinerAPI_GetRewardData_Handler,
		},
		{
			MethodName: "UnpackRewardData",
			Handler:    _MinerAPI_UnpackRewardData_Handler,
		},
		{
			MethodName: "GetAvailRewardInfo",
			Handler:    _MinerAPI_GetAvailRewardInfo_Handler,
		},
		{
			MethodName: "GetRewardSendBlock",
			Handler:    _MinerAPI_GetRewardSendBlock_Handler,
		},
		{
			MethodName: "GetRewardRecvBlock",
			Handler:    _MinerAPI_GetRewardRecvBlock_Handler,
		},
		{
			MethodName: "GetRewardRecvBlockBySendHash",
			Handler:    _MinerAPI_GetRewardRecvBlockBySendHash_Handler,
		},
		{
			MethodName: "GetRewardHistory",
			Handler:    _MinerAPI_GetRewardHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "miner.proto",
}
