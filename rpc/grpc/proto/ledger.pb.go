// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.7.1
// source: ledger.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *TestResponse) Reset() {
	*x = TestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResponse) ProtoMessage() {}

func (x *TestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResponse.ProtoReflect.Descriptor instead.
func (*TestResponse) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{0}
}

func (x *TestResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type AccountHistoryTopnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash  string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Count int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AccountHistoryTopnRequest) Reset() {
	*x = AccountHistoryTopnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountHistoryTopnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountHistoryTopnRequest) ProtoMessage() {}

func (x *AccountHistoryTopnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountHistoryTopnRequest.ProtoReflect.Descriptor instead.
func (*AccountHistoryTopnRequest) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{1}
}

func (x *AccountHistoryTopnRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *AccountHistoryTopnRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type AccountsPendingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses *Addresses `protobuf:"bytes,1,opt,name=addresses,proto3" json:"addresses,omitempty"`
	Count     int32      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AccountsPendingRequest) Reset() {
	*x = AccountsPendingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountsPendingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountsPendingRequest) ProtoMessage() {}

func (x *AccountsPendingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountsPendingRequest.ProtoReflect.Descriptor instead.
func (*AccountsPendingRequest) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{2}
}

func (x *AccountsPendingRequest) GetAddresses() *Addresses {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *AccountsPendingRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ChainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses *Addresses `protobuf:"bytes,1,opt,name=addresses,proto3" json:"addresses,omitempty"`
	Count     int32      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ChainRequest) Reset() {
	*x = ChainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainRequest) ProtoMessage() {}

func (x *ChainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainRequest.ProtoReflect.Descriptor instead.
func (*ChainRequest) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{3}
}

func (x *ChainRequest) GetAddresses() *Addresses {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *ChainRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type APIBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block            *StateBlock `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	TokenName        string      `protobuf:"bytes,2,opt,name=TokenName,proto3" json:"TokenName,omitempty"`
	Amount           int64       `protobuf:"varint,3,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Hash             string      `protobuf:"bytes,4,opt,name=Hash,proto3" json:"Hash,omitempty"`
	PovConfirmHeight uint64      `protobuf:"varint,5,opt,name=PovConfirmHeight,proto3" json:"PovConfirmHeight,omitempty"`
	PovConfirmCount  uint64      `protobuf:"varint,6,opt,name=PovConfirmCount,proto3" json:"PovConfirmCount,omitempty"`
}

func (x *APIBlock) Reset() {
	*x = APIBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIBlock) ProtoMessage() {}

func (x *APIBlock) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIBlock.ProtoReflect.Descriptor instead.
func (*APIBlock) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{4}
}

func (x *APIBlock) GetBlock() *StateBlock {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *APIBlock) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *APIBlock) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *APIBlock) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *APIBlock) GetPovConfirmHeight() uint64 {
	if x != nil {
		return x.PovConfirmHeight
	}
	return 0
}

func (x *APIBlock) GetPovConfirmCount() uint64 {
	if x != nil {
		return x.PovConfirmCount
	}
	return 0
}

type APIBlocks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Apiblocks []*APIBlock `protobuf:"bytes,1,rep,name=apiblocks,proto3" json:"apiblocks,omitempty"`
}

func (x *APIBlocks) Reset() {
	*x = APIBlocks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIBlocks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIBlocks) ProtoMessage() {}

func (x *APIBlocks) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIBlocks.ProtoReflect.Descriptor instead.
func (*APIBlocks) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{5}
}

func (x *APIBlocks) GetApiblocks() []*APIBlock {
	if x != nil {
		return x.Apiblocks
	}
	return nil
}

type APITokenMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tokenmeta *TokenMeta `protobuf:"bytes,1,opt,name=tokenmeta,proto3" json:"tokenmeta,omitempty"`
	TokenName string     `protobuf:"bytes,2,opt,name=TokenName,proto3" json:"TokenName,omitempty"`
	Pending   int64      `protobuf:"varint,3,opt,name=Pending,proto3" json:"Pending,omitempty"`
}

func (x *APITokenMeta) Reset() {
	*x = APITokenMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APITokenMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITokenMeta) ProtoMessage() {}

func (x *APITokenMeta) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITokenMeta.ProtoReflect.Descriptor instead.
func (*APITokenMeta) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{6}
}

func (x *APITokenMeta) GetTokenmeta() *TokenMeta {
	if x != nil {
		return x.Tokenmeta
	}
	return nil
}

func (x *APITokenMeta) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *APITokenMeta) GetPending() int64 {
	if x != nil {
		return x.Pending
	}
	return 0
}

type APIAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address        string          `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	CoinBalance    int64           `protobuf:"varint,2,opt,name=CoinBalance,proto3" json:"CoinBalance,omitempty"`
	CoinVote       int64           `protobuf:"varint,3,opt,name=CoinVote,proto3" json:"CoinVote,omitempty"`
	CoinNetwork    int64           `protobuf:"varint,4,opt,name=CoinNetwork,proto3" json:"CoinNetwork,omitempty"`
	CoinStorage    int64           `protobuf:"varint,5,opt,name=CoinStorage,proto3" json:"CoinStorage,omitempty"`
	CoinOracle     int64           `protobuf:"varint,6,opt,name=CoinOracle,proto3" json:"CoinOracle,omitempty"`
	Representative int64           `protobuf:"varint,7,opt,name=Representative,proto3" json:"Representative,omitempty"`
	Tokens         []*APITokenMeta `protobuf:"bytes,8,rep,name=Tokens,proto3" json:"Tokens,omitempty"`
}

func (x *APIAccount) Reset() {
	*x = APIAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIAccount) ProtoMessage() {}

func (x *APIAccount) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIAccount.ProtoReflect.Descriptor instead.
func (*APIAccount) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{7}
}

func (x *APIAccount) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *APIAccount) GetCoinBalance() int64 {
	if x != nil {
		return x.CoinBalance
	}
	return 0
}

func (x *APIAccount) GetCoinVote() int64 {
	if x != nil {
		return x.CoinVote
	}
	return 0
}

func (x *APIAccount) GetCoinNetwork() int64 {
	if x != nil {
		return x.CoinNetwork
	}
	return 0
}

func (x *APIAccount) GetCoinStorage() int64 {
	if x != nil {
		return x.CoinStorage
	}
	return 0
}

func (x *APIAccount) GetCoinOracle() int64 {
	if x != nil {
		return x.CoinOracle
	}
	return 0
}

func (x *APIAccount) GetRepresentative() int64 {
	if x != nil {
		return x.Representative
	}
	return 0
}

func (x *APIAccount) GetTokens() []*APITokenMeta {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type APIAccountBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *APIAccountBalance) Reset() {
	*x = APIAccountBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIAccountBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIAccountBalance) ProtoMessage() {}

func (x *APIAccountBalance) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIAccountBalance.ProtoReflect.Descriptor instead.
func (*APIAccountBalance) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{8}
}

type APIAccountBalances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balances []*APIAccountBalance `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances,omitempty"`
}

func (x *APIAccountBalances) Reset() {
	*x = APIAccountBalances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIAccountBalances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIAccountBalances) ProtoMessage() {}

func (x *APIAccountBalances) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIAccountBalances.ProtoReflect.Descriptor instead.
func (*APIAccountBalances) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{9}
}

func (x *APIAccountBalances) GetBalances() []*APIAccountBalance {
	if x != nil {
		return x.Balances
	}
	return nil
}

type APIPending struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       *PendingKey  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Info      *PendingInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	TokenName string       `protobuf:"bytes,3,opt,name=TokenName,proto3" json:"TokenName,omitempty"`
	Timestamp int64        `protobuf:"varint,4,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	BlockType []byte       `protobuf:"bytes,5,opt,name=BlockType,proto3" json:"BlockType,omitempty"`
}

func (x *APIPending) Reset() {
	*x = APIPending{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIPending) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIPending) ProtoMessage() {}

func (x *APIPending) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIPending.ProtoReflect.Descriptor instead.
func (*APIPending) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{10}
}

func (x *APIPending) GetKey() *PendingKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *APIPending) GetInfo() *PendingInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *APIPending) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *APIPending) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *APIPending) GetBlockType() []byte {
	if x != nil {
		return x.BlockType
	}
	return nil
}

type APIPendings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiPendings []*APIPending `protobuf:"bytes,1,rep,name=apiPendings,proto3" json:"apiPendings,omitempty"`
}

func (x *APIPendings) Reset() {
	*x = APIPendings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIPendings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIPendings) ProtoMessage() {}

func (x *APIPendings) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIPendings.ProtoReflect.Descriptor instead.
func (*APIPendings) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{11}
}

func (x *APIPendings) GetApiPendings() []*APIPending {
	if x != nil {
		return x.ApiPendings
	}
	return nil
}

type APIRepresentative struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *APIRepresentative) Reset() {
	*x = APIRepresentative{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRepresentative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRepresentative) ProtoMessage() {}

func (x *APIRepresentative) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRepresentative.ProtoReflect.Descriptor instead.
func (*APIRepresentative) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{12}
}

type APIRepresentatives struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiRepresentatives []*APIRepresentative `protobuf:"bytes,1,rep,name=apiRepresentatives,proto3" json:"apiRepresentatives,omitempty"`
}

func (x *APIRepresentatives) Reset() {
	*x = APIRepresentatives{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRepresentatives) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRepresentatives) ProtoMessage() {}

func (x *APIRepresentatives) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRepresentatives.ProtoReflect.Descriptor instead.
func (*APIRepresentatives) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{13}
}

func (x *APIRepresentatives) GetApiRepresentatives() []*APIRepresentative {
	if x != nil {
		return x.ApiRepresentatives
	}
	return nil
}

var File_ledger_proto protoreflect.FileDescriptor

var file_ledger_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0b, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x28, 0x0a, 0x0c, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x19, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x5e, 0x0a, 0x16,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x0c,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x08, 0x41, 0x50, 0x49, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x27, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x6f, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x50, 0x6f,
	0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x50, 0x6f, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x50, 0x6f, 0x76, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3a, 0x0a, 0x09, 0x41, 0x50, 0x49, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x50, 0x49, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x09, 0x61, 0x70, 0x69, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x22, 0x76, 0x0a, 0x0c, 0x41, 0x50, 0x49, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x9d, 0x02, 0x0a,
	0x0a, 0x41, 0x50, 0x49, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x6f, 0x69, 0x6e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x56,
	0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x56,
	0x6f, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x6f, 0x69, 0x6e,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x4f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x69,
	0x6e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x2b, 0x0a, 0x06, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50, 0x49, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x06, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x13, 0x0a, 0x11,
	0x41, 0x50, 0x49, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x22, 0x4a, 0x0a, 0x12, 0x41, 0x50, 0x49, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x50, 0x49, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xb3, 0x01,
	0x0a, 0x0a, 0x41, 0x50, 0x49, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x26, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x42, 0x0a, 0x0b, 0x41, 0x50, 0x49, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x50, 0x49, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x61, 0x70, 0x69, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x41, 0x50, 0x49, 0x52, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x22, 0x5e, 0x0a, 0x12,
	0x41, 0x50, 0x49, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x61, 0x70, 0x69, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x12, 0x61, 0x70, 0x69, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x32, 0x94, 0x1c, 0x0a,
	0x09, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x41, 0x50, 0x49, 0x12, 0x56, 0x0a, 0x12, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x22, 0x22,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x6c, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x6e, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54,
	0x6f, 0x70, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x50, 0x49, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x22, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x6e,
	0x12, 0x4d, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50, 0x49, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x5f, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x50, 0x49, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x5e, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1f, 0x12, 0x1d, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x5a, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12,
	0x1b, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x55, 0x0a, 0x0d,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x0c, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12,
	0x14, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x14, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x46, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x1a, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x22, 0x19, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x49, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50,
	0x49, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12,
	0x12, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x5b, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x50, 0x49, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x23, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x41, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x50, 0x49, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x16, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x12, 0x42, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73,
	0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x53, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50,
	0x49, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x0f,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a,
	0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x22, 0x1f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50,
	0x0a, 0x08, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50, 0x49, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10,
	0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x5d, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50, 0x49, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x22, 0x1f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f,
	0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12,
	0x4b, 0x0a, 0x06, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x0d,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0f, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x61, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x25, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x67, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x58, 0x0a, 0x0e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x1e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x67,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x50, 0x0a,
	0x0a, 0x47, 0x61, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2f, 0x67, 0x61, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x4d, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61,
	0x73, 0x68, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x49,
	0x0a, 0x08, 0x47, 0x61, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x22,
	0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2f, 0x67, 0x61, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x65, 0x0a, 0x13, 0x47, 0x65, 0x6e,
	0x65, 0x73, 0x69, 0x73, 0x4d, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x23, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e,
	0x65, 0x73, 0x69, 0x73, 0x4d, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x5d, 0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x4d, 0x69, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x22, 0x22, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e,
	0x65, 0x73, 0x69, 0x73, 0x4d, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x57, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x16, 0x12, 0x14, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x59, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x73,
	0x68, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x51, 0x0a, 0x0c, 0x47, 0x61, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16,
	0x12, 0x14, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x67, 0x61, 0x73, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x5d, 0x0a, 0x0f, 0x47, 0x61, 0x73, 0x4d, 0x69, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x67, 0x61, 0x73, 0x4d, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4f, 0x0a, 0x08, 0x47, 0x61, 0x73, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x18, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x67, 0x61,
	0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x53, 0x0a, 0x0e, 0x49, 0x73, 0x47, 0x65, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x0e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x22, 0x1e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x69, 0x73, 0x47,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x53, 0x0a, 0x0e, 0x49,
	0x73, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2f, 0x69, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x5b, 0x0a, 0x10, 0x41, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x20, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x6c, 0x6c,
	0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x52, 0x0a,
	0x08, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50, 0x49, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2f, 0x6e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x30,
	0x01, 0x12, 0x58, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50, 0x49,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x6e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x30, 0x01, 0x12, 0x56, 0x0a, 0x0d, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50, 0x49, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x3a, 0x01,
	0x2a, 0x30, 0x01, 0x12, 0x50, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50, 0x49, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x6e, 0x65, 0x77, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x3a, 0x01, 0x2a, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x11, 0x22, 0x0c, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x3a, 0x01, 0x2a, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ledger_proto_rawDescOnce sync.Once
	file_ledger_proto_rawDescData = file_ledger_proto_rawDesc
)

func file_ledger_proto_rawDescGZIP() []byte {
	file_ledger_proto_rawDescOnce.Do(func() {
		file_ledger_proto_rawDescData = protoimpl.X.CompressGZIP(file_ledger_proto_rawDescData)
	})
	return file_ledger_proto_rawDescData
}

var file_ledger_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_ledger_proto_goTypes = []interface{}{
	(*TestResponse)(nil),              // 0: proto.TestResponse
	(*AccountHistoryTopnRequest)(nil), // 1: proto.AccountHistoryTopnRequest
	(*AccountsPendingRequest)(nil),    // 2: proto.AccountsPendingRequest
	(*ChainRequest)(nil),              // 3: proto.ChainRequest
	(*APIBlock)(nil),                  // 4: proto.APIBlock
	(*APIBlocks)(nil),                 // 5: proto.APIBlocks
	(*APITokenMeta)(nil),              // 6: proto.APITokenMeta
	(*APIAccount)(nil),                // 7: proto.APIAccount
	(*APIAccountBalance)(nil),         // 8: proto.APIAccountBalance
	(*APIAccountBalances)(nil),        // 9: proto.APIAccountBalances
	(*APIPending)(nil),                // 10: proto.APIPending
	(*APIPendings)(nil),               // 11: proto.APIPendings
	(*APIRepresentative)(nil),         // 12: proto.APIRepresentative
	(*APIRepresentatives)(nil),        // 13: proto.APIRepresentatives
	(*Addresses)(nil),                 // 14: proto.Addresses
	(*StateBlock)(nil),                // 15: proto.StateBlock
	(*TokenMeta)(nil),                 // 16: proto.TokenMeta
	(*PendingKey)(nil),                // 17: proto.PendingKey
	(*PendingInfo)(nil),               // 18: proto.PendingInfo
	(*Address)(nil),                   // 19: proto.Address
	(*empty.Empty)(nil),               // 20: google.protobuf.Empty
	(*Offset)(nil),                    // 21: proto.Offset
	(*Hash)(nil),                      // 22: proto.Hash
	(*Hashes)(nil),                    // 23: proto.Hashes
	(*Boolean)(nil),                   // 24: proto.Boolean
	(*String)(nil),                    // 25: proto.String
	(*Int64)(nil),                     // 26: proto.Int64
	(*Balance)(nil),                   // 27: proto.Balance
	(*UInt64)(nil),                    // 28: proto.UInt64
	(*TokenInfos)(nil),                // 29: proto.TokenInfos
	(*TokenInfo)(nil),                 // 30: proto.TokenInfo
	(*StateBlocks)(nil),               // 31: proto.StateBlocks
}
var file_ledger_proto_depIdxs = []int32{
	14, // 0: proto.AccountsPendingRequest.addresses:type_name -> proto.Addresses
	14, // 1: proto.ChainRequest.addresses:type_name -> proto.Addresses
	15, // 2: proto.APIBlock.block:type_name -> proto.StateBlock
	4,  // 3: proto.APIBlocks.apiblocks:type_name -> proto.APIBlock
	16, // 4: proto.APITokenMeta.tokenmeta:type_name -> proto.TokenMeta
	6,  // 5: proto.APIAccount.Tokens:type_name -> proto.APITokenMeta
	8,  // 6: proto.APIAccountBalances.balances:type_name -> proto.APIAccountBalance
	17, // 7: proto.APIPending.key:type_name -> proto.PendingKey
	18, // 8: proto.APIPending.info:type_name -> proto.PendingInfo
	10, // 9: proto.APIPendings.apiPendings:type_name -> proto.APIPending
	12, // 10: proto.APIRepresentatives.apiRepresentatives:type_name -> proto.APIRepresentative
	19, // 11: proto.LedgerAPI.AccountBlocksCount:input_type -> proto.Address
	1,  // 12: proto.LedgerAPI.AccountHistoryTopn:input_type -> proto.AccountHistoryTopnRequest
	19, // 13: proto.LedgerAPI.AccountInfo:input_type -> proto.Address
	19, // 14: proto.LedgerAPI.ConfirmedAccountInfo:input_type -> proto.Address
	19, // 15: proto.LedgerAPI.AccountRepresentative:input_type -> proto.Address
	19, // 16: proto.LedgerAPI.AccountVotingWeight:input_type -> proto.Address
	20, // 17: proto.LedgerAPI.AccountsCount:input_type -> google.protobuf.Empty
	21, // 18: proto.LedgerAPI.Accounts:input_type -> proto.Offset
	22, // 19: proto.LedgerAPI.BlockAccount:input_type -> proto.Hash
	22, // 20: proto.LedgerAPI.BlockConfirmedStatus:input_type -> proto.Hash
	15, // 21: proto.LedgerAPI.BlockHash:input_type -> proto.StateBlock
	23, // 22: proto.LedgerAPI.BlocksInfo:input_type -> proto.Hashes
	23, // 23: proto.LedgerAPI.ConfirmedBlocksInfo:input_type -> proto.Hashes
	21, // 24: proto.LedgerAPI.Blocks:input_type -> proto.Offset
	3,  // 25: proto.LedgerAPI.Chain:input_type -> proto.ChainRequest
	19, // 26: proto.LedgerAPI.Delegators:input_type -> proto.Address
	19, // 27: proto.LedgerAPI.DelegatorsCount:input_type -> proto.Address
	20, // 28: proto.LedgerAPI.Pendings:input_type -> google.protobuf.Empty
	24, // 29: proto.LedgerAPI.Representatives:input_type -> proto.Boolean
	20, // 30: proto.LedgerAPI.Tokens:input_type -> google.protobuf.Empty
	22, // 31: proto.LedgerAPI.TokenInfoById:input_type -> proto.Hash
	25, // 32: proto.LedgerAPI.TokenInfoByName:input_type -> proto.String
	19, // 33: proto.LedgerAPI.GetAccountOnlineBlock:input_type -> proto.Address
	20, // 34: proto.LedgerAPI.GenesisAddress:input_type -> google.protobuf.Empty
	20, // 35: proto.LedgerAPI.GasAddress:input_type -> google.protobuf.Empty
	20, // 36: proto.LedgerAPI.ChainToken:input_type -> google.protobuf.Empty
	20, // 37: proto.LedgerAPI.GasToken:input_type -> google.protobuf.Empty
	20, // 38: proto.LedgerAPI.GenesisMintageBlock:input_type -> google.protobuf.Empty
	20, // 39: proto.LedgerAPI.GenesisMintageHash:input_type -> google.protobuf.Empty
	20, // 40: proto.LedgerAPI.GenesisBlock:input_type -> google.protobuf.Empty
	20, // 41: proto.LedgerAPI.GenesisBlockHash:input_type -> google.protobuf.Empty
	20, // 42: proto.LedgerAPI.GasBlockHash:input_type -> google.protobuf.Empty
	20, // 43: proto.LedgerAPI.GasMintageBlock:input_type -> google.protobuf.Empty
	20, // 44: proto.LedgerAPI.GasBlock:input_type -> google.protobuf.Empty
	15, // 45: proto.LedgerAPI.IsGenesisBlock:input_type -> proto.StateBlock
	15, // 46: proto.LedgerAPI.IsGenesisToken:input_type -> proto.StateBlock
	15, // 47: proto.LedgerAPI.AllGenesisBlocks:input_type -> proto.StateBlock
	20, // 48: proto.LedgerAPI.NewBlock:input_type -> google.protobuf.Empty
	19, // 49: proto.LedgerAPI.NewAccountBlock:input_type -> proto.Address
	19, // 50: proto.LedgerAPI.BalanceChange:input_type -> proto.Address
	19, // 51: proto.LedgerAPI.NewPending:input_type -> proto.Address
	20, // 52: proto.LedgerAPI.Test:input_type -> google.protobuf.Empty
	26, // 53: proto.LedgerAPI.AccountBlocksCount:output_type -> proto.Int64
	5,  // 54: proto.LedgerAPI.AccountHistoryTopn:output_type -> proto.APIBlocks
	7,  // 55: proto.LedgerAPI.AccountInfo:output_type -> proto.APIAccount
	7,  // 56: proto.LedgerAPI.ConfirmedAccountInfo:output_type -> proto.APIAccount
	19, // 57: proto.LedgerAPI.AccountRepresentative:output_type -> proto.Address
	27, // 58: proto.LedgerAPI.AccountVotingWeight:output_type -> proto.Balance
	28, // 59: proto.LedgerAPI.AccountsCount:output_type -> proto.UInt64
	14, // 60: proto.LedgerAPI.Accounts:output_type -> proto.Addresses
	19, // 61: proto.LedgerAPI.BlockAccount:output_type -> proto.Address
	24, // 62: proto.LedgerAPI.BlockConfirmedStatus:output_type -> proto.Boolean
	22, // 63: proto.LedgerAPI.BlockHash:output_type -> proto.Hash
	5,  // 64: proto.LedgerAPI.BlocksInfo:output_type -> proto.APIBlocks
	5,  // 65: proto.LedgerAPI.ConfirmedBlocksInfo:output_type -> proto.APIBlocks
	5,  // 66: proto.LedgerAPI.Blocks:output_type -> proto.APIBlocks
	23, // 67: proto.LedgerAPI.Chain:output_type -> proto.Hashes
	9,  // 68: proto.LedgerAPI.Delegators:output_type -> proto.APIAccountBalances
	26, // 69: proto.LedgerAPI.DelegatorsCount:output_type -> proto.Int64
	11, // 70: proto.LedgerAPI.Pendings:output_type -> proto.APIPendings
	13, // 71: proto.LedgerAPI.Representatives:output_type -> proto.APIRepresentatives
	29, // 72: proto.LedgerAPI.Tokens:output_type -> proto.TokenInfos
	30, // 73: proto.LedgerAPI.TokenInfoById:output_type -> proto.TokenInfo
	30, // 74: proto.LedgerAPI.TokenInfoByName:output_type -> proto.TokenInfo
	15, // 75: proto.LedgerAPI.GetAccountOnlineBlock:output_type -> proto.StateBlock
	19, // 76: proto.LedgerAPI.GenesisAddress:output_type -> proto.Address
	19, // 77: proto.LedgerAPI.GasAddress:output_type -> proto.Address
	22, // 78: proto.LedgerAPI.ChainToken:output_type -> proto.Hash
	22, // 79: proto.LedgerAPI.GasToken:output_type -> proto.Hash
	15, // 80: proto.LedgerAPI.GenesisMintageBlock:output_type -> proto.StateBlock
	22, // 81: proto.LedgerAPI.GenesisMintageHash:output_type -> proto.Hash
	15, // 82: proto.LedgerAPI.GenesisBlock:output_type -> proto.StateBlock
	22, // 83: proto.LedgerAPI.GenesisBlockHash:output_type -> proto.Hash
	22, // 84: proto.LedgerAPI.GasBlockHash:output_type -> proto.Hash
	15, // 85: proto.LedgerAPI.GasMintageBlock:output_type -> proto.StateBlock
	15, // 86: proto.LedgerAPI.GasBlock:output_type -> proto.StateBlock
	24, // 87: proto.LedgerAPI.IsGenesisBlock:output_type -> proto.Boolean
	24, // 88: proto.LedgerAPI.IsGenesisToken:output_type -> proto.Boolean
	31, // 89: proto.LedgerAPI.AllGenesisBlocks:output_type -> proto.StateBlocks
	4,  // 90: proto.LedgerAPI.NewBlock:output_type -> proto.APIBlock
	4,  // 91: proto.LedgerAPI.NewAccountBlock:output_type -> proto.APIBlock
	7,  // 92: proto.LedgerAPI.BalanceChange:output_type -> proto.APIAccount
	10, // 93: proto.LedgerAPI.NewPending:output_type -> proto.APIPending
	0,  // 94: proto.LedgerAPI.Test:output_type -> proto.TestResponse
	53, // [53:95] is the sub-list for method output_type
	11, // [11:53] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_ledger_proto_init() }
func file_ledger_proto_init() {
	if File_ledger_proto != nil {
		return
	}
	file_basic_proto_init()
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ledger_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountHistoryTopnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountsPendingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIBlocks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APITokenMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIAccountBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIAccountBalances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIPending); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIPendings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRepresentative); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRepresentatives); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ledger_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ledger_proto_goTypes,
		DependencyIndexes: file_ledger_proto_depIdxs,
		MessageInfos:      file_ledger_proto_msgTypes,
	}.Build()
	File_ledger_proto = out.File
	file_ledger_proto_rawDesc = nil
	file_ledger_proto_goTypes = nil
	file_ledger_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LedgerAPIClient is the client API for LedgerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LedgerAPIClient interface {
	AccountBlocksCount(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Int64, error)
	AccountHistoryTopn(ctx context.Context, in *AccountHistoryTopnRequest, opts ...grpc.CallOption) (*APIBlocks, error)
	AccountInfo(ctx context.Context, in *Address, opts ...grpc.CallOption) (*APIAccount, error)
	ConfirmedAccountInfo(ctx context.Context, in *Address, opts ...grpc.CallOption) (*APIAccount, error)
	AccountRepresentative(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error)
	AccountVotingWeight(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Balance, error)
	AccountsCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UInt64, error)
	Accounts(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*Addresses, error)
	BlockAccount(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Address, error)
	BlockConfirmedStatus(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Boolean, error)
	BlockHash(ctx context.Context, in *StateBlock, opts ...grpc.CallOption) (*Hash, error)
	BlocksInfo(ctx context.Context, in *Hashes, opts ...grpc.CallOption) (*APIBlocks, error)
	ConfirmedBlocksInfo(ctx context.Context, in *Hashes, opts ...grpc.CallOption) (*APIBlocks, error)
	Blocks(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*APIBlocks, error)
	Chain(ctx context.Context, in *ChainRequest, opts ...grpc.CallOption) (*Hashes, error)
	Delegators(ctx context.Context, in *Address, opts ...grpc.CallOption) (*APIAccountBalances, error)
	DelegatorsCount(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Int64, error)
	Pendings(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*APIPendings, error)
	Representatives(ctx context.Context, in *Boolean, opts ...grpc.CallOption) (*APIRepresentatives, error)
	Tokens(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TokenInfos, error)
	TokenInfoById(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*TokenInfo, error)
	TokenInfoByName(ctx context.Context, in *String, opts ...grpc.CallOption) (*TokenInfo, error)
	GetAccountOnlineBlock(ctx context.Context, in *Address, opts ...grpc.CallOption) (*StateBlock, error)
	GenesisAddress(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Address, error)
	GasAddress(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Address, error)
	ChainToken(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Hash, error)
	GasToken(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Hash, error)
	GenesisMintageBlock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StateBlock, error)
	GenesisMintageHash(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Hash, error)
	GenesisBlock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StateBlock, error)
	GenesisBlockHash(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Hash, error)
	GasBlockHash(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Hash, error)
	GasMintageBlock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StateBlock, error)
	GasBlock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StateBlock, error)
	IsGenesisBlock(ctx context.Context, in *StateBlock, opts ...grpc.CallOption) (*Boolean, error)
	IsGenesisToken(ctx context.Context, in *StateBlock, opts ...grpc.CallOption) (*Boolean, error)
	AllGenesisBlocks(ctx context.Context, in *StateBlock, opts ...grpc.CallOption) (*StateBlocks, error)
	NewBlock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (LedgerAPI_NewBlockClient, error)
	NewAccountBlock(ctx context.Context, in *Address, opts ...grpc.CallOption) (LedgerAPI_NewAccountBlockClient, error)
	BalanceChange(ctx context.Context, in *Address, opts ...grpc.CallOption) (LedgerAPI_BalanceChangeClient, error)
	NewPending(ctx context.Context, in *Address, opts ...grpc.CallOption) (LedgerAPI_NewPendingClient, error)
	Test(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TestResponse, error)
}

type ledgerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewLedgerAPIClient(cc grpc.ClientConnInterface) LedgerAPIClient {
	return &ledgerAPIClient{cc}
}

func (c *ledgerAPIClient) AccountBlocksCount(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/AccountBlocksCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) AccountHistoryTopn(ctx context.Context, in *AccountHistoryTopnRequest, opts ...grpc.CallOption) (*APIBlocks, error) {
	out := new(APIBlocks)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/AccountHistoryTopn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) AccountInfo(ctx context.Context, in *Address, opts ...grpc.CallOption) (*APIAccount, error) {
	out := new(APIAccount)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/AccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) ConfirmedAccountInfo(ctx context.Context, in *Address, opts ...grpc.CallOption) (*APIAccount, error) {
	out := new(APIAccount)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/ConfirmedAccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) AccountRepresentative(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/AccountRepresentative", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) AccountVotingWeight(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Balance, error) {
	out := new(Balance)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/AccountVotingWeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) AccountsCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UInt64, error) {
	out := new(UInt64)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/AccountsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) Accounts(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*Addresses, error) {
	out := new(Addresses)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/Accounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) BlockAccount(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/BlockAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) BlockConfirmedStatus(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/BlockConfirmedStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) BlockHash(ctx context.Context, in *StateBlock, opts ...grpc.CallOption) (*Hash, error) {
	out := new(Hash)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/BlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) BlocksInfo(ctx context.Context, in *Hashes, opts ...grpc.CallOption) (*APIBlocks, error) {
	out := new(APIBlocks)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/BlocksInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) ConfirmedBlocksInfo(ctx context.Context, in *Hashes, opts ...grpc.CallOption) (*APIBlocks, error) {
	out := new(APIBlocks)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/ConfirmedBlocksInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) Blocks(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*APIBlocks, error) {
	out := new(APIBlocks)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/Blocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) Chain(ctx context.Context, in *ChainRequest, opts ...grpc.CallOption) (*Hashes, error) {
	out := new(Hashes)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/Chain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) Delegators(ctx context.Context, in *Address, opts ...grpc.CallOption) (*APIAccountBalances, error) {
	out := new(APIAccountBalances)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/Delegators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) DelegatorsCount(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/DelegatorsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) Pendings(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*APIPendings, error) {
	out := new(APIPendings)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/Pendings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) Representatives(ctx context.Context, in *Boolean, opts ...grpc.CallOption) (*APIRepresentatives, error) {
	out := new(APIRepresentatives)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/Representatives", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) Tokens(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TokenInfos, error) {
	out := new(TokenInfos)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/Tokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) TokenInfoById(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*TokenInfo, error) {
	out := new(TokenInfo)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/TokenInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) TokenInfoByName(ctx context.Context, in *String, opts ...grpc.CallOption) (*TokenInfo, error) {
	out := new(TokenInfo)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/TokenInfoByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GetAccountOnlineBlock(ctx context.Context, in *Address, opts ...grpc.CallOption) (*StateBlock, error) {
	out := new(StateBlock)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/GetAccountOnlineBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GenesisAddress(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/GenesisAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GasAddress(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/GasAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) ChainToken(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Hash, error) {
	out := new(Hash)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/ChainToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GasToken(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Hash, error) {
	out := new(Hash)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/GasToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GenesisMintageBlock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StateBlock, error) {
	out := new(StateBlock)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/GenesisMintageBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GenesisMintageHash(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Hash, error) {
	out := new(Hash)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/GenesisMintageHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GenesisBlock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StateBlock, error) {
	out := new(StateBlock)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/GenesisBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GenesisBlockHash(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Hash, error) {
	out := new(Hash)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/GenesisBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GasBlockHash(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Hash, error) {
	out := new(Hash)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/GasBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GasMintageBlock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StateBlock, error) {
	out := new(StateBlock)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/GasMintageBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GasBlock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StateBlock, error) {
	out := new(StateBlock)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/GasBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) IsGenesisBlock(ctx context.Context, in *StateBlock, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/IsGenesisBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) IsGenesisToken(ctx context.Context, in *StateBlock, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/IsGenesisToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) AllGenesisBlocks(ctx context.Context, in *StateBlock, opts ...grpc.CallOption) (*StateBlocks, error) {
	out := new(StateBlocks)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/AllGenesisBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) NewBlock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (LedgerAPI_NewBlockClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LedgerAPI_serviceDesc.Streams[0], "/proto.LedgerAPI/NewBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &ledgerAPINewBlockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LedgerAPI_NewBlockClient interface {
	Recv() (*APIBlock, error)
	grpc.ClientStream
}

type ledgerAPINewBlockClient struct {
	grpc.ClientStream
}

func (x *ledgerAPINewBlockClient) Recv() (*APIBlock, error) {
	m := new(APIBlock)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ledgerAPIClient) NewAccountBlock(ctx context.Context, in *Address, opts ...grpc.CallOption) (LedgerAPI_NewAccountBlockClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LedgerAPI_serviceDesc.Streams[1], "/proto.LedgerAPI/NewAccountBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &ledgerAPINewAccountBlockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LedgerAPI_NewAccountBlockClient interface {
	Recv() (*APIBlock, error)
	grpc.ClientStream
}

type ledgerAPINewAccountBlockClient struct {
	grpc.ClientStream
}

func (x *ledgerAPINewAccountBlockClient) Recv() (*APIBlock, error) {
	m := new(APIBlock)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ledgerAPIClient) BalanceChange(ctx context.Context, in *Address, opts ...grpc.CallOption) (LedgerAPI_BalanceChangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LedgerAPI_serviceDesc.Streams[2], "/proto.LedgerAPI/BalanceChange", opts...)
	if err != nil {
		return nil, err
	}
	x := &ledgerAPIBalanceChangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LedgerAPI_BalanceChangeClient interface {
	Recv() (*APIAccount, error)
	grpc.ClientStream
}

type ledgerAPIBalanceChangeClient struct {
	grpc.ClientStream
}

func (x *ledgerAPIBalanceChangeClient) Recv() (*APIAccount, error) {
	m := new(APIAccount)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ledgerAPIClient) NewPending(ctx context.Context, in *Address, opts ...grpc.CallOption) (LedgerAPI_NewPendingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LedgerAPI_serviceDesc.Streams[3], "/proto.LedgerAPI/NewPending", opts...)
	if err != nil {
		return nil, err
	}
	x := &ledgerAPINewPendingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LedgerAPI_NewPendingClient interface {
	Recv() (*APIPending, error)
	grpc.ClientStream
}

type ledgerAPINewPendingClient struct {
	grpc.ClientStream
}

func (x *ledgerAPINewPendingClient) Recv() (*APIPending, error) {
	m := new(APIPending)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ledgerAPIClient) Test(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LedgerAPIServer is the server API for LedgerAPI service.
type LedgerAPIServer interface {
	AccountBlocksCount(context.Context, *Address) (*Int64, error)
	AccountHistoryTopn(context.Context, *AccountHistoryTopnRequest) (*APIBlocks, error)
	AccountInfo(context.Context, *Address) (*APIAccount, error)
	ConfirmedAccountInfo(context.Context, *Address) (*APIAccount, error)
	AccountRepresentative(context.Context, *Address) (*Address, error)
	AccountVotingWeight(context.Context, *Address) (*Balance, error)
	AccountsCount(context.Context, *empty.Empty) (*UInt64, error)
	Accounts(context.Context, *Offset) (*Addresses, error)
	BlockAccount(context.Context, *Hash) (*Address, error)
	BlockConfirmedStatus(context.Context, *Hash) (*Boolean, error)
	BlockHash(context.Context, *StateBlock) (*Hash, error)
	BlocksInfo(context.Context, *Hashes) (*APIBlocks, error)
	ConfirmedBlocksInfo(context.Context, *Hashes) (*APIBlocks, error)
	Blocks(context.Context, *Offset) (*APIBlocks, error)
	Chain(context.Context, *ChainRequest) (*Hashes, error)
	Delegators(context.Context, *Address) (*APIAccountBalances, error)
	DelegatorsCount(context.Context, *Address) (*Int64, error)
	Pendings(context.Context, *empty.Empty) (*APIPendings, error)
	Representatives(context.Context, *Boolean) (*APIRepresentatives, error)
	Tokens(context.Context, *empty.Empty) (*TokenInfos, error)
	TokenInfoById(context.Context, *Hash) (*TokenInfo, error)
	TokenInfoByName(context.Context, *String) (*TokenInfo, error)
	GetAccountOnlineBlock(context.Context, *Address) (*StateBlock, error)
	GenesisAddress(context.Context, *empty.Empty) (*Address, error)
	GasAddress(context.Context, *empty.Empty) (*Address, error)
	ChainToken(context.Context, *empty.Empty) (*Hash, error)
	GasToken(context.Context, *empty.Empty) (*Hash, error)
	GenesisMintageBlock(context.Context, *empty.Empty) (*StateBlock, error)
	GenesisMintageHash(context.Context, *empty.Empty) (*Hash, error)
	GenesisBlock(context.Context, *empty.Empty) (*StateBlock, error)
	GenesisBlockHash(context.Context, *empty.Empty) (*Hash, error)
	GasBlockHash(context.Context, *empty.Empty) (*Hash, error)
	GasMintageBlock(context.Context, *empty.Empty) (*StateBlock, error)
	GasBlock(context.Context, *empty.Empty) (*StateBlock, error)
	IsGenesisBlock(context.Context, *StateBlock) (*Boolean, error)
	IsGenesisToken(context.Context, *StateBlock) (*Boolean, error)
	AllGenesisBlocks(context.Context, *StateBlock) (*StateBlocks, error)
	NewBlock(*empty.Empty, LedgerAPI_NewBlockServer) error
	NewAccountBlock(*Address, LedgerAPI_NewAccountBlockServer) error
	BalanceChange(*Address, LedgerAPI_BalanceChangeServer) error
	NewPending(*Address, LedgerAPI_NewPendingServer) error
	Test(context.Context, *empty.Empty) (*TestResponse, error)
}

// UnimplementedLedgerAPIServer can be embedded to have forward compatible implementations.
type UnimplementedLedgerAPIServer struct {
}

func (*UnimplementedLedgerAPIServer) AccountBlocksCount(context.Context, *Address) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountBlocksCount not implemented")
}
func (*UnimplementedLedgerAPIServer) AccountHistoryTopn(context.Context, *AccountHistoryTopnRequest) (*APIBlocks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountHistoryTopn not implemented")
}
func (*UnimplementedLedgerAPIServer) AccountInfo(context.Context, *Address) (*APIAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountInfo not implemented")
}
func (*UnimplementedLedgerAPIServer) ConfirmedAccountInfo(context.Context, *Address) (*APIAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmedAccountInfo not implemented")
}
func (*UnimplementedLedgerAPIServer) AccountRepresentative(context.Context, *Address) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountRepresentative not implemented")
}
func (*UnimplementedLedgerAPIServer) AccountVotingWeight(context.Context, *Address) (*Balance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountVotingWeight not implemented")
}
func (*UnimplementedLedgerAPIServer) AccountsCount(context.Context, *empty.Empty) (*UInt64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountsCount not implemented")
}
func (*UnimplementedLedgerAPIServer) Accounts(context.Context, *Offset) (*Addresses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accounts not implemented")
}
func (*UnimplementedLedgerAPIServer) BlockAccount(context.Context, *Hash) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockAccount not implemented")
}
func (*UnimplementedLedgerAPIServer) BlockConfirmedStatus(context.Context, *Hash) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockConfirmedStatus not implemented")
}
func (*UnimplementedLedgerAPIServer) BlockHash(context.Context, *StateBlock) (*Hash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockHash not implemented")
}
func (*UnimplementedLedgerAPIServer) BlocksInfo(context.Context, *Hashes) (*APIBlocks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlocksInfo not implemented")
}
func (*UnimplementedLedgerAPIServer) ConfirmedBlocksInfo(context.Context, *Hashes) (*APIBlocks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmedBlocksInfo not implemented")
}
func (*UnimplementedLedgerAPIServer) Blocks(context.Context, *Offset) (*APIBlocks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Blocks not implemented")
}
func (*UnimplementedLedgerAPIServer) Chain(context.Context, *ChainRequest) (*Hashes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chain not implemented")
}
func (*UnimplementedLedgerAPIServer) Delegators(context.Context, *Address) (*APIAccountBalances, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delegators not implemented")
}
func (*UnimplementedLedgerAPIServer) DelegatorsCount(context.Context, *Address) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorsCount not implemented")
}
func (*UnimplementedLedgerAPIServer) Pendings(context.Context, *empty.Empty) (*APIPendings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pendings not implemented")
}
func (*UnimplementedLedgerAPIServer) Representatives(context.Context, *Boolean) (*APIRepresentatives, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Representatives not implemented")
}
func (*UnimplementedLedgerAPIServer) Tokens(context.Context, *empty.Empty) (*TokenInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tokens not implemented")
}
func (*UnimplementedLedgerAPIServer) TokenInfoById(context.Context, *Hash) (*TokenInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenInfoById not implemented")
}
func (*UnimplementedLedgerAPIServer) TokenInfoByName(context.Context, *String) (*TokenInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenInfoByName not implemented")
}
func (*UnimplementedLedgerAPIServer) GetAccountOnlineBlock(context.Context, *Address) (*StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountOnlineBlock not implemented")
}
func (*UnimplementedLedgerAPIServer) GenesisAddress(context.Context, *empty.Empty) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenesisAddress not implemented")
}
func (*UnimplementedLedgerAPIServer) GasAddress(context.Context, *empty.Empty) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasAddress not implemented")
}
func (*UnimplementedLedgerAPIServer) ChainToken(context.Context, *empty.Empty) (*Hash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainToken not implemented")
}
func (*UnimplementedLedgerAPIServer) GasToken(context.Context, *empty.Empty) (*Hash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasToken not implemented")
}
func (*UnimplementedLedgerAPIServer) GenesisMintageBlock(context.Context, *empty.Empty) (*StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenesisMintageBlock not implemented")
}
func (*UnimplementedLedgerAPIServer) GenesisMintageHash(context.Context, *empty.Empty) (*Hash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenesisMintageHash not implemented")
}
func (*UnimplementedLedgerAPIServer) GenesisBlock(context.Context, *empty.Empty) (*StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenesisBlock not implemented")
}
func (*UnimplementedLedgerAPIServer) GenesisBlockHash(context.Context, *empty.Empty) (*Hash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenesisBlockHash not implemented")
}
func (*UnimplementedLedgerAPIServer) GasBlockHash(context.Context, *empty.Empty) (*Hash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasBlockHash not implemented")
}
func (*UnimplementedLedgerAPIServer) GasMintageBlock(context.Context, *empty.Empty) (*StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasMintageBlock not implemented")
}
func (*UnimplementedLedgerAPIServer) GasBlock(context.Context, *empty.Empty) (*StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasBlock not implemented")
}
func (*UnimplementedLedgerAPIServer) IsGenesisBlock(context.Context, *StateBlock) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsGenesisBlock not implemented")
}
func (*UnimplementedLedgerAPIServer) IsGenesisToken(context.Context, *StateBlock) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsGenesisToken not implemented")
}
func (*UnimplementedLedgerAPIServer) AllGenesisBlocks(context.Context, *StateBlock) (*StateBlocks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllGenesisBlocks not implemented")
}
func (*UnimplementedLedgerAPIServer) NewBlock(*empty.Empty, LedgerAPI_NewBlockServer) error {
	return status.Errorf(codes.Unimplemented, "method NewBlock not implemented")
}
func (*UnimplementedLedgerAPIServer) NewAccountBlock(*Address, LedgerAPI_NewAccountBlockServer) error {
	return status.Errorf(codes.Unimplemented, "method NewAccountBlock not implemented")
}
func (*UnimplementedLedgerAPIServer) BalanceChange(*Address, LedgerAPI_BalanceChangeServer) error {
	return status.Errorf(codes.Unimplemented, "method BalanceChange not implemented")
}
func (*UnimplementedLedgerAPIServer) NewPending(*Address, LedgerAPI_NewPendingServer) error {
	return status.Errorf(codes.Unimplemented, "method NewPending not implemented")
}
func (*UnimplementedLedgerAPIServer) Test(context.Context, *empty.Empty) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}

func RegisterLedgerAPIServer(s *grpc.Server, srv LedgerAPIServer) {
	s.RegisterService(&_LedgerAPI_serviceDesc, srv)
}

func _LedgerAPI_AccountBlocksCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).AccountBlocksCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/AccountBlocksCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).AccountBlocksCount(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_AccountHistoryTopn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountHistoryTopnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).AccountHistoryTopn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/AccountHistoryTopn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).AccountHistoryTopn(ctx, req.(*AccountHistoryTopnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_AccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).AccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/AccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).AccountInfo(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_ConfirmedAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).ConfirmedAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/ConfirmedAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).ConfirmedAccountInfo(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_AccountRepresentative_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).AccountRepresentative(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/AccountRepresentative",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).AccountRepresentative(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_AccountVotingWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).AccountVotingWeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/AccountVotingWeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).AccountVotingWeight(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_AccountsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).AccountsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/AccountsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).AccountsCount(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_Accounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Offset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).Accounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/Accounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).Accounts(ctx, req.(*Offset))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_BlockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).BlockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/BlockAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).BlockAccount(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_BlockConfirmedStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).BlockConfirmedStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/BlockConfirmedStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).BlockConfirmedStatus(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_BlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).BlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/BlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).BlockHash(ctx, req.(*StateBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_BlocksInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).BlocksInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/BlocksInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).BlocksInfo(ctx, req.(*Hashes))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_ConfirmedBlocksInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).ConfirmedBlocksInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/ConfirmedBlocksInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).ConfirmedBlocksInfo(ctx, req.(*Hashes))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_Blocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Offset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).Blocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/Blocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).Blocks(ctx, req.(*Offset))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_Chain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).Chain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/Chain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).Chain(ctx, req.(*ChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_Delegators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).Delegators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/Delegators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).Delegators(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_DelegatorsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).DelegatorsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/DelegatorsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).DelegatorsCount(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_Pendings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).Pendings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/Pendings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).Pendings(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_Representatives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Boolean)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).Representatives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/Representatives",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).Representatives(ctx, req.(*Boolean))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_Tokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).Tokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/Tokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).Tokens(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_TokenInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).TokenInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/TokenInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).TokenInfoById(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_TokenInfoByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).TokenInfoByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/TokenInfoByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).TokenInfoByName(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GetAccountOnlineBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GetAccountOnlineBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/GetAccountOnlineBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GetAccountOnlineBlock(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GenesisAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GenesisAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/GenesisAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GenesisAddress(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GasAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GasAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/GasAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GasAddress(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_ChainToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).ChainToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/ChainToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).ChainToken(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GasToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GasToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/GasToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GasToken(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GenesisMintageBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GenesisMintageBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/GenesisMintageBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GenesisMintageBlock(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GenesisMintageHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GenesisMintageHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/GenesisMintageHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GenesisMintageHash(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GenesisBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GenesisBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/GenesisBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GenesisBlock(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GenesisBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GenesisBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/GenesisBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GenesisBlockHash(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GasBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GasBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/GasBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GasBlockHash(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GasMintageBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GasMintageBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/GasMintageBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GasMintageBlock(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GasBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GasBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/GasBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GasBlock(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_IsGenesisBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).IsGenesisBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/IsGenesisBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).IsGenesisBlock(ctx, req.(*StateBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_IsGenesisToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).IsGenesisToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/IsGenesisToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).IsGenesisToken(ctx, req.(*StateBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_AllGenesisBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).AllGenesisBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/AllGenesisBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).AllGenesisBlocks(ctx, req.(*StateBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_NewBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LedgerAPIServer).NewBlock(m, &ledgerAPINewBlockServer{stream})
}

type LedgerAPI_NewBlockServer interface {
	Send(*APIBlock) error
	grpc.ServerStream
}

type ledgerAPINewBlockServer struct {
	grpc.ServerStream
}

func (x *ledgerAPINewBlockServer) Send(m *APIBlock) error {
	return x.ServerStream.SendMsg(m)
}

func _LedgerAPI_NewAccountBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Address)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LedgerAPIServer).NewAccountBlock(m, &ledgerAPINewAccountBlockServer{stream})
}

type LedgerAPI_NewAccountBlockServer interface {
	Send(*APIBlock) error
	grpc.ServerStream
}

type ledgerAPINewAccountBlockServer struct {
	grpc.ServerStream
}

func (x *ledgerAPINewAccountBlockServer) Send(m *APIBlock) error {
	return x.ServerStream.SendMsg(m)
}

func _LedgerAPI_BalanceChange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Address)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LedgerAPIServer).BalanceChange(m, &ledgerAPIBalanceChangeServer{stream})
}

type LedgerAPI_BalanceChangeServer interface {
	Send(*APIAccount) error
	grpc.ServerStream
}

type ledgerAPIBalanceChangeServer struct {
	grpc.ServerStream
}

func (x *ledgerAPIBalanceChangeServer) Send(m *APIAccount) error {
	return x.ServerStream.SendMsg(m)
}

func _LedgerAPI_NewPending_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Address)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LedgerAPIServer).NewPending(m, &ledgerAPINewPendingServer{stream})
}

type LedgerAPI_NewPendingServer interface {
	Send(*APIPending) error
	grpc.ServerStream
}

type ledgerAPINewPendingServer struct {
	grpc.ServerStream
}

func (x *ledgerAPINewPendingServer) Send(m *APIPending) error {
	return x.ServerStream.SendMsg(m)
}

func _LedgerAPI_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).Test(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _LedgerAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LedgerAPI",
	HandlerType: (*LedgerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccountBlocksCount",
			Handler:    _LedgerAPI_AccountBlocksCount_Handler,
		},
		{
			MethodName: "AccountHistoryTopn",
			Handler:    _LedgerAPI_AccountHistoryTopn_Handler,
		},
		{
			MethodName: "AccountInfo",
			Handler:    _LedgerAPI_AccountInfo_Handler,
		},
		{
			MethodName: "ConfirmedAccountInfo",
			Handler:    _LedgerAPI_ConfirmedAccountInfo_Handler,
		},
		{
			MethodName: "AccountRepresentative",
			Handler:    _LedgerAPI_AccountRepresentative_Handler,
		},
		{
			MethodName: "AccountVotingWeight",
			Handler:    _LedgerAPI_AccountVotingWeight_Handler,
		},
		{
			MethodName: "AccountsCount",
			Handler:    _LedgerAPI_AccountsCount_Handler,
		},
		{
			MethodName: "Accounts",
			Handler:    _LedgerAPI_Accounts_Handler,
		},
		{
			MethodName: "BlockAccount",
			Handler:    _LedgerAPI_BlockAccount_Handler,
		},
		{
			MethodName: "BlockConfirmedStatus",
			Handler:    _LedgerAPI_BlockConfirmedStatus_Handler,
		},
		{
			MethodName: "BlockHash",
			Handler:    _LedgerAPI_BlockHash_Handler,
		},
		{
			MethodName: "BlocksInfo",
			Handler:    _LedgerAPI_BlocksInfo_Handler,
		},
		{
			MethodName: "ConfirmedBlocksInfo",
			Handler:    _LedgerAPI_ConfirmedBlocksInfo_Handler,
		},
		{
			MethodName: "Blocks",
			Handler:    _LedgerAPI_Blocks_Handler,
		},
		{
			MethodName: "Chain",
			Handler:    _LedgerAPI_Chain_Handler,
		},
		{
			MethodName: "Delegators",
			Handler:    _LedgerAPI_Delegators_Handler,
		},
		{
			MethodName: "DelegatorsCount",
			Handler:    _LedgerAPI_DelegatorsCount_Handler,
		},
		{
			MethodName: "Pendings",
			Handler:    _LedgerAPI_Pendings_Handler,
		},
		{
			MethodName: "Representatives",
			Handler:    _LedgerAPI_Representatives_Handler,
		},
		{
			MethodName: "Tokens",
			Handler:    _LedgerAPI_Tokens_Handler,
		},
		{
			MethodName: "TokenInfoById",
			Handler:    _LedgerAPI_TokenInfoById_Handler,
		},
		{
			MethodName: "TokenInfoByName",
			Handler:    _LedgerAPI_TokenInfoByName_Handler,
		},
		{
			MethodName: "GetAccountOnlineBlock",
			Handler:    _LedgerAPI_GetAccountOnlineBlock_Handler,
		},
		{
			MethodName: "GenesisAddress",
			Handler:    _LedgerAPI_GenesisAddress_Handler,
		},
		{
			MethodName: "GasAddress",
			Handler:    _LedgerAPI_GasAddress_Handler,
		},
		{
			MethodName: "ChainToken",
			Handler:    _LedgerAPI_ChainToken_Handler,
		},
		{
			MethodName: "GasToken",
			Handler:    _LedgerAPI_GasToken_Handler,
		},
		{
			MethodName: "GenesisMintageBlock",
			Handler:    _LedgerAPI_GenesisMintageBlock_Handler,
		},
		{
			MethodName: "GenesisMintageHash",
			Handler:    _LedgerAPI_GenesisMintageHash_Handler,
		},
		{
			MethodName: "GenesisBlock",
			Handler:    _LedgerAPI_GenesisBlock_Handler,
		},
		{
			MethodName: "GenesisBlockHash",
			Handler:    _LedgerAPI_GenesisBlockHash_Handler,
		},
		{
			MethodName: "GasBlockHash",
			Handler:    _LedgerAPI_GasBlockHash_Handler,
		},
		{
			MethodName: "GasMintageBlock",
			Handler:    _LedgerAPI_GasMintageBlock_Handler,
		},
		{
			MethodName: "GasBlock",
			Handler:    _LedgerAPI_GasBlock_Handler,
		},
		{
			MethodName: "IsGenesisBlock",
			Handler:    _LedgerAPI_IsGenesisBlock_Handler,
		},
		{
			MethodName: "IsGenesisToken",
			Handler:    _LedgerAPI_IsGenesisToken_Handler,
		},
		{
			MethodName: "AllGenesisBlocks",
			Handler:    _LedgerAPI_AllGenesisBlocks_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _LedgerAPI_Test_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NewBlock",
			Handler:       _LedgerAPI_NewBlock_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NewAccountBlock",
			Handler:       _LedgerAPI_NewAccountBlock_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BalanceChange",
			Handler:       _LedgerAPI_BalanceChange_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NewPending",
			Handler:       _LedgerAPI_NewPending_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ledger.proto",
}
