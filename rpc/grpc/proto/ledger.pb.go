// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.7.1
// source: ledger.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *TestResponse) Reset() {
	*x = TestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResponse) ProtoMessage() {}

func (x *TestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResponse.ProtoReflect.Descriptor instead.
func (*TestResponse) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{0}
}

func (x *TestResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type AccountHistoryTopnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash  string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Count int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AccountHistoryTopnRequest) Reset() {
	*x = AccountHistoryTopnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountHistoryTopnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountHistoryTopnRequest) ProtoMessage() {}

func (x *AccountHistoryTopnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountHistoryTopnRequest.ProtoReflect.Descriptor instead.
func (*AccountHistoryTopnRequest) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{1}
}

func (x *AccountHistoryTopnRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *AccountHistoryTopnRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type AccountsPendingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses *Addresses `protobuf:"bytes,1,opt,name=addresses,proto3" json:"addresses,omitempty"`
	Count     int32      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AccountsPendingRequest) Reset() {
	*x = AccountsPendingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountsPendingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountsPendingRequest) ProtoMessage() {}

func (x *AccountsPendingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountsPendingRequest.ProtoReflect.Descriptor instead.
func (*AccountsPendingRequest) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{2}
}

func (x *AccountsPendingRequest) GetAddresses() *Addresses {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *AccountsPendingRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ChainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses *Addresses `protobuf:"bytes,1,opt,name=addresses,proto3" json:"addresses,omitempty"`
	Count     int32      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ChainRequest) Reset() {
	*x = ChainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainRequest) ProtoMessage() {}

func (x *ChainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainRequest.ProtoReflect.Descriptor instead.
func (*ChainRequest) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{3}
}

func (x *ChainRequest) GetAddresses() *Addresses {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *ChainRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type AccountsBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountsBalances map[string]*AccountsBalanceResponseBalances `protobuf:"bytes,1,rep,name=accountsBalances,proto3" json:"accountsBalances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AccountsBalanceResponse) Reset() {
	*x = AccountsBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountsBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountsBalanceResponse) ProtoMessage() {}

func (x *AccountsBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountsBalanceResponse.ProtoReflect.Descriptor instead.
func (*AccountsBalanceResponse) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{4}
}

func (x *AccountsBalanceResponse) GetAccountsBalances() map[string]*AccountsBalanceResponseBalances {
	if x != nil {
		return x.AccountsBalances
	}
	return nil
}

type AccountsFrontiersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountsFrontiers map[string]*AccountsFrontiersResponseFrontier `protobuf:"bytes,1,rep,name=accountsFrontiers,proto3" json:"accountsFrontiers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AccountsFrontiersResponse) Reset() {
	*x = AccountsFrontiersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountsFrontiersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountsFrontiersResponse) ProtoMessage() {}

func (x *AccountsFrontiersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountsFrontiersResponse.ProtoReflect.Descriptor instead.
func (*AccountsFrontiersResponse) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{5}
}

func (x *AccountsFrontiersResponse) GetAccountsFrontiers() map[string]*AccountsFrontiersResponseFrontier {
	if x != nil {
		return x.AccountsFrontiers
	}
	return nil
}

type AccountsPendingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountsPendings map[string]*APIPendings `protobuf:"bytes,1,rep,name=accountsPendings,proto3" json:"accountsPendings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AccountsPendingResponse) Reset() {
	*x = AccountsPendingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountsPendingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountsPendingResponse) ProtoMessage() {}

func (x *AccountsPendingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountsPendingResponse.ProtoReflect.Descriptor instead.
func (*AccountsPendingResponse) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{6}
}

func (x *AccountsPendingResponse) GetAccountsPendings() map[string]*APIPendings {
	if x != nil {
		return x.AccountsPendings
	}
	return nil
}

type BlocksCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count map[string]uint64 `protobuf:"bytes,1,rep,name=count,proto3" json:"count,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *BlocksCountResponse) Reset() {
	*x = BlocksCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlocksCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlocksCountResponse) ProtoMessage() {}

func (x *BlocksCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlocksCountResponse.ProtoReflect.Descriptor instead.
func (*BlocksCountResponse) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{7}
}

func (x *BlocksCountResponse) GetCount() map[string]uint64 {
	if x != nil {
		return x.Count
	}
	return nil
}

type APISendBlockPara struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From      string `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	TokenName string `protobuf:"bytes,2,opt,name=TokenName,proto3" json:"TokenName,omitempty"`
	To        string `protobuf:"bytes,3,opt,name=To,proto3" json:"To,omitempty"`
	Amount    int64  `protobuf:"varint,4,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Sender    string `protobuf:"bytes,5,opt,name=Sender,proto3" json:"Sender,omitempty"`
	Receiver  string `protobuf:"bytes,6,opt,name=Receiver,proto3" json:"Receiver,omitempty"`
	Message   string `protobuf:"bytes,7,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *APISendBlockPara) Reset() {
	*x = APISendBlockPara{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APISendBlockPara) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APISendBlockPara) ProtoMessage() {}

func (x *APISendBlockPara) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APISendBlockPara.ProtoReflect.Descriptor instead.
func (*APISendBlockPara) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{8}
}

func (x *APISendBlockPara) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *APISendBlockPara) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *APISendBlockPara) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *APISendBlockPara) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *APISendBlockPara) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *APISendBlockPara) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *APISendBlockPara) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GenerateSendBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Para   *APISendBlockPara `protobuf:"bytes,1,opt,name=para,proto3" json:"para,omitempty"`
	PrkStr string            `protobuf:"bytes,2,opt,name=prkStr,proto3" json:"prkStr,omitempty"`
}

func (x *GenerateSendBlockRequest) Reset() {
	*x = GenerateSendBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateSendBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateSendBlockRequest) ProtoMessage() {}

func (x *GenerateSendBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateSendBlockRequest.ProtoReflect.Descriptor instead.
func (*GenerateSendBlockRequest) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{9}
}

func (x *GenerateSendBlockRequest) GetPara() *APISendBlockPara {
	if x != nil {
		return x.Para
	}
	return nil
}

func (x *GenerateSendBlockRequest) GetPrkStr() string {
	if x != nil {
		return x.PrkStr
	}
	return ""
}

type GenerateReceiveBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block  *StateBlock `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	PrkStr string      `protobuf:"bytes,2,opt,name=prkStr,proto3" json:"prkStr,omitempty"`
}

func (x *GenerateReceiveBlockRequest) Reset() {
	*x = GenerateReceiveBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateReceiveBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateReceiveBlockRequest) ProtoMessage() {}

func (x *GenerateReceiveBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateReceiveBlockRequest.ProtoReflect.Descriptor instead.
func (*GenerateReceiveBlockRequest) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{10}
}

func (x *GenerateReceiveBlockRequest) GetBlock() *StateBlock {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *GenerateReceiveBlockRequest) GetPrkStr() string {
	if x != nil {
		return x.PrkStr
	}
	return ""
}

type GenerateReceiveBlockByHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash   string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	PrkStr string `protobuf:"bytes,2,opt,name=prkStr,proto3" json:"prkStr,omitempty"`
}

func (x *GenerateReceiveBlockByHashRequest) Reset() {
	*x = GenerateReceiveBlockByHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateReceiveBlockByHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateReceiveBlockByHashRequest) ProtoMessage() {}

func (x *GenerateReceiveBlockByHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateReceiveBlockByHashRequest.ProtoReflect.Descriptor instead.
func (*GenerateReceiveBlockByHashRequest) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{11}
}

func (x *GenerateReceiveBlockByHashRequest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *GenerateReceiveBlockByHashRequest) GetPrkStr() string {
	if x != nil {
		return x.PrkStr
	}
	return ""
}

type GenerateChangeBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account        string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Representative string `protobuf:"bytes,2,opt,name=representative,proto3" json:"representative,omitempty"`
	PrkStr         string `protobuf:"bytes,3,opt,name=prkStr,proto3" json:"prkStr,omitempty"`
}

func (x *GenerateChangeBlockRequest) Reset() {
	*x = GenerateChangeBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateChangeBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateChangeBlockRequest) ProtoMessage() {}

func (x *GenerateChangeBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateChangeBlockRequest.ProtoReflect.Descriptor instead.
func (*GenerateChangeBlockRequest) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{12}
}

func (x *GenerateChangeBlockRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *GenerateChangeBlockRequest) GetRepresentative() string {
	if x != nil {
		return x.Representative
	}
	return ""
}

func (x *GenerateChangeBlockRequest) GetPrkStr() string {
	if x != nil {
		return x.PrkStr
	}
	return ""
}

type APIBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block            *StateBlock `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	TokenName        string      `protobuf:"bytes,2,opt,name=tokenName,proto3" json:"tokenName,omitempty"`
	Amount           int64       `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Hash             string      `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	PovConfirmHeight uint64      `protobuf:"varint,5,opt,name=povConfirmHeight,proto3" json:"povConfirmHeight,omitempty"`
	PovConfirmCount  uint64      `protobuf:"varint,6,opt,name=povConfirmCount,proto3" json:"povConfirmCount,omitempty"`
}

func (x *APIBlock) Reset() {
	*x = APIBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIBlock) ProtoMessage() {}

func (x *APIBlock) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIBlock.ProtoReflect.Descriptor instead.
func (*APIBlock) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{13}
}

func (x *APIBlock) GetBlock() *StateBlock {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *APIBlock) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *APIBlock) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *APIBlock) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *APIBlock) GetPovConfirmHeight() uint64 {
	if x != nil {
		return x.PovConfirmHeight
	}
	return 0
}

func (x *APIBlock) GetPovConfirmCount() uint64 {
	if x != nil {
		return x.PovConfirmCount
	}
	return 0
}

type APIBlocks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks []*APIBlock `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *APIBlocks) Reset() {
	*x = APIBlocks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIBlocks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIBlocks) ProtoMessage() {}

func (x *APIBlocks) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIBlocks.ProtoReflect.Descriptor instead.
func (*APIBlocks) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{14}
}

func (x *APIBlocks) GetBlocks() []*APIBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type APITokenMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenMeta *TokenMeta `protobuf:"bytes,1,opt,name=tokenMeta,proto3" json:"tokenMeta,omitempty"`
	TokenName string     `protobuf:"bytes,2,opt,name=tokenName,proto3" json:"tokenName,omitempty"`
	Pending   int64      `protobuf:"varint,3,opt,name=pending,proto3" json:"pending,omitempty"`
}

func (x *APITokenMeta) Reset() {
	*x = APITokenMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APITokenMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APITokenMeta) ProtoMessage() {}

func (x *APITokenMeta) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APITokenMeta.ProtoReflect.Descriptor instead.
func (*APITokenMeta) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{15}
}

func (x *APITokenMeta) GetTokenMeta() *TokenMeta {
	if x != nil {
		return x.TokenMeta
	}
	return nil
}

func (x *APITokenMeta) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *APITokenMeta) GetPending() int64 {
	if x != nil {
		return x.Pending
	}
	return 0
}

type APIAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address        string          `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	CoinBalance    int64           `protobuf:"varint,2,opt,name=coinBalance,proto3" json:"coinBalance,omitempty"`
	CoinVote       int64           `protobuf:"varint,3,opt,name=coinVote,proto3" json:"coinVote,omitempty"`
	CoinNetwork    int64           `protobuf:"varint,4,opt,name=coinNetwork,proto3" json:"coinNetwork,omitempty"`
	CoinStorage    int64           `protobuf:"varint,5,opt,name=coinStorage,proto3" json:"coinStorage,omitempty"`
	CoinOracle     int64           `protobuf:"varint,6,opt,name=coinOracle,proto3" json:"coinOracle,omitempty"`
	Representative int64           `protobuf:"varint,7,opt,name=representative,proto3" json:"representative,omitempty"`
	Tokens         []*APITokenMeta `protobuf:"bytes,8,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *APIAccount) Reset() {
	*x = APIAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIAccount) ProtoMessage() {}

func (x *APIAccount) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIAccount.ProtoReflect.Descriptor instead.
func (*APIAccount) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{16}
}

func (x *APIAccount) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *APIAccount) GetCoinBalance() int64 {
	if x != nil {
		return x.CoinBalance
	}
	return 0
}

func (x *APIAccount) GetCoinVote() int64 {
	if x != nil {
		return x.CoinVote
	}
	return 0
}

func (x *APIAccount) GetCoinNetwork() int64 {
	if x != nil {
		return x.CoinNetwork
	}
	return 0
}

func (x *APIAccount) GetCoinStorage() int64 {
	if x != nil {
		return x.CoinStorage
	}
	return 0
}

func (x *APIAccount) GetCoinOracle() int64 {
	if x != nil {
		return x.CoinOracle
	}
	return 0
}

func (x *APIAccount) GetRepresentative() int64 {
	if x != nil {
		return x.Representative
	}
	return 0
}

func (x *APIAccount) GetTokens() []*APITokenMeta {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type APIAccountBalances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balances []*APIAccountBalances_APIAccountBalance `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances,omitempty"`
}

func (x *APIAccountBalances) Reset() {
	*x = APIAccountBalances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIAccountBalances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIAccountBalances) ProtoMessage() {}

func (x *APIAccountBalances) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIAccountBalances.ProtoReflect.Descriptor instead.
func (*APIAccountBalances) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{17}
}

func (x *APIAccountBalances) GetBalances() []*APIAccountBalances_APIAccountBalance {
	if x != nil {
		return x.Balances
	}
	return nil
}

type APIPending struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       *PendingKey  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Info      *PendingInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	TokenName string       `protobuf:"bytes,3,opt,name=TokenName,proto3" json:"TokenName,omitempty"`
	Timestamp int64        `protobuf:"varint,4,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	BlockType []byte       `protobuf:"bytes,5,opt,name=BlockType,proto3" json:"BlockType,omitempty"`
}

func (x *APIPending) Reset() {
	*x = APIPending{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIPending) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIPending) ProtoMessage() {}

func (x *APIPending) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIPending.ProtoReflect.Descriptor instead.
func (*APIPending) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{18}
}

func (x *APIPending) GetKey() *PendingKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *APIPending) GetInfo() *PendingInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *APIPending) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *APIPending) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *APIPending) GetBlockType() []byte {
	if x != nil {
		return x.BlockType
	}
	return nil
}

type APIPendings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pendings []*APIPending `protobuf:"bytes,1,rep,name=pendings,proto3" json:"pendings,omitempty"`
}

func (x *APIPendings) Reset() {
	*x = APIPendings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIPendings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIPendings) ProtoMessage() {}

func (x *APIPendings) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIPendings.ProtoReflect.Descriptor instead.
func (*APIPendings) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{19}
}

func (x *APIPendings) GetPendings() []*APIPending {
	if x != nil {
		return x.Pendings
	}
	return nil
}

type APIRepresentative struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Balance int64  `protobuf:"varint,2,opt,name=Balance,proto3" json:"Balance,omitempty"`
	Vote    int64  `protobuf:"varint,3,opt,name=Vote,proto3" json:"Vote,omitempty"`
	Network int64  `protobuf:"varint,4,opt,name=Network,proto3" json:"Network,omitempty"`
	Storage int64  `protobuf:"varint,5,opt,name=Storage,proto3" json:"Storage,omitempty"`
	Oracle  int64  `protobuf:"varint,6,opt,name=Oracle,proto3" json:"Oracle,omitempty"`
	Total   int64  `protobuf:"varint,7,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *APIRepresentative) Reset() {
	*x = APIRepresentative{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRepresentative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRepresentative) ProtoMessage() {}

func (x *APIRepresentative) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRepresentative.ProtoReflect.Descriptor instead.
func (*APIRepresentative) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{20}
}

func (x *APIRepresentative) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *APIRepresentative) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *APIRepresentative) GetVote() int64 {
	if x != nil {
		return x.Vote
	}
	return 0
}

func (x *APIRepresentative) GetNetwork() int64 {
	if x != nil {
		return x.Network
	}
	return 0
}

func (x *APIRepresentative) GetStorage() int64 {
	if x != nil {
		return x.Storage
	}
	return 0
}

func (x *APIRepresentative) GetOracle() int64 {
	if x != nil {
		return x.Oracle
	}
	return 0
}

func (x *APIRepresentative) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type APIRepresentatives struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Representatives []*APIRepresentative `protobuf:"bytes,1,rep,name=representatives,proto3" json:"representatives,omitempty"`
}

func (x *APIRepresentatives) Reset() {
	*x = APIRepresentatives{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIRepresentatives) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIRepresentatives) ProtoMessage() {}

func (x *APIRepresentatives) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIRepresentatives.ProtoReflect.Descriptor instead.
func (*APIRepresentatives) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{21}
}

func (x *APIRepresentatives) GetRepresentatives() []*APIRepresentative {
	if x != nil {
		return x.Representatives
	}
	return nil
}

type AccountsBalanceResponse_APIAccountsBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance int64 `protobuf:"varint,1,opt,name=Balance,proto3" json:"Balance,omitempty"`
	Vote    int64 `protobuf:"varint,2,opt,name=Vote,proto3" json:"Vote,omitempty"`
	Network int64 `protobuf:"varint,3,opt,name=Network,proto3" json:"Network,omitempty"`
	Storage int64 `protobuf:"varint,4,opt,name=Storage,proto3" json:"Storage,omitempty"`
	Oracle  int64 `protobuf:"varint,5,opt,name=Oracle,proto3" json:"Oracle,omitempty"`
	Pending int64 `protobuf:"varint,6,opt,name=Pending,proto3" json:"Pending,omitempty"`
}

func (x *AccountsBalanceResponse_APIAccountsBalance) Reset() {
	*x = AccountsBalanceResponse_APIAccountsBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountsBalanceResponse_APIAccountsBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountsBalanceResponse_APIAccountsBalance) ProtoMessage() {}

func (x *AccountsBalanceResponse_APIAccountsBalance) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountsBalanceResponse_APIAccountsBalance.ProtoReflect.Descriptor instead.
func (*AccountsBalanceResponse_APIAccountsBalance) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{4, 0}
}

func (x *AccountsBalanceResponse_APIAccountsBalance) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *AccountsBalanceResponse_APIAccountsBalance) GetVote() int64 {
	if x != nil {
		return x.Vote
	}
	return 0
}

func (x *AccountsBalanceResponse_APIAccountsBalance) GetNetwork() int64 {
	if x != nil {
		return x.Network
	}
	return 0
}

func (x *AccountsBalanceResponse_APIAccountsBalance) GetStorage() int64 {
	if x != nil {
		return x.Storage
	}
	return 0
}

func (x *AccountsBalanceResponse_APIAccountsBalance) GetOracle() int64 {
	if x != nil {
		return x.Oracle
	}
	return 0
}

func (x *AccountsBalanceResponse_APIAccountsBalance) GetPending() int64 {
	if x != nil {
		return x.Pending
	}
	return 0
}

type AccountsBalanceResponseBalances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balances map[string]*AccountsBalanceResponse_APIAccountsBalance `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AccountsBalanceResponseBalances) Reset() {
	*x = AccountsBalanceResponseBalances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountsBalanceResponseBalances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountsBalanceResponseBalances) ProtoMessage() {}

func (x *AccountsBalanceResponseBalances) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountsBalanceResponseBalances.ProtoReflect.Descriptor instead.
func (*AccountsBalanceResponseBalances) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{4, 1}
}

func (x *AccountsBalanceResponseBalances) GetBalances() map[string]*AccountsBalanceResponse_APIAccountsBalance {
	if x != nil {
		return x.Balances
	}
	return nil
}

type AccountsFrontiersResponseFrontier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Frontier map[string]string `protobuf:"bytes,1,rep,name=frontier,proto3" json:"frontier,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AccountsFrontiersResponseFrontier) Reset() {
	*x = AccountsFrontiersResponseFrontier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountsFrontiersResponseFrontier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountsFrontiersResponseFrontier) ProtoMessage() {}

func (x *AccountsFrontiersResponseFrontier) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountsFrontiersResponseFrontier.ProtoReflect.Descriptor instead.
func (*AccountsFrontiersResponseFrontier) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{5, 0}
}

func (x *AccountsFrontiersResponseFrontier) GetFrontier() map[string]string {
	if x != nil {
		return x.Frontier
	}
	return nil
}

type APIAccountBalances_APIAccountBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	Balance int64  `protobuf:"varint,2,opt,name=Balance,proto3" json:"Balance,omitempty"`
}

func (x *APIAccountBalances_APIAccountBalance) Reset() {
	*x = APIAccountBalances_APIAccountBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ledger_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIAccountBalances_APIAccountBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIAccountBalances_APIAccountBalance) ProtoMessage() {}

func (x *APIAccountBalances_APIAccountBalance) ProtoReflect() protoreflect.Message {
	mi := &file_ledger_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIAccountBalances_APIAccountBalance.ProtoReflect.Descriptor instead.
func (*APIAccountBalances_APIAccountBalance) Descriptor() ([]byte, []int) {
	return file_ledger_proto_rawDescGZIP(), []int{17, 0}
}

func (x *APIAccountBalances_APIAccountBalance) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *APIAccountBalances_APIAccountBalance) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

var File_ledger_proto protoreflect.FileDescriptor

var file_ledger_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x28, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x19, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x70,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x5e, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x09,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x54, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe4, 0x04, 0x0a, 0x17, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0xa8, 0x01, 0x0a, 0x12, 0x41, 0x50, 0x49, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x56, 0x6f, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x1a, 0xcd, 0x01, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x51,
	0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x1a, 0x6e, 0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x41, 0x50, 0x49, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x6c, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x92, 0x03, 0x0a, 0x19, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6e,
	0x74, 0x69, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a,
	0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74,
	0x69, 0x65, 0x72, 0x73, 0x1a, 0x9c, 0x01, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65,
	0x72, 0x12, 0x53, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72, 0x2e, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x66, 0x72,
	0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72, 0x1a, 0x3b, 0x0a, 0x0d, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x69,
	0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x6f, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x46,
	0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xd4, 0x01, 0x0a, 0x17, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x60, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x1a, 0x57, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50, 0x49, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8c, 0x01, 0x0a, 0x13,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x1a, 0x38, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xba, 0x01, 0x0a, 0x10, 0x41,
	0x50, 0x49, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x54,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5f, 0x0a, 0x18, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50, 0x49, 0x53, 0x65, 0x6e,
	0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x52, 0x04, 0x70, 0x61, 0x72, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6b, 0x53, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x72, 0x6b, 0x53, 0x74, 0x72, 0x22, 0x5e, 0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6b, 0x53, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x72, 0x6b, 0x53, 0x74, 0x72, 0x22, 0x4f, 0x0a, 0x21, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6b, 0x53, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x72, 0x6b, 0x53, 0x74, 0x72, 0x22, 0x76, 0x0a, 0x1a, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6b,
	0x53, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6b, 0x53, 0x74,
	0x72, 0x22, 0xd3, 0x01, 0x0a, 0x08, 0x41, 0x50, 0x49, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x27,
	0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x6f, 0x76,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x70, 0x6f, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x6f, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x34, 0x0a, 0x09, 0x41, 0x50, 0x49, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50, 0x49,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x76, 0x0a,
	0x0c, 0x41, 0x50, 0x49, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2e, 0x0a,
	0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x9d, 0x02, 0x0a, 0x0a, 0x41, 0x50, 0x49, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x69, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x69, 0x6e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x50, 0x49, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x06, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x12, 0x41, 0x50, 0x49, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x08,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50, 0x49, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x50, 0x49, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x47, 0x0a, 0x11, 0x41, 0x50, 0x49, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xb3,
	0x01, 0x0a, 0x0a, 0x41, 0x50, 0x49, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x26, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x3c, 0x0a, 0x0b, 0x41, 0x50, 0x49, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50,
	0x49, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x11, 0x41, 0x50, 0x49, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x56, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x56, 0x6f, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x58, 0x0a, 0x12, 0x41, 0x50, 0x49, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x32, 0xa5, 0x26, 0x0a,
	0x09, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x41, 0x50, 0x49, 0x12, 0x56, 0x0a, 0x12, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x22, 0x22,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x6c, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x6e, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54,
	0x6f, 0x70, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x50, 0x49, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x22, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x6e,
	0x12, 0x4d, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50, 0x49, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x5f, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x50, 0x49, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x5e, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1f, 0x12, 0x1d, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x5a, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12,
	0x1b, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x64, 0x0a, 0x0f,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x6a, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72, 0x73, 0x12, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x69,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72, 0x73, 0x12, 0x71,
	0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x55, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x17, 0x12, 0x15, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x1a, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x49, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x0e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x1c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x14, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a,
	0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x22,
	0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x61,
	0x73, 0x68, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x5e, 0x0a,
	0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x60, 0x0a,
	0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x12,
	0x6a, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x12, 0x19, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x50, 0x49, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x12, 0x12, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5b, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0d, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x1a, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50, 0x49, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x23,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x06, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50, 0x49, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x16,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x42, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x53, 0x0a, 0x0a, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x50, 0x49, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x50, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x50, 0x0a, 0x08, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50,
	0x49, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x12, 0x12, 0x10, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x5d, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x50, 0x49, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x73, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x2f, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x73, 0x12, 0x4b, 0x0a, 0x06, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12,
	0x0e, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12,
	0x6a, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x12, 0x19, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x0d, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0b, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x1a, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0f, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x10, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x61, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x25, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x58, 0x0a, 0x0e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x1e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x67, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x50, 0x0a, 0x0a,
	0x47, 0x61, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2f, 0x67, 0x61, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4d,
	0x0a, 0x0a, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x61, 0x73,
	0x68, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x49, 0x0a,
	0x08, 0x47, 0x61, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x22, 0x18,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f,
	0x67, 0x61, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x65, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x4d, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x4d, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x5d, 0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x4d, 0x69, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x4d, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x57,
	0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x12, 0x14, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x59, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68,
	0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x51, 0x0a, 0x0c, 0x47, 0x61, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12,
	0x14, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x67, 0x61, 0x73, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x5d, 0x0a, 0x0f, 0x47, 0x61, 0x73, 0x4d, 0x69, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2f, 0x67, 0x61, 0x73, 0x4d, 0x69, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4f, 0x0a, 0x08, 0x47, 0x61, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x18, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x67, 0x61, 0x73,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x53, 0x0a, 0x0e, 0x49, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x0e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x12, 0x16, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x69, 0x73, 0x47, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x53, 0x0a, 0x0e, 0x49, 0x73,
	0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x11, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a,
	0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x22,
	0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2f, 0x69, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x5b, 0x0a, 0x10, 0x41, 0x6c, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x12, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1a, 0x12, 0x18, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x6c, 0x6c, 0x47,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x6e, 0x0a, 0x11,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19,
	0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x77, 0x0a, 0x14,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x27, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x89, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x3a, 0x01,
	0x2a, 0x12, 0x74, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22,
	0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x45, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x48, 0x61,
	0x73, 0x68, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x52,
	0x0a, 0x08, 0x4e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50, 0x49, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2f, 0x6e, 0x65, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a,
	0x30, 0x01, 0x12, 0x58, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50,
	0x49, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17,
	0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x6e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x30, 0x01, 0x12, 0x56, 0x0a, 0x0d,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50, 0x49, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x3a,
	0x01, 0x2a, 0x30, 0x01, 0x12, 0x50, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x50, 0x49, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x6e, 0x65, 0x77, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x3a, 0x01, 0x2a, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x3a, 0x01, 0x2a, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ledger_proto_rawDescOnce sync.Once
	file_ledger_proto_rawDescData = file_ledger_proto_rawDesc
)

func file_ledger_proto_rawDescGZIP() []byte {
	file_ledger_proto_rawDescOnce.Do(func() {
		file_ledger_proto_rawDescData = protoimpl.X.CompressGZIP(file_ledger_proto_rawDescData)
	})
	return file_ledger_proto_rawDescData
}

var file_ledger_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_ledger_proto_goTypes = []interface{}{
	(*TestResponse)(nil),                               // 0: proto.TestResponse
	(*AccountHistoryTopnRequest)(nil),                  // 1: proto.AccountHistoryTopnRequest
	(*AccountsPendingRequest)(nil),                     // 2: proto.AccountsPendingRequest
	(*ChainRequest)(nil),                               // 3: proto.ChainRequest
	(*AccountsBalanceResponse)(nil),                    // 4: proto.AccountsBalanceResponse
	(*AccountsFrontiersResponse)(nil),                  // 5: proto.AccountsFrontiersResponse
	(*AccountsPendingResponse)(nil),                    // 6: proto.AccountsPendingResponse
	(*BlocksCountResponse)(nil),                        // 7: proto.BlocksCountResponse
	(*APISendBlockPara)(nil),                           // 8: proto.APISendBlockPara
	(*GenerateSendBlockRequest)(nil),                   // 9: proto.GenerateSendBlockRequest
	(*GenerateReceiveBlockRequest)(nil),                // 10: proto.GenerateReceiveBlockRequest
	(*GenerateReceiveBlockByHashRequest)(nil),          // 11: proto.GenerateReceiveBlockByHashRequest
	(*GenerateChangeBlockRequest)(nil),                 // 12: proto.GenerateChangeBlockRequest
	(*APIBlock)(nil),                                   // 13: proto.APIBlock
	(*APIBlocks)(nil),                                  // 14: proto.APIBlocks
	(*APITokenMeta)(nil),                               // 15: proto.APITokenMeta
	(*APIAccount)(nil),                                 // 16: proto.APIAccount
	(*APIAccountBalances)(nil),                         // 17: proto.APIAccountBalances
	(*APIPending)(nil),                                 // 18: proto.APIPending
	(*APIPendings)(nil),                                // 19: proto.APIPendings
	(*APIRepresentative)(nil),                          // 20: proto.APIRepresentative
	(*APIRepresentatives)(nil),                         // 21: proto.APIRepresentatives
	(*AccountsBalanceResponse_APIAccountsBalance)(nil), // 22: proto.AccountsBalanceResponse.APIAccountsBalance
	(*AccountsBalanceResponseBalances)(nil),            // 23: proto.AccountsBalanceResponse.balances
	nil,                                                // 24: proto.AccountsBalanceResponse.AccountsBalancesEntry
	nil,                                                // 25: proto.AccountsBalanceResponse.balances.BalancesEntry
	(*AccountsFrontiersResponseFrontier)(nil),          // 26: proto.AccountsFrontiersResponse.frontier
	nil, // 27: proto.AccountsFrontiersResponse.AccountsFrontiersEntry
	nil, // 28: proto.AccountsFrontiersResponse.frontier.FrontierEntry
	nil, // 29: proto.AccountsPendingResponse.AccountsPendingsEntry
	nil, // 30: proto.BlocksCountResponse.CountEntry
	(*APIAccountBalances_APIAccountBalance)(nil), // 31: proto.APIAccountBalances.APIAccountBalance
	(*Addresses)(nil),   // 32: types.Addresses
	(*StateBlock)(nil),  // 33: types.StateBlock
	(*TokenMeta)(nil),   // 34: types.TokenMeta
	(*PendingKey)(nil),  // 35: types.PendingKey
	(*PendingInfo)(nil), // 36: types.PendingInfo
	(*Address)(nil),     // 37: types.Address
	(*empty.Empty)(nil), // 38: google.protobuf.Empty
	(*Offset)(nil),      // 39: proto.Offset
	(*Hash)(nil),        // 40: types.Hash
	(*Hashes)(nil),      // 41: types.Hashes
	(*Boolean)(nil),     // 42: proto.Boolean
	(*String)(nil),      // 43: proto.String
	(*Int64)(nil),       // 44: proto.Int64
	(*Balance)(nil),     // 45: types.Balance
	(*UInt64)(nil),      // 46: proto.UInt64
	(*TokenInfos)(nil),  // 47: types.TokenInfos
	(*TokenInfo)(nil),   // 48: types.TokenInfo
	(*StateBlocks)(nil), // 49: types.StateBlocks
}
var file_ledger_proto_depIdxs = []int32{
	32, // 0: proto.AccountsPendingRequest.addresses:type_name -> types.Addresses
	32, // 1: proto.ChainRequest.addresses:type_name -> types.Addresses
	24, // 2: proto.AccountsBalanceResponse.accountsBalances:type_name -> proto.AccountsBalanceResponse.AccountsBalancesEntry
	27, // 3: proto.AccountsFrontiersResponse.accountsFrontiers:type_name -> proto.AccountsFrontiersResponse.AccountsFrontiersEntry
	29, // 4: proto.AccountsPendingResponse.accountsPendings:type_name -> proto.AccountsPendingResponse.AccountsPendingsEntry
	30, // 5: proto.BlocksCountResponse.count:type_name -> proto.BlocksCountResponse.CountEntry
	8,  // 6: proto.GenerateSendBlockRequest.para:type_name -> proto.APISendBlockPara
	33, // 7: proto.GenerateReceiveBlockRequest.block:type_name -> types.StateBlock
	33, // 8: proto.APIBlock.block:type_name -> types.StateBlock
	13, // 9: proto.APIBlocks.blocks:type_name -> proto.APIBlock
	34, // 10: proto.APITokenMeta.tokenMeta:type_name -> types.TokenMeta
	15, // 11: proto.APIAccount.tokens:type_name -> proto.APITokenMeta
	31, // 12: proto.APIAccountBalances.balances:type_name -> proto.APIAccountBalances.APIAccountBalance
	35, // 13: proto.APIPending.key:type_name -> types.PendingKey
	36, // 14: proto.APIPending.info:type_name -> types.PendingInfo
	18, // 15: proto.APIPendings.pendings:type_name -> proto.APIPending
	20, // 16: proto.APIRepresentatives.representatives:type_name -> proto.APIRepresentative
	25, // 17: proto.AccountsBalanceResponse.balances.balances:type_name -> proto.AccountsBalanceResponse.balances.BalancesEntry
	23, // 18: proto.AccountsBalanceResponse.AccountsBalancesEntry.value:type_name -> proto.AccountsBalanceResponse.balances
	22, // 19: proto.AccountsBalanceResponse.balances.BalancesEntry.value:type_name -> proto.AccountsBalanceResponse.APIAccountsBalance
	28, // 20: proto.AccountsFrontiersResponse.frontier.frontier:type_name -> proto.AccountsFrontiersResponse.frontier.FrontierEntry
	26, // 21: proto.AccountsFrontiersResponse.AccountsFrontiersEntry.value:type_name -> proto.AccountsFrontiersResponse.frontier
	19, // 22: proto.AccountsPendingResponse.AccountsPendingsEntry.value:type_name -> proto.APIPendings
	37, // 23: proto.LedgerAPI.AccountBlocksCount:input_type -> types.Address
	1,  // 24: proto.LedgerAPI.AccountHistoryTopn:input_type -> proto.AccountHistoryTopnRequest
	37, // 25: proto.LedgerAPI.AccountInfo:input_type -> types.Address
	37, // 26: proto.LedgerAPI.ConfirmedAccountInfo:input_type -> types.Address
	37, // 27: proto.LedgerAPI.AccountRepresentative:input_type -> types.Address
	37, // 28: proto.LedgerAPI.AccountVotingWeight:input_type -> types.Address
	32, // 29: proto.LedgerAPI.AccountsBalance:input_type -> types.Addresses
	32, // 30: proto.LedgerAPI.AccountsFrontiers:input_type -> types.Addresses
	2,  // 31: proto.LedgerAPI.AccountsPending:input_type -> proto.AccountsPendingRequest
	38, // 32: proto.LedgerAPI.AccountsCount:input_type -> google.protobuf.Empty
	39, // 33: proto.LedgerAPI.Accounts:input_type -> proto.Offset
	40, // 34: proto.LedgerAPI.BlockAccount:input_type -> types.Hash
	40, // 35: proto.LedgerAPI.BlockConfirmedStatus:input_type -> types.Hash
	33, // 36: proto.LedgerAPI.BlockHash:input_type -> types.StateBlock
	38, // 37: proto.LedgerAPI.BlocksCount:input_type -> google.protobuf.Empty
	38, // 38: proto.LedgerAPI.BlocksCount2:input_type -> google.protobuf.Empty
	38, // 39: proto.LedgerAPI.BlocksCountByType:input_type -> google.protobuf.Empty
	41, // 40: proto.LedgerAPI.BlocksInfo:input_type -> types.Hashes
	41, // 41: proto.LedgerAPI.ConfirmedBlocksInfo:input_type -> types.Hashes
	39, // 42: proto.LedgerAPI.Blocks:input_type -> proto.Offset
	3,  // 43: proto.LedgerAPI.Chain:input_type -> proto.ChainRequest
	37, // 44: proto.LedgerAPI.Delegators:input_type -> types.Address
	37, // 45: proto.LedgerAPI.DelegatorsCount:input_type -> types.Address
	38, // 46: proto.LedgerAPI.Pendings:input_type -> google.protobuf.Empty
	42, // 47: proto.LedgerAPI.Representatives:input_type -> proto.Boolean
	38, // 48: proto.LedgerAPI.Tokens:input_type -> google.protobuf.Empty
	38, // 49: proto.LedgerAPI.TransactionsCount:input_type -> google.protobuf.Empty
	40, // 50: proto.LedgerAPI.TokenInfoById:input_type -> types.Hash
	43, // 51: proto.LedgerAPI.TokenInfoByName:input_type -> proto.String
	37, // 52: proto.LedgerAPI.GetAccountOnlineBlock:input_type -> types.Address
	38, // 53: proto.LedgerAPI.GenesisAddress:input_type -> google.protobuf.Empty
	38, // 54: proto.LedgerAPI.GasAddress:input_type -> google.protobuf.Empty
	38, // 55: proto.LedgerAPI.ChainToken:input_type -> google.protobuf.Empty
	38, // 56: proto.LedgerAPI.GasToken:input_type -> google.protobuf.Empty
	38, // 57: proto.LedgerAPI.GenesisMintageBlock:input_type -> google.protobuf.Empty
	38, // 58: proto.LedgerAPI.GenesisMintageHash:input_type -> google.protobuf.Empty
	38, // 59: proto.LedgerAPI.GenesisBlock:input_type -> google.protobuf.Empty
	38, // 60: proto.LedgerAPI.GenesisBlockHash:input_type -> google.protobuf.Empty
	38, // 61: proto.LedgerAPI.GasBlockHash:input_type -> google.protobuf.Empty
	38, // 62: proto.LedgerAPI.GasMintageBlock:input_type -> google.protobuf.Empty
	38, // 63: proto.LedgerAPI.GasBlock:input_type -> google.protobuf.Empty
	33, // 64: proto.LedgerAPI.IsGenesisBlock:input_type -> types.StateBlock
	33, // 65: proto.LedgerAPI.IsGenesisToken:input_type -> types.StateBlock
	33, // 66: proto.LedgerAPI.AllGenesisBlocks:input_type -> types.StateBlock
	9,  // 67: proto.LedgerAPI.GenerateSendBlock:input_type -> proto.GenerateSendBlockRequest
	10, // 68: proto.LedgerAPI.GenerateReceiveBlock:input_type -> proto.GenerateReceiveBlockRequest
	11, // 69: proto.LedgerAPI.GenerateReceiveBlockByHash:input_type -> proto.GenerateReceiveBlockByHashRequest
	12, // 70: proto.LedgerAPI.GenerateChangeBlock:input_type -> proto.GenerateChangeBlockRequest
	33, // 71: proto.LedgerAPI.Process:input_type -> types.StateBlock
	38, // 72: proto.LedgerAPI.NewBlock:input_type -> google.protobuf.Empty
	37, // 73: proto.LedgerAPI.NewAccountBlock:input_type -> types.Address
	37, // 74: proto.LedgerAPI.BalanceChange:input_type -> types.Address
	37, // 75: proto.LedgerAPI.NewPending:input_type -> types.Address
	38, // 76: proto.LedgerAPI.Test:input_type -> google.protobuf.Empty
	44, // 77: proto.LedgerAPI.AccountBlocksCount:output_type -> proto.Int64
	14, // 78: proto.LedgerAPI.AccountHistoryTopn:output_type -> proto.APIBlocks
	16, // 79: proto.LedgerAPI.AccountInfo:output_type -> proto.APIAccount
	16, // 80: proto.LedgerAPI.ConfirmedAccountInfo:output_type -> proto.APIAccount
	37, // 81: proto.LedgerAPI.AccountRepresentative:output_type -> types.Address
	45, // 82: proto.LedgerAPI.AccountVotingWeight:output_type -> types.Balance
	4,  // 83: proto.LedgerAPI.AccountsBalance:output_type -> proto.AccountsBalanceResponse
	5,  // 84: proto.LedgerAPI.AccountsFrontiers:output_type -> proto.AccountsFrontiersResponse
	6,  // 85: proto.LedgerAPI.AccountsPending:output_type -> proto.AccountsPendingResponse
	46, // 86: proto.LedgerAPI.AccountsCount:output_type -> proto.UInt64
	32, // 87: proto.LedgerAPI.Accounts:output_type -> types.Addresses
	37, // 88: proto.LedgerAPI.BlockAccount:output_type -> types.Address
	42, // 89: proto.LedgerAPI.BlockConfirmedStatus:output_type -> proto.Boolean
	40, // 90: proto.LedgerAPI.BlockHash:output_type -> types.Hash
	7,  // 91: proto.LedgerAPI.BlocksCount:output_type -> proto.BlocksCountResponse
	7,  // 92: proto.LedgerAPI.BlocksCount2:output_type -> proto.BlocksCountResponse
	7,  // 93: proto.LedgerAPI.BlocksCountByType:output_type -> proto.BlocksCountResponse
	14, // 94: proto.LedgerAPI.BlocksInfo:output_type -> proto.APIBlocks
	14, // 95: proto.LedgerAPI.ConfirmedBlocksInfo:output_type -> proto.APIBlocks
	14, // 96: proto.LedgerAPI.Blocks:output_type -> proto.APIBlocks
	41, // 97: proto.LedgerAPI.Chain:output_type -> types.Hashes
	17, // 98: proto.LedgerAPI.Delegators:output_type -> proto.APIAccountBalances
	44, // 99: proto.LedgerAPI.DelegatorsCount:output_type -> proto.Int64
	19, // 100: proto.LedgerAPI.Pendings:output_type -> proto.APIPendings
	21, // 101: proto.LedgerAPI.Representatives:output_type -> proto.APIRepresentatives
	47, // 102: proto.LedgerAPI.Tokens:output_type -> types.TokenInfos
	7,  // 103: proto.LedgerAPI.TransactionsCount:output_type -> proto.BlocksCountResponse
	48, // 104: proto.LedgerAPI.TokenInfoById:output_type -> types.TokenInfo
	48, // 105: proto.LedgerAPI.TokenInfoByName:output_type -> types.TokenInfo
	33, // 106: proto.LedgerAPI.GetAccountOnlineBlock:output_type -> types.StateBlock
	37, // 107: proto.LedgerAPI.GenesisAddress:output_type -> types.Address
	37, // 108: proto.LedgerAPI.GasAddress:output_type -> types.Address
	40, // 109: proto.LedgerAPI.ChainToken:output_type -> types.Hash
	40, // 110: proto.LedgerAPI.GasToken:output_type -> types.Hash
	33, // 111: proto.LedgerAPI.GenesisMintageBlock:output_type -> types.StateBlock
	40, // 112: proto.LedgerAPI.GenesisMintageHash:output_type -> types.Hash
	33, // 113: proto.LedgerAPI.GenesisBlock:output_type -> types.StateBlock
	40, // 114: proto.LedgerAPI.GenesisBlockHash:output_type -> types.Hash
	40, // 115: proto.LedgerAPI.GasBlockHash:output_type -> types.Hash
	33, // 116: proto.LedgerAPI.GasMintageBlock:output_type -> types.StateBlock
	33, // 117: proto.LedgerAPI.GasBlock:output_type -> types.StateBlock
	42, // 118: proto.LedgerAPI.IsGenesisBlock:output_type -> proto.Boolean
	42, // 119: proto.LedgerAPI.IsGenesisToken:output_type -> proto.Boolean
	49, // 120: proto.LedgerAPI.AllGenesisBlocks:output_type -> types.StateBlocks
	49, // 121: proto.LedgerAPI.GenerateSendBlock:output_type -> types.StateBlocks
	49, // 122: proto.LedgerAPI.GenerateReceiveBlock:output_type -> types.StateBlocks
	49, // 123: proto.LedgerAPI.GenerateReceiveBlockByHash:output_type -> types.StateBlocks
	49, // 124: proto.LedgerAPI.GenerateChangeBlock:output_type -> types.StateBlocks
	40, // 125: proto.LedgerAPI.Process:output_type -> types.Hash
	13, // 126: proto.LedgerAPI.NewBlock:output_type -> proto.APIBlock
	13, // 127: proto.LedgerAPI.NewAccountBlock:output_type -> proto.APIBlock
	16, // 128: proto.LedgerAPI.BalanceChange:output_type -> proto.APIAccount
	18, // 129: proto.LedgerAPI.NewPending:output_type -> proto.APIPending
	0,  // 130: proto.LedgerAPI.Test:output_type -> proto.TestResponse
	77, // [77:131] is the sub-list for method output_type
	23, // [23:77] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_ledger_proto_init() }
func file_ledger_proto_init() {
	if File_ledger_proto != nil {
		return
	}
	file_types_basic_proto_init()
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ledger_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountHistoryTopnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountsPendingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountsBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountsFrontiersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountsPendingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlocksCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APISendBlockPara); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateSendBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateReceiveBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateReceiveBlockByHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateChangeBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIBlocks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APITokenMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIAccountBalances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIPending); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIPendings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRepresentative); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIRepresentatives); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountsBalanceResponse_APIAccountsBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountsBalanceResponseBalances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountsFrontiersResponseFrontier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ledger_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIAccountBalances_APIAccountBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ledger_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ledger_proto_goTypes,
		DependencyIndexes: file_ledger_proto_depIdxs,
		MessageInfos:      file_ledger_proto_msgTypes,
	}.Build()
	File_ledger_proto = out.File
	file_ledger_proto_rawDesc = nil
	file_ledger_proto_goTypes = nil
	file_ledger_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LedgerAPIClient is the client API for LedgerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LedgerAPIClient interface {
	AccountBlocksCount(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Int64, error)
	AccountHistoryTopn(ctx context.Context, in *AccountHistoryTopnRequest, opts ...grpc.CallOption) (*APIBlocks, error)
	AccountInfo(ctx context.Context, in *Address, opts ...grpc.CallOption) (*APIAccount, error)
	ConfirmedAccountInfo(ctx context.Context, in *Address, opts ...grpc.CallOption) (*APIAccount, error)
	AccountRepresentative(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error)
	AccountVotingWeight(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Balance, error)
	AccountsBalance(ctx context.Context, in *Addresses, opts ...grpc.CallOption) (*AccountsBalanceResponse, error)
	AccountsFrontiers(ctx context.Context, in *Addresses, opts ...grpc.CallOption) (*AccountsFrontiersResponse, error)
	AccountsPending(ctx context.Context, in *AccountsPendingRequest, opts ...grpc.CallOption) (*AccountsPendingResponse, error)
	AccountsCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UInt64, error)
	Accounts(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*Addresses, error)
	BlockAccount(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Address, error)
	BlockConfirmedStatus(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Boolean, error)
	BlockHash(ctx context.Context, in *StateBlock, opts ...grpc.CallOption) (*Hash, error)
	BlocksCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BlocksCountResponse, error)
	BlocksCount2(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BlocksCountResponse, error)
	BlocksCountByType(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BlocksCountResponse, error)
	BlocksInfo(ctx context.Context, in *Hashes, opts ...grpc.CallOption) (*APIBlocks, error)
	ConfirmedBlocksInfo(ctx context.Context, in *Hashes, opts ...grpc.CallOption) (*APIBlocks, error)
	Blocks(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*APIBlocks, error)
	Chain(ctx context.Context, in *ChainRequest, opts ...grpc.CallOption) (*Hashes, error)
	Delegators(ctx context.Context, in *Address, opts ...grpc.CallOption) (*APIAccountBalances, error)
	DelegatorsCount(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Int64, error)
	Pendings(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*APIPendings, error)
	Representatives(ctx context.Context, in *Boolean, opts ...grpc.CallOption) (*APIRepresentatives, error)
	Tokens(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TokenInfos, error)
	TransactionsCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BlocksCountResponse, error)
	TokenInfoById(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*TokenInfo, error)
	TokenInfoByName(ctx context.Context, in *String, opts ...grpc.CallOption) (*TokenInfo, error)
	GetAccountOnlineBlock(ctx context.Context, in *Address, opts ...grpc.CallOption) (*StateBlock, error)
	GenesisAddress(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Address, error)
	GasAddress(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Address, error)
	ChainToken(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Hash, error)
	GasToken(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Hash, error)
	GenesisMintageBlock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StateBlock, error)
	GenesisMintageHash(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Hash, error)
	GenesisBlock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StateBlock, error)
	GenesisBlockHash(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Hash, error)
	GasBlockHash(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Hash, error)
	GasMintageBlock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StateBlock, error)
	GasBlock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StateBlock, error)
	IsGenesisBlock(ctx context.Context, in *StateBlock, opts ...grpc.CallOption) (*Boolean, error)
	IsGenesisToken(ctx context.Context, in *StateBlock, opts ...grpc.CallOption) (*Boolean, error)
	AllGenesisBlocks(ctx context.Context, in *StateBlock, opts ...grpc.CallOption) (*StateBlocks, error)
	GenerateSendBlock(ctx context.Context, in *GenerateSendBlockRequest, opts ...grpc.CallOption) (*StateBlocks, error)
	GenerateReceiveBlock(ctx context.Context, in *GenerateReceiveBlockRequest, opts ...grpc.CallOption) (*StateBlocks, error)
	GenerateReceiveBlockByHash(ctx context.Context, in *GenerateReceiveBlockByHashRequest, opts ...grpc.CallOption) (*StateBlocks, error)
	GenerateChangeBlock(ctx context.Context, in *GenerateChangeBlockRequest, opts ...grpc.CallOption) (*StateBlocks, error)
	Process(ctx context.Context, in *StateBlock, opts ...grpc.CallOption) (*Hash, error)
	NewBlock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (LedgerAPI_NewBlockClient, error)
	NewAccountBlock(ctx context.Context, in *Address, opts ...grpc.CallOption) (LedgerAPI_NewAccountBlockClient, error)
	BalanceChange(ctx context.Context, in *Address, opts ...grpc.CallOption) (LedgerAPI_BalanceChangeClient, error)
	NewPending(ctx context.Context, in *Address, opts ...grpc.CallOption) (LedgerAPI_NewPendingClient, error)
	Test(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TestResponse, error)
}

type ledgerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewLedgerAPIClient(cc grpc.ClientConnInterface) LedgerAPIClient {
	return &ledgerAPIClient{cc}
}

func (c *ledgerAPIClient) AccountBlocksCount(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/AccountBlocksCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) AccountHistoryTopn(ctx context.Context, in *AccountHistoryTopnRequest, opts ...grpc.CallOption) (*APIBlocks, error) {
	out := new(APIBlocks)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/AccountHistoryTopn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) AccountInfo(ctx context.Context, in *Address, opts ...grpc.CallOption) (*APIAccount, error) {
	out := new(APIAccount)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/AccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) ConfirmedAccountInfo(ctx context.Context, in *Address, opts ...grpc.CallOption) (*APIAccount, error) {
	out := new(APIAccount)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/ConfirmedAccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) AccountRepresentative(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/AccountRepresentative", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) AccountVotingWeight(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Balance, error) {
	out := new(Balance)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/AccountVotingWeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) AccountsBalance(ctx context.Context, in *Addresses, opts ...grpc.CallOption) (*AccountsBalanceResponse, error) {
	out := new(AccountsBalanceResponse)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/AccountsBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) AccountsFrontiers(ctx context.Context, in *Addresses, opts ...grpc.CallOption) (*AccountsFrontiersResponse, error) {
	out := new(AccountsFrontiersResponse)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/AccountsFrontiers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) AccountsPending(ctx context.Context, in *AccountsPendingRequest, opts ...grpc.CallOption) (*AccountsPendingResponse, error) {
	out := new(AccountsPendingResponse)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/AccountsPending", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) AccountsCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UInt64, error) {
	out := new(UInt64)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/AccountsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) Accounts(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*Addresses, error) {
	out := new(Addresses)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/Accounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) BlockAccount(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/BlockAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) BlockConfirmedStatus(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/BlockConfirmedStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) BlockHash(ctx context.Context, in *StateBlock, opts ...grpc.CallOption) (*Hash, error) {
	out := new(Hash)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/BlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) BlocksCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BlocksCountResponse, error) {
	out := new(BlocksCountResponse)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/BlocksCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) BlocksCount2(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BlocksCountResponse, error) {
	out := new(BlocksCountResponse)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/BlocksCount2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) BlocksCountByType(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BlocksCountResponse, error) {
	out := new(BlocksCountResponse)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/BlocksCountByType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) BlocksInfo(ctx context.Context, in *Hashes, opts ...grpc.CallOption) (*APIBlocks, error) {
	out := new(APIBlocks)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/BlocksInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) ConfirmedBlocksInfo(ctx context.Context, in *Hashes, opts ...grpc.CallOption) (*APIBlocks, error) {
	out := new(APIBlocks)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/ConfirmedBlocksInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) Blocks(ctx context.Context, in *Offset, opts ...grpc.CallOption) (*APIBlocks, error) {
	out := new(APIBlocks)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/Blocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) Chain(ctx context.Context, in *ChainRequest, opts ...grpc.CallOption) (*Hashes, error) {
	out := new(Hashes)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/Chain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) Delegators(ctx context.Context, in *Address, opts ...grpc.CallOption) (*APIAccountBalances, error) {
	out := new(APIAccountBalances)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/Delegators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) DelegatorsCount(ctx context.Context, in *Address, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/DelegatorsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) Pendings(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*APIPendings, error) {
	out := new(APIPendings)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/Pendings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) Representatives(ctx context.Context, in *Boolean, opts ...grpc.CallOption) (*APIRepresentatives, error) {
	out := new(APIRepresentatives)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/Representatives", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) Tokens(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TokenInfos, error) {
	out := new(TokenInfos)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/Tokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) TransactionsCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BlocksCountResponse, error) {
	out := new(BlocksCountResponse)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/TransactionsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) TokenInfoById(ctx context.Context, in *Hash, opts ...grpc.CallOption) (*TokenInfo, error) {
	out := new(TokenInfo)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/TokenInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) TokenInfoByName(ctx context.Context, in *String, opts ...grpc.CallOption) (*TokenInfo, error) {
	out := new(TokenInfo)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/TokenInfoByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GetAccountOnlineBlock(ctx context.Context, in *Address, opts ...grpc.CallOption) (*StateBlock, error) {
	out := new(StateBlock)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/GetAccountOnlineBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GenesisAddress(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/GenesisAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GasAddress(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/GasAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) ChainToken(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Hash, error) {
	out := new(Hash)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/ChainToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GasToken(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Hash, error) {
	out := new(Hash)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/GasToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GenesisMintageBlock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StateBlock, error) {
	out := new(StateBlock)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/GenesisMintageBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GenesisMintageHash(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Hash, error) {
	out := new(Hash)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/GenesisMintageHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GenesisBlock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StateBlock, error) {
	out := new(StateBlock)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/GenesisBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GenesisBlockHash(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Hash, error) {
	out := new(Hash)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/GenesisBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GasBlockHash(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Hash, error) {
	out := new(Hash)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/GasBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GasMintageBlock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StateBlock, error) {
	out := new(StateBlock)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/GasMintageBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GasBlock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StateBlock, error) {
	out := new(StateBlock)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/GasBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) IsGenesisBlock(ctx context.Context, in *StateBlock, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/IsGenesisBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) IsGenesisToken(ctx context.Context, in *StateBlock, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/IsGenesisToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) AllGenesisBlocks(ctx context.Context, in *StateBlock, opts ...grpc.CallOption) (*StateBlocks, error) {
	out := new(StateBlocks)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/AllGenesisBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GenerateSendBlock(ctx context.Context, in *GenerateSendBlockRequest, opts ...grpc.CallOption) (*StateBlocks, error) {
	out := new(StateBlocks)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/GenerateSendBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GenerateReceiveBlock(ctx context.Context, in *GenerateReceiveBlockRequest, opts ...grpc.CallOption) (*StateBlocks, error) {
	out := new(StateBlocks)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/GenerateReceiveBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GenerateReceiveBlockByHash(ctx context.Context, in *GenerateReceiveBlockByHashRequest, opts ...grpc.CallOption) (*StateBlocks, error) {
	out := new(StateBlocks)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/GenerateReceiveBlockByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) GenerateChangeBlock(ctx context.Context, in *GenerateChangeBlockRequest, opts ...grpc.CallOption) (*StateBlocks, error) {
	out := new(StateBlocks)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/GenerateChangeBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) Process(ctx context.Context, in *StateBlock, opts ...grpc.CallOption) (*Hash, error) {
	out := new(Hash)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/Process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerAPIClient) NewBlock(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (LedgerAPI_NewBlockClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LedgerAPI_serviceDesc.Streams[0], "/proto.LedgerAPI/NewBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &ledgerAPINewBlockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LedgerAPI_NewBlockClient interface {
	Recv() (*APIBlock, error)
	grpc.ClientStream
}

type ledgerAPINewBlockClient struct {
	grpc.ClientStream
}

func (x *ledgerAPINewBlockClient) Recv() (*APIBlock, error) {
	m := new(APIBlock)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ledgerAPIClient) NewAccountBlock(ctx context.Context, in *Address, opts ...grpc.CallOption) (LedgerAPI_NewAccountBlockClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LedgerAPI_serviceDesc.Streams[1], "/proto.LedgerAPI/NewAccountBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &ledgerAPINewAccountBlockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LedgerAPI_NewAccountBlockClient interface {
	Recv() (*APIBlock, error)
	grpc.ClientStream
}

type ledgerAPINewAccountBlockClient struct {
	grpc.ClientStream
}

func (x *ledgerAPINewAccountBlockClient) Recv() (*APIBlock, error) {
	m := new(APIBlock)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ledgerAPIClient) BalanceChange(ctx context.Context, in *Address, opts ...grpc.CallOption) (LedgerAPI_BalanceChangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LedgerAPI_serviceDesc.Streams[2], "/proto.LedgerAPI/BalanceChange", opts...)
	if err != nil {
		return nil, err
	}
	x := &ledgerAPIBalanceChangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LedgerAPI_BalanceChangeClient interface {
	Recv() (*APIAccount, error)
	grpc.ClientStream
}

type ledgerAPIBalanceChangeClient struct {
	grpc.ClientStream
}

func (x *ledgerAPIBalanceChangeClient) Recv() (*APIAccount, error) {
	m := new(APIAccount)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ledgerAPIClient) NewPending(ctx context.Context, in *Address, opts ...grpc.CallOption) (LedgerAPI_NewPendingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LedgerAPI_serviceDesc.Streams[3], "/proto.LedgerAPI/NewPending", opts...)
	if err != nil {
		return nil, err
	}
	x := &ledgerAPINewPendingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LedgerAPI_NewPendingClient interface {
	Recv() (*APIPending, error)
	grpc.ClientStream
}

type ledgerAPINewPendingClient struct {
	grpc.ClientStream
}

func (x *ledgerAPINewPendingClient) Recv() (*APIPending, error) {
	m := new(APIPending)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ledgerAPIClient) Test(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/proto.LedgerAPI/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LedgerAPIServer is the server API for LedgerAPI service.
type LedgerAPIServer interface {
	AccountBlocksCount(context.Context, *Address) (*Int64, error)
	AccountHistoryTopn(context.Context, *AccountHistoryTopnRequest) (*APIBlocks, error)
	AccountInfo(context.Context, *Address) (*APIAccount, error)
	ConfirmedAccountInfo(context.Context, *Address) (*APIAccount, error)
	AccountRepresentative(context.Context, *Address) (*Address, error)
	AccountVotingWeight(context.Context, *Address) (*Balance, error)
	AccountsBalance(context.Context, *Addresses) (*AccountsBalanceResponse, error)
	AccountsFrontiers(context.Context, *Addresses) (*AccountsFrontiersResponse, error)
	AccountsPending(context.Context, *AccountsPendingRequest) (*AccountsPendingResponse, error)
	AccountsCount(context.Context, *empty.Empty) (*UInt64, error)
	Accounts(context.Context, *Offset) (*Addresses, error)
	BlockAccount(context.Context, *Hash) (*Address, error)
	BlockConfirmedStatus(context.Context, *Hash) (*Boolean, error)
	BlockHash(context.Context, *StateBlock) (*Hash, error)
	BlocksCount(context.Context, *empty.Empty) (*BlocksCountResponse, error)
	BlocksCount2(context.Context, *empty.Empty) (*BlocksCountResponse, error)
	BlocksCountByType(context.Context, *empty.Empty) (*BlocksCountResponse, error)
	BlocksInfo(context.Context, *Hashes) (*APIBlocks, error)
	ConfirmedBlocksInfo(context.Context, *Hashes) (*APIBlocks, error)
	Blocks(context.Context, *Offset) (*APIBlocks, error)
	Chain(context.Context, *ChainRequest) (*Hashes, error)
	Delegators(context.Context, *Address) (*APIAccountBalances, error)
	DelegatorsCount(context.Context, *Address) (*Int64, error)
	Pendings(context.Context, *empty.Empty) (*APIPendings, error)
	Representatives(context.Context, *Boolean) (*APIRepresentatives, error)
	Tokens(context.Context, *empty.Empty) (*TokenInfos, error)
	TransactionsCount(context.Context, *empty.Empty) (*BlocksCountResponse, error)
	TokenInfoById(context.Context, *Hash) (*TokenInfo, error)
	TokenInfoByName(context.Context, *String) (*TokenInfo, error)
	GetAccountOnlineBlock(context.Context, *Address) (*StateBlock, error)
	GenesisAddress(context.Context, *empty.Empty) (*Address, error)
	GasAddress(context.Context, *empty.Empty) (*Address, error)
	ChainToken(context.Context, *empty.Empty) (*Hash, error)
	GasToken(context.Context, *empty.Empty) (*Hash, error)
	GenesisMintageBlock(context.Context, *empty.Empty) (*StateBlock, error)
	GenesisMintageHash(context.Context, *empty.Empty) (*Hash, error)
	GenesisBlock(context.Context, *empty.Empty) (*StateBlock, error)
	GenesisBlockHash(context.Context, *empty.Empty) (*Hash, error)
	GasBlockHash(context.Context, *empty.Empty) (*Hash, error)
	GasMintageBlock(context.Context, *empty.Empty) (*StateBlock, error)
	GasBlock(context.Context, *empty.Empty) (*StateBlock, error)
	IsGenesisBlock(context.Context, *StateBlock) (*Boolean, error)
	IsGenesisToken(context.Context, *StateBlock) (*Boolean, error)
	AllGenesisBlocks(context.Context, *StateBlock) (*StateBlocks, error)
	GenerateSendBlock(context.Context, *GenerateSendBlockRequest) (*StateBlocks, error)
	GenerateReceiveBlock(context.Context, *GenerateReceiveBlockRequest) (*StateBlocks, error)
	GenerateReceiveBlockByHash(context.Context, *GenerateReceiveBlockByHashRequest) (*StateBlocks, error)
	GenerateChangeBlock(context.Context, *GenerateChangeBlockRequest) (*StateBlocks, error)
	Process(context.Context, *StateBlock) (*Hash, error)
	NewBlock(*empty.Empty, LedgerAPI_NewBlockServer) error
	NewAccountBlock(*Address, LedgerAPI_NewAccountBlockServer) error
	BalanceChange(*Address, LedgerAPI_BalanceChangeServer) error
	NewPending(*Address, LedgerAPI_NewPendingServer) error
	Test(context.Context, *empty.Empty) (*TestResponse, error)
}

// UnimplementedLedgerAPIServer can be embedded to have forward compatible implementations.
type UnimplementedLedgerAPIServer struct {
}

func (*UnimplementedLedgerAPIServer) AccountBlocksCount(context.Context, *Address) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountBlocksCount not implemented")
}
func (*UnimplementedLedgerAPIServer) AccountHistoryTopn(context.Context, *AccountHistoryTopnRequest) (*APIBlocks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountHistoryTopn not implemented")
}
func (*UnimplementedLedgerAPIServer) AccountInfo(context.Context, *Address) (*APIAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountInfo not implemented")
}
func (*UnimplementedLedgerAPIServer) ConfirmedAccountInfo(context.Context, *Address) (*APIAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmedAccountInfo not implemented")
}
func (*UnimplementedLedgerAPIServer) AccountRepresentative(context.Context, *Address) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountRepresentative not implemented")
}
func (*UnimplementedLedgerAPIServer) AccountVotingWeight(context.Context, *Address) (*Balance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountVotingWeight not implemented")
}
func (*UnimplementedLedgerAPIServer) AccountsBalance(context.Context, *Addresses) (*AccountsBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountsBalance not implemented")
}
func (*UnimplementedLedgerAPIServer) AccountsFrontiers(context.Context, *Addresses) (*AccountsFrontiersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountsFrontiers not implemented")
}
func (*UnimplementedLedgerAPIServer) AccountsPending(context.Context, *AccountsPendingRequest) (*AccountsPendingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountsPending not implemented")
}
func (*UnimplementedLedgerAPIServer) AccountsCount(context.Context, *empty.Empty) (*UInt64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountsCount not implemented")
}
func (*UnimplementedLedgerAPIServer) Accounts(context.Context, *Offset) (*Addresses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accounts not implemented")
}
func (*UnimplementedLedgerAPIServer) BlockAccount(context.Context, *Hash) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockAccount not implemented")
}
func (*UnimplementedLedgerAPIServer) BlockConfirmedStatus(context.Context, *Hash) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockConfirmedStatus not implemented")
}
func (*UnimplementedLedgerAPIServer) BlockHash(context.Context, *StateBlock) (*Hash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockHash not implemented")
}
func (*UnimplementedLedgerAPIServer) BlocksCount(context.Context, *empty.Empty) (*BlocksCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlocksCount not implemented")
}
func (*UnimplementedLedgerAPIServer) BlocksCount2(context.Context, *empty.Empty) (*BlocksCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlocksCount2 not implemented")
}
func (*UnimplementedLedgerAPIServer) BlocksCountByType(context.Context, *empty.Empty) (*BlocksCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlocksCountByType not implemented")
}
func (*UnimplementedLedgerAPIServer) BlocksInfo(context.Context, *Hashes) (*APIBlocks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlocksInfo not implemented")
}
func (*UnimplementedLedgerAPIServer) ConfirmedBlocksInfo(context.Context, *Hashes) (*APIBlocks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmedBlocksInfo not implemented")
}
func (*UnimplementedLedgerAPIServer) Blocks(context.Context, *Offset) (*APIBlocks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Blocks not implemented")
}
func (*UnimplementedLedgerAPIServer) Chain(context.Context, *ChainRequest) (*Hashes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chain not implemented")
}
func (*UnimplementedLedgerAPIServer) Delegators(context.Context, *Address) (*APIAccountBalances, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delegators not implemented")
}
func (*UnimplementedLedgerAPIServer) DelegatorsCount(context.Context, *Address) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorsCount not implemented")
}
func (*UnimplementedLedgerAPIServer) Pendings(context.Context, *empty.Empty) (*APIPendings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pendings not implemented")
}
func (*UnimplementedLedgerAPIServer) Representatives(context.Context, *Boolean) (*APIRepresentatives, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Representatives not implemented")
}
func (*UnimplementedLedgerAPIServer) Tokens(context.Context, *empty.Empty) (*TokenInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tokens not implemented")
}
func (*UnimplementedLedgerAPIServer) TransactionsCount(context.Context, *empty.Empty) (*BlocksCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionsCount not implemented")
}
func (*UnimplementedLedgerAPIServer) TokenInfoById(context.Context, *Hash) (*TokenInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenInfoById not implemented")
}
func (*UnimplementedLedgerAPIServer) TokenInfoByName(context.Context, *String) (*TokenInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenInfoByName not implemented")
}
func (*UnimplementedLedgerAPIServer) GetAccountOnlineBlock(context.Context, *Address) (*StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountOnlineBlock not implemented")
}
func (*UnimplementedLedgerAPIServer) GenesisAddress(context.Context, *empty.Empty) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenesisAddress not implemented")
}
func (*UnimplementedLedgerAPIServer) GasAddress(context.Context, *empty.Empty) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasAddress not implemented")
}
func (*UnimplementedLedgerAPIServer) ChainToken(context.Context, *empty.Empty) (*Hash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainToken not implemented")
}
func (*UnimplementedLedgerAPIServer) GasToken(context.Context, *empty.Empty) (*Hash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasToken not implemented")
}
func (*UnimplementedLedgerAPIServer) GenesisMintageBlock(context.Context, *empty.Empty) (*StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenesisMintageBlock not implemented")
}
func (*UnimplementedLedgerAPIServer) GenesisMintageHash(context.Context, *empty.Empty) (*Hash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenesisMintageHash not implemented")
}
func (*UnimplementedLedgerAPIServer) GenesisBlock(context.Context, *empty.Empty) (*StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenesisBlock not implemented")
}
func (*UnimplementedLedgerAPIServer) GenesisBlockHash(context.Context, *empty.Empty) (*Hash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenesisBlockHash not implemented")
}
func (*UnimplementedLedgerAPIServer) GasBlockHash(context.Context, *empty.Empty) (*Hash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasBlockHash not implemented")
}
func (*UnimplementedLedgerAPIServer) GasMintageBlock(context.Context, *empty.Empty) (*StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasMintageBlock not implemented")
}
func (*UnimplementedLedgerAPIServer) GasBlock(context.Context, *empty.Empty) (*StateBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasBlock not implemented")
}
func (*UnimplementedLedgerAPIServer) IsGenesisBlock(context.Context, *StateBlock) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsGenesisBlock not implemented")
}
func (*UnimplementedLedgerAPIServer) IsGenesisToken(context.Context, *StateBlock) (*Boolean, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsGenesisToken not implemented")
}
func (*UnimplementedLedgerAPIServer) AllGenesisBlocks(context.Context, *StateBlock) (*StateBlocks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllGenesisBlocks not implemented")
}
func (*UnimplementedLedgerAPIServer) GenerateSendBlock(context.Context, *GenerateSendBlockRequest) (*StateBlocks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSendBlock not implemented")
}
func (*UnimplementedLedgerAPIServer) GenerateReceiveBlock(context.Context, *GenerateReceiveBlockRequest) (*StateBlocks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateReceiveBlock not implemented")
}
func (*UnimplementedLedgerAPIServer) GenerateReceiveBlockByHash(context.Context, *GenerateReceiveBlockByHashRequest) (*StateBlocks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateReceiveBlockByHash not implemented")
}
func (*UnimplementedLedgerAPIServer) GenerateChangeBlock(context.Context, *GenerateChangeBlockRequest) (*StateBlocks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateChangeBlock not implemented")
}
func (*UnimplementedLedgerAPIServer) Process(context.Context, *StateBlock) (*Hash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (*UnimplementedLedgerAPIServer) NewBlock(*empty.Empty, LedgerAPI_NewBlockServer) error {
	return status.Errorf(codes.Unimplemented, "method NewBlock not implemented")
}
func (*UnimplementedLedgerAPIServer) NewAccountBlock(*Address, LedgerAPI_NewAccountBlockServer) error {
	return status.Errorf(codes.Unimplemented, "method NewAccountBlock not implemented")
}
func (*UnimplementedLedgerAPIServer) BalanceChange(*Address, LedgerAPI_BalanceChangeServer) error {
	return status.Errorf(codes.Unimplemented, "method BalanceChange not implemented")
}
func (*UnimplementedLedgerAPIServer) NewPending(*Address, LedgerAPI_NewPendingServer) error {
	return status.Errorf(codes.Unimplemented, "method NewPending not implemented")
}
func (*UnimplementedLedgerAPIServer) Test(context.Context, *empty.Empty) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}

func RegisterLedgerAPIServer(s *grpc.Server, srv LedgerAPIServer) {
	s.RegisterService(&_LedgerAPI_serviceDesc, srv)
}

func _LedgerAPI_AccountBlocksCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).AccountBlocksCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/AccountBlocksCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).AccountBlocksCount(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_AccountHistoryTopn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountHistoryTopnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).AccountHistoryTopn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/AccountHistoryTopn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).AccountHistoryTopn(ctx, req.(*AccountHistoryTopnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_AccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).AccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/AccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).AccountInfo(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_ConfirmedAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).ConfirmedAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/ConfirmedAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).ConfirmedAccountInfo(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_AccountRepresentative_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).AccountRepresentative(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/AccountRepresentative",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).AccountRepresentative(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_AccountVotingWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).AccountVotingWeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/AccountVotingWeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).AccountVotingWeight(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_AccountsBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Addresses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).AccountsBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/AccountsBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).AccountsBalance(ctx, req.(*Addresses))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_AccountsFrontiers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Addresses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).AccountsFrontiers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/AccountsFrontiers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).AccountsFrontiers(ctx, req.(*Addresses))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_AccountsPending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountsPendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).AccountsPending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/AccountsPending",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).AccountsPending(ctx, req.(*AccountsPendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_AccountsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).AccountsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/AccountsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).AccountsCount(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_Accounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Offset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).Accounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/Accounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).Accounts(ctx, req.(*Offset))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_BlockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).BlockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/BlockAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).BlockAccount(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_BlockConfirmedStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).BlockConfirmedStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/BlockConfirmedStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).BlockConfirmedStatus(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_BlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).BlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/BlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).BlockHash(ctx, req.(*StateBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_BlocksCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).BlocksCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/BlocksCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).BlocksCount(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_BlocksCount2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).BlocksCount2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/BlocksCount2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).BlocksCount2(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_BlocksCountByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).BlocksCountByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/BlocksCountByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).BlocksCountByType(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_BlocksInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).BlocksInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/BlocksInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).BlocksInfo(ctx, req.(*Hashes))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_ConfirmedBlocksInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).ConfirmedBlocksInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/ConfirmedBlocksInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).ConfirmedBlocksInfo(ctx, req.(*Hashes))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_Blocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Offset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).Blocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/Blocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).Blocks(ctx, req.(*Offset))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_Chain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).Chain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/Chain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).Chain(ctx, req.(*ChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_Delegators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).Delegators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/Delegators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).Delegators(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_DelegatorsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).DelegatorsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/DelegatorsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).DelegatorsCount(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_Pendings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).Pendings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/Pendings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).Pendings(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_Representatives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Boolean)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).Representatives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/Representatives",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).Representatives(ctx, req.(*Boolean))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_Tokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).Tokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/Tokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).Tokens(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_TransactionsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).TransactionsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/TransactionsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).TransactionsCount(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_TokenInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).TokenInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/TokenInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).TokenInfoById(ctx, req.(*Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_TokenInfoByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).TokenInfoByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/TokenInfoByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).TokenInfoByName(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GetAccountOnlineBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GetAccountOnlineBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/GetAccountOnlineBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GetAccountOnlineBlock(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GenesisAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GenesisAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/GenesisAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GenesisAddress(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GasAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GasAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/GasAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GasAddress(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_ChainToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).ChainToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/ChainToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).ChainToken(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GasToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GasToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/GasToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GasToken(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GenesisMintageBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GenesisMintageBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/GenesisMintageBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GenesisMintageBlock(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GenesisMintageHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GenesisMintageHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/GenesisMintageHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GenesisMintageHash(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GenesisBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GenesisBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/GenesisBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GenesisBlock(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GenesisBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GenesisBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/GenesisBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GenesisBlockHash(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GasBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GasBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/GasBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GasBlockHash(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GasMintageBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GasMintageBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/GasMintageBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GasMintageBlock(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GasBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GasBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/GasBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GasBlock(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_IsGenesisBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).IsGenesisBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/IsGenesisBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).IsGenesisBlock(ctx, req.(*StateBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_IsGenesisToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).IsGenesisToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/IsGenesisToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).IsGenesisToken(ctx, req.(*StateBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_AllGenesisBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).AllGenesisBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/AllGenesisBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).AllGenesisBlocks(ctx, req.(*StateBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GenerateSendBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateSendBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GenerateSendBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/GenerateSendBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GenerateSendBlock(ctx, req.(*GenerateSendBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GenerateReceiveBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateReceiveBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GenerateReceiveBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/GenerateReceiveBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GenerateReceiveBlock(ctx, req.(*GenerateReceiveBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GenerateReceiveBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateReceiveBlockByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GenerateReceiveBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/GenerateReceiveBlockByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GenerateReceiveBlockByHash(ctx, req.(*GenerateReceiveBlockByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_GenerateChangeBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateChangeBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).GenerateChangeBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/GenerateChangeBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).GenerateChangeBlock(ctx, req.(*GenerateChangeBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).Process(ctx, req.(*StateBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerAPI_NewBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LedgerAPIServer).NewBlock(m, &ledgerAPINewBlockServer{stream})
}

type LedgerAPI_NewBlockServer interface {
	Send(*APIBlock) error
	grpc.ServerStream
}

type ledgerAPINewBlockServer struct {
	grpc.ServerStream
}

func (x *ledgerAPINewBlockServer) Send(m *APIBlock) error {
	return x.ServerStream.SendMsg(m)
}

func _LedgerAPI_NewAccountBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Address)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LedgerAPIServer).NewAccountBlock(m, &ledgerAPINewAccountBlockServer{stream})
}

type LedgerAPI_NewAccountBlockServer interface {
	Send(*APIBlock) error
	grpc.ServerStream
}

type ledgerAPINewAccountBlockServer struct {
	grpc.ServerStream
}

func (x *ledgerAPINewAccountBlockServer) Send(m *APIBlock) error {
	return x.ServerStream.SendMsg(m)
}

func _LedgerAPI_BalanceChange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Address)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LedgerAPIServer).BalanceChange(m, &ledgerAPIBalanceChangeServer{stream})
}

type LedgerAPI_BalanceChangeServer interface {
	Send(*APIAccount) error
	grpc.ServerStream
}

type ledgerAPIBalanceChangeServer struct {
	grpc.ServerStream
}

func (x *ledgerAPIBalanceChangeServer) Send(m *APIAccount) error {
	return x.ServerStream.SendMsg(m)
}

func _LedgerAPI_NewPending_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Address)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LedgerAPIServer).NewPending(m, &ledgerAPINewPendingServer{stream})
}

type LedgerAPI_NewPendingServer interface {
	Send(*APIPending) error
	grpc.ServerStream
}

type ledgerAPINewPendingServer struct {
	grpc.ServerStream
}

func (x *ledgerAPINewPendingServer) Send(m *APIPending) error {
	return x.ServerStream.SendMsg(m)
}

func _LedgerAPI_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerAPIServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LedgerAPI/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerAPIServer).Test(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _LedgerAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LedgerAPI",
	HandlerType: (*LedgerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccountBlocksCount",
			Handler:    _LedgerAPI_AccountBlocksCount_Handler,
		},
		{
			MethodName: "AccountHistoryTopn",
			Handler:    _LedgerAPI_AccountHistoryTopn_Handler,
		},
		{
			MethodName: "AccountInfo",
			Handler:    _LedgerAPI_AccountInfo_Handler,
		},
		{
			MethodName: "ConfirmedAccountInfo",
			Handler:    _LedgerAPI_ConfirmedAccountInfo_Handler,
		},
		{
			MethodName: "AccountRepresentative",
			Handler:    _LedgerAPI_AccountRepresentative_Handler,
		},
		{
			MethodName: "AccountVotingWeight",
			Handler:    _LedgerAPI_AccountVotingWeight_Handler,
		},
		{
			MethodName: "AccountsBalance",
			Handler:    _LedgerAPI_AccountsBalance_Handler,
		},
		{
			MethodName: "AccountsFrontiers",
			Handler:    _LedgerAPI_AccountsFrontiers_Handler,
		},
		{
			MethodName: "AccountsPending",
			Handler:    _LedgerAPI_AccountsPending_Handler,
		},
		{
			MethodName: "AccountsCount",
			Handler:    _LedgerAPI_AccountsCount_Handler,
		},
		{
			MethodName: "Accounts",
			Handler:    _LedgerAPI_Accounts_Handler,
		},
		{
			MethodName: "BlockAccount",
			Handler:    _LedgerAPI_BlockAccount_Handler,
		},
		{
			MethodName: "BlockConfirmedStatus",
			Handler:    _LedgerAPI_BlockConfirmedStatus_Handler,
		},
		{
			MethodName: "BlockHash",
			Handler:    _LedgerAPI_BlockHash_Handler,
		},
		{
			MethodName: "BlocksCount",
			Handler:    _LedgerAPI_BlocksCount_Handler,
		},
		{
			MethodName: "BlocksCount2",
			Handler:    _LedgerAPI_BlocksCount2_Handler,
		},
		{
			MethodName: "BlocksCountByType",
			Handler:    _LedgerAPI_BlocksCountByType_Handler,
		},
		{
			MethodName: "BlocksInfo",
			Handler:    _LedgerAPI_BlocksInfo_Handler,
		},
		{
			MethodName: "ConfirmedBlocksInfo",
			Handler:    _LedgerAPI_ConfirmedBlocksInfo_Handler,
		},
		{
			MethodName: "Blocks",
			Handler:    _LedgerAPI_Blocks_Handler,
		},
		{
			MethodName: "Chain",
			Handler:    _LedgerAPI_Chain_Handler,
		},
		{
			MethodName: "Delegators",
			Handler:    _LedgerAPI_Delegators_Handler,
		},
		{
			MethodName: "DelegatorsCount",
			Handler:    _LedgerAPI_DelegatorsCount_Handler,
		},
		{
			MethodName: "Pendings",
			Handler:    _LedgerAPI_Pendings_Handler,
		},
		{
			MethodName: "Representatives",
			Handler:    _LedgerAPI_Representatives_Handler,
		},
		{
			MethodName: "Tokens",
			Handler:    _LedgerAPI_Tokens_Handler,
		},
		{
			MethodName: "TransactionsCount",
			Handler:    _LedgerAPI_TransactionsCount_Handler,
		},
		{
			MethodName: "TokenInfoById",
			Handler:    _LedgerAPI_TokenInfoById_Handler,
		},
		{
			MethodName: "TokenInfoByName",
			Handler:    _LedgerAPI_TokenInfoByName_Handler,
		},
		{
			MethodName: "GetAccountOnlineBlock",
			Handler:    _LedgerAPI_GetAccountOnlineBlock_Handler,
		},
		{
			MethodName: "GenesisAddress",
			Handler:    _LedgerAPI_GenesisAddress_Handler,
		},
		{
			MethodName: "GasAddress",
			Handler:    _LedgerAPI_GasAddress_Handler,
		},
		{
			MethodName: "ChainToken",
			Handler:    _LedgerAPI_ChainToken_Handler,
		},
		{
			MethodName: "GasToken",
			Handler:    _LedgerAPI_GasToken_Handler,
		},
		{
			MethodName: "GenesisMintageBlock",
			Handler:    _LedgerAPI_GenesisMintageBlock_Handler,
		},
		{
			MethodName: "GenesisMintageHash",
			Handler:    _LedgerAPI_GenesisMintageHash_Handler,
		},
		{
			MethodName: "GenesisBlock",
			Handler:    _LedgerAPI_GenesisBlock_Handler,
		},
		{
			MethodName: "GenesisBlockHash",
			Handler:    _LedgerAPI_GenesisBlockHash_Handler,
		},
		{
			MethodName: "GasBlockHash",
			Handler:    _LedgerAPI_GasBlockHash_Handler,
		},
		{
			MethodName: "GasMintageBlock",
			Handler:    _LedgerAPI_GasMintageBlock_Handler,
		},
		{
			MethodName: "GasBlock",
			Handler:    _LedgerAPI_GasBlock_Handler,
		},
		{
			MethodName: "IsGenesisBlock",
			Handler:    _LedgerAPI_IsGenesisBlock_Handler,
		},
		{
			MethodName: "IsGenesisToken",
			Handler:    _LedgerAPI_IsGenesisToken_Handler,
		},
		{
			MethodName: "AllGenesisBlocks",
			Handler:    _LedgerAPI_AllGenesisBlocks_Handler,
		},
		{
			MethodName: "GenerateSendBlock",
			Handler:    _LedgerAPI_GenerateSendBlock_Handler,
		},
		{
			MethodName: "GenerateReceiveBlock",
			Handler:    _LedgerAPI_GenerateReceiveBlock_Handler,
		},
		{
			MethodName: "GenerateReceiveBlockByHash",
			Handler:    _LedgerAPI_GenerateReceiveBlockByHash_Handler,
		},
		{
			MethodName: "GenerateChangeBlock",
			Handler:    _LedgerAPI_GenerateChangeBlock_Handler,
		},
		{
			MethodName: "Process",
			Handler:    _LedgerAPI_Process_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _LedgerAPI_Test_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NewBlock",
			Handler:       _LedgerAPI_NewBlock_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NewAccountBlock",
			Handler:       _LedgerAPI_NewAccountBlock_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BalanceChange",
			Handler:       _LedgerAPI_BalanceChange_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NewPending",
			Handler:       _LedgerAPI_NewPending_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ledger.proto",
}
